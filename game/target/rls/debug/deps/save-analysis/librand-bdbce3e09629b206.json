{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2","program":"/home/mstott/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rand","--edition=2018","/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"getrandom_package\"","--cfg","feature=\"std\"","-C","metadata=bdbce3e09629b206","-C","extra-filename=-bdbce3e09629b206","--out-dir","/home/mstott/minds-eye/game/target/rls/debug/deps","-L","dependency=/home/mstott/minds-eye/game/target/rls/debug/deps","--extern","getrandom_package=/home/mstott/minds-eye/game/target/rls/debug/deps/libgetrandom-fe8e4272ac9dd22a.rmeta","--extern","libc=/home/mstott/minds-eye/game/target/rls/debug/deps/liblibc-b23895006ec13060.rmeta","--extern","rand_chacha=/home/mstott/minds-eye/game/target/rls/debug/deps/librand_chacha-64f541daa8be2697.rmeta","--extern","rand_core=/home/mstott/minds-eye/game/target/rls/debug/deps/librand_core-5b3743c372ddfb7d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/mstott/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/mstott/minds-eye/game/target/rls/debug/deps/librand-bdbce3e09629b206.rmeta"},"prelude":{"crate_id":{"name":"rand","disambiguator":[16712013117493813642,6483396659146115595]},"crate_root":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src","external_crates":[{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[2423746746187285099,5386406229726138340]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","num":2,"id":{"name":"core","disambiguator":[74170614911156096,8777707649336470801]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[18311065240978293854,14617509781119612022]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[18173704867086174028,4039161467348058363]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8418604661336717927,3849719409747810392]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6236558766572840537,13929013188374510833]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[392610936518424263,1230017816172033697]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[18296058753126537147,8781350946887063523]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[17221638088597551231,5998509115257805886]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14509523869741176240,6643242340861225094]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[5489575235980473901,6723630275213917445]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[2922212231751255063,1967217397198501177]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[17864009673642016956,9156703502060615342]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[3399196984372888889,16916695457996629473]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","num":15,"id":{"name":"rand_core","disambiguator":[5639039540450354622,7948408953761153681]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","num":16,"id":{"name":"getrandom","disambiguator":[16276023228343815905,8271123503504011721]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","num":17,"id":{"name":"cfg_if","disambiguator":[6893894091016856102,18404298307799037826]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","num":18,"id":{"name":"libc","disambiguator":[11266756340382047757,357287690664571742]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","num":19,"id":{"name":"rand_chacha","disambiguator":[8287254401138851015,14317018432460269691]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","num":20,"id":{"name":"c2_chacha","disambiguator":[9782499076839977217,14982764600034056142]}},{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","num":21,"id":{"name":"ppv_lite86","disambiguator":[6169256988678424378,12203486636714859593]}}],"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":408,"byte_end":22468,"line_start":10,"line_end":717,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":15,"index":141},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":2798,"byte_end":2805,"line_start":92,"line_end":92,"column_start":21,"column_end":28},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":146},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":2807,"byte_end":2816,"line_start":92,"line_end":92,"column_start":30,"column_end":39},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":147},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":2818,"byte_end":2829,"line_start":92,"line_end":92,"column_start":41,"column_end":52},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":11},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":2831,"byte_end":2836,"line_start":92,"line_end":92,"column_start":54,"column_end":59},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":734},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":2909,"byte_end":2919,"line_start":95,"line_end":95,"column_start":52,"column_end":62},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1604},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27315,"byte_end":27327,"line_start":107,"line_end":107,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":944},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27367,"byte_end":27374,"line_start":108,"line_end":108,"column_start":39,"column_end":46},"alias_span":null,"name":"Uniform","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1528},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27398,"byte_end":27410,"line_start":109,"line_end":109,"column_start":23,"column_end":35},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1535},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27412,"byte_end":27418,"line_start":109,"line_end":109,"column_start":37,"column_end":43},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1228},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27447,"byte_end":27456,"line_start":110,"line_end":110,"column_start":27,"column_end":36},"alias_span":null,"name":"Bernoulli","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1235},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27458,"byte_end":27472,"line_start":110,"line_end":110,"column_start":38,"column_end":52},"alias_span":null,"name":"BernoulliError","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1307},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27524,"byte_end":27537,"line_start":111,"line_end":111,"column_start":50,"column_end":63},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1318},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27539,"byte_end":27552,"line_start":111,"line_end":111,"column_start":65,"column_end":78},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1338},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27694,"byte_end":27711,"line_start":115,"line_end":115,"column_start":50,"column_end":67},"alias_span":null,"name":"UnitSphereSurface","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1345},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27783,"byte_end":27793,"line_start":117,"line_end":117,"column_start":50,"column_end":60},"alias_span":null,"name":"UnitCircle","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1352},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27860,"byte_end":27865,"line_start":119,"line_end":119,"column_start":45,"column_end":50},"alias_span":null,"name":"Gamma","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1391},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27867,"byte_end":27877,"line_start":119,"line_end":119,"column_start":52,"column_end":62},"alias_span":null,"name":"ChiSquared","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1409},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27879,"byte_end":27886,"line_start":119,"line_end":119,"column_start":64,"column_end":71},"alias_span":null,"name":"FisherF","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1418},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27892,"byte_end":27900,"line_start":120,"line_end":120,"column_start":5,"column_end":13},"alias_span":null,"name":"StudentT","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1426},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27902,"byte_end":27906,"line_start":120,"line_end":120,"column_start":15,"column_end":19},"alias_span":null,"name":"Beta","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1441},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27975,"byte_end":27981,"line_start":122,"line_end":122,"column_start":46,"column_end":52},"alias_span":null,"name":"Normal","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1449},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27983,"byte_end":27992,"line_start":122,"line_end":122,"column_start":54,"column_end":63},"alias_span":null,"name":"LogNormal","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1434},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27994,"byte_end":28008,"line_start":122,"line_end":122,"column_start":65,"column_end":79},"alias_span":null,"name":"StandardNormal","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1463},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":28082,"byte_end":28085,"line_start":124,"line_end":124,"column_start":51,"column_end":54},"alias_span":null,"name":"Exp","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1456},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":28087,"byte_end":28091,"line_start":124,"line_end":124,"column_start":56,"column_end":60},"alias_span":null,"name":"Exp1","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1470},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":28159,"byte_end":28165,"line_start":126,"line_end":126,"column_start":45,"column_end":51},"alias_span":null,"name":"Pareto","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1478},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":28233,"byte_end":28240,"line_start":128,"line_end":128,"column_start":46,"column_end":53},"alias_span":null,"name":"Poisson","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1489},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":28309,"byte_end":28317,"line_start":130,"line_end":130,"column_start":47,"column_end":55},"alias_span":null,"name":"Binomial","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1497},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":28384,"byte_end":28390,"line_start":132,"line_end":132,"column_start":45,"column_end":51},"alias_span":null,"name":"Cauchy","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1505},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":28460,"byte_end":28469,"line_start":134,"line_end":134,"column_start":48,"column_end":57},"alias_span":null,"name":"Dirichlet","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1511},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":28540,"byte_end":28550,"line_start":136,"line_end":136,"column_start":49,"column_end":59},"alias_span":null,"name":"Triangular","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1520},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":28618,"byte_end":28625,"line_start":138,"line_end":138,"column_start":46,"column_end":53},"alias_span":null,"name":"Weibull","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":414},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":29212,"byte_end":29221,"line_start":158,"line_end":158,"column_start":27,"column_end":36},"alias_span":null,"name":"IntoFloat","value":"","parent":{"krate":0,"index":418}},{"kind":"Use","ref_id":{"krate":0,"index":545},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":254070,"byte_end":254082,"line_start":21,"line_end":21,"column_start":49,"column_end":61},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":568}},{"kind":"Use","ref_id":{"krate":0,"index":2033},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":254123,"byte_end":254129,"line_start":22,"line_end":22,"column_start":40,"column_end":46},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":568}},{"kind":"Use","ref_id":{"krate":0,"index":2040},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":254269,"byte_end":254278,"line_start":25,"line_end":25,"column_start":62,"column_end":71},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":568}},{"kind":"Use","ref_id":{"krate":0,"index":913},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":254314,"byte_end":254317,"line_start":26,"line_end":26,"column_start":35,"column_end":38},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":568}},{"kind":"Use","ref_id":{"krate":15,"index":141},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":254319,"byte_end":254326,"line_start":26,"line_end":26,"column_start":40,"column_end":47},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":568}},{"kind":"Use","ref_id":{"krate":15,"index":146},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":254328,"byte_end":254337,"line_start":26,"line_end":26,"column_start":49,"column_end":58},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":568}},{"kind":"Use","ref_id":{"krate":15,"index":147},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":254339,"byte_end":254350,"line_start":26,"line_end":26,"column_start":60,"column_end":71},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":568}},{"kind":"Use","ref_id":{"krate":0,"index":942},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":254409,"byte_end":254415,"line_start":27,"line_end":27,"column_start":57,"column_end":63},"alias_span":null,"name":"random","value":"","parent":{"krate":0,"index":568}},{"kind":"Use","ref_id":{"krate":0,"index":734},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":254417,"byte_end":254427,"line_start":27,"line_end":27,"column_start":65,"column_end":75},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":568}},{"kind":"Use","ref_id":{"krate":0,"index":823},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":254469,"byte_end":254480,"line_start":28,"line_end":28,"column_start":40,"column_end":51},"alias_span":null,"name":"SliceRandom","value":"","parent":{"krate":0,"index":568}},{"kind":"Use","ref_id":{"krate":0,"index":847},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":254482,"byte_end":254496,"line_start":28,"line_end":28,"column_start":53,"column_end":67},"alias_span":null,"name":"IteratorRandom","value":"","parent":{"krate":0,"index":568}},{"kind":"Use","ref_id":{"krate":0,"index":1990},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/mod.rs","byte_start":260743,"byte_end":260750,"line_start":14,"line_end":14,"column_start":44,"column_end":51},"alias_span":null,"name":"ReadRng","value":"","parent":{"krate":0,"index":584}},{"kind":"Use","ref_id":{"krate":0,"index":1996},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/mod.rs","byte_start":260752,"byte_end":260761,"line_start":14,"line_end":14,"column_start":53,"column_end":62},"alias_span":null,"name":"ReadError","value":"","parent":{"krate":0,"index":584}},{"kind":"Use","ref_id":{"krate":0,"index":2001},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/mod.rs","byte_start":260789,"byte_end":260801,"line_start":15,"line_end":15,"column_start":26,"column_end":38},"alias_span":null,"name":"ReseedingRng","value":"","parent":{"krate":0,"index":584}},{"kind":"Use","ref_id":{"krate":0,"index":2022},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":260048,"byte_end":260058,"line_start":112,"line_end":112,"column_start":46,"column_end":56},"alias_span":null,"name":"EntropyRng","value":"","parent":{"krate":0,"index":583}},{"kind":"Use","ref_id":{"krate":0,"index":2033},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":260139,"byte_end":260145,"line_start":116,"line_end":116,"column_start":20,"column_end":26},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":583}},{"kind":"Use","ref_id":{"krate":0,"index":2040},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":260191,"byte_end":260200,"line_start":117,"line_end":117,"column_start":45,"column_end":54},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":583}},{"kind":"Use","ref_id":{"krate":15,"index":201},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":260250,"byte_end":260255,"line_start":119,"line_end":119,"column_start":48,"column_end":53},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":583}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":408,"byte_end":22468,"line_start":10,"line_end":717,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":568},{"krate":0,"index":583},{"krate":0,"index":748},{"krate":0,"index":902},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":909},{"krate":0,"index":913},{"krate":0,"index":932},{"krate":0,"index":934},{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":2097},{"krate":0,"index":2100},{"krate":0,"index":2103},{"krate":0,"index":2106},{"krate":0,"index":2109},{"krate":0,"index":2112},{"krate":0,"index":2115},{"krate":0,"index":2118},{"krate":0,"index":2121},{"krate":0,"index":2124},{"krate":0,"index":2127},{"krate":0,"index":2130},{"krate":0,"index":2133},{"krate":0,"index":2136},{"krate":0,"index":2139},{"krate":0,"index":2142},{"krate":0,"index":2145},{"krate":0,"index":2148},{"krate":0,"index":2151},{"krate":0,"index":2154},{"krate":0,"index":2157},{"krate":0,"index":2160},{"krate":0,"index":941},{"krate":0,"index":2163},{"krate":0,"index":2168},{"krate":0,"index":2173},{"krate":0,"index":2178},{"krate":0,"index":2183},{"krate":0,"index":2188},{"krate":0,"index":2193},{"krate":0,"index":2198},{"krate":0,"index":2203},{"krate":0,"index":2208},{"krate":0,"index":2213},{"krate":0,"index":2218},{"krate":0,"index":2223},{"krate":0,"index":2228},{"krate":0,"index":2233},{"krate":0,"index":2238},{"krate":0,"index":2243},{"krate":0,"index":2248},{"krate":0,"index":2253},{"krate":0,"index":2258},{"krate":0,"index":2263},{"krate":0,"index":2268},{"krate":0,"index":2273},{"krate":0,"index":2278},{"krate":0,"index":2283},{"krate":0,"index":2288},{"krate":0,"index":2293},{"krate":0,"index":2298},{"krate":0,"index":2303},{"krate":0,"index":2308},{"krate":0,"index":2313},{"krate":0,"index":2318},{"krate":0,"index":2323},{"krate":0,"index":2328},{"krate":0,"index":2333},{"krate":0,"index":2338},{"krate":0,"index":2343},{"krate":0,"index":2348},{"krate":0,"index":2353},{"krate":0,"index":2358},{"krate":0,"index":942}],"decl_id":null,"docs":" Utilities for random number generation","sig":null,"attributes":[{"value":"! Utilities for random number generation","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":408,"byte_end":450,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":451,"byte_end":454,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! Rand provides utilities to generate random numbers, to convert them to","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":455,"byte_end":529,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"! useful types and distributions, and some randomness-related algorithms.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":530,"byte_end":605,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":606,"byte_end":609,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! # Quick Start","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":610,"byte_end":627,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":628,"byte_end":631,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! To get you started quickly, the easiest and highest-level way to get","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":632,"byte_end":704,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"! a random value is to use [`random()`]; alternatively you can use","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":705,"byte_end":773,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"! [`thread_rng()`]. The [`Rng`] trait provides a useful API on all RNGs, while","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":774,"byte_end":854,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"! the [`distributions`] and [`seq`] modules provide further","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":855,"byte_end":916,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"! functionality on top of RNGs.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":917,"byte_end":950,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":951,"byte_end":954,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":955,"byte_end":962,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"! use rand::prelude::*;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":963,"byte_end":988,"line_start":24,"line_end":24,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":989,"byte_end":992,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"! if rand::random() { // generates a boolean","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":993,"byte_end":1039,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"!     // Try printing a random unicode code point (probably a bad idea)!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1040,"byte_end":1114,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"!     println!(\"char: {}\", rand::random::<char>());","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1115,"byte_end":1168,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"! }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1169,"byte_end":1174,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1175,"byte_end":1178,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! let mut rng = rand::thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1179,"byte_end":1216,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"! let y: f64 = rng.gen(); // generates a float between 0 and 1","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1217,"byte_end":1281,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1282,"byte_end":1285,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! let mut nums: Vec<i32> = (1..100).collect();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1286,"byte_end":1334,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"! nums.shuffle(&mut rng);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1335,"byte_end":1362,"line_start":35,"line_end":35,"column_start":1,"column_end":28}},{"value":"! ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1363,"byte_end":1370,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1371,"byte_end":1374,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! # The Book","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1375,"byte_end":1389,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1390,"byte_end":1393,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"! For the user guide and futher documentation, please read","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1394,"byte_end":1454,"line_start":40,"line_end":40,"column_start":1,"column_end":61}},{"value":"! [The Rust Rand Book](https://rust-random.github.io/book).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1455,"byte_end":1516,"line_start":41,"line_end":41,"column_start":1,"column_end":62}},{"value":"deny(missing_docs)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1734,"byte_end":1756,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1757,"byte_end":1796,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"allow(clippy :: excessive_precision, clippy :: unreadable_literal, clippy ::\n        float_cmp)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":1980,"byte_end":2065,"line_start":55,"line_end":55,"column_start":1,"column_end":86}}]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distributions","qualname":"::distributions","value":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":36},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":119},{"krate":0,"index":130},{"krate":0,"index":222},{"krate":0,"index":234},{"krate":0,"index":246},{"krate":0,"index":290},{"krate":0,"index":313},{"krate":0,"index":331},{"krate":0,"index":341},{"krate":0,"index":352},{"krate":0,"index":367},{"krate":0,"index":376},{"krate":0,"index":387},{"krate":0,"index":397},{"krate":0,"index":407},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":453},{"krate":0,"index":486},{"krate":0,"index":532},{"krate":0,"index":545},{"krate":0,"index":551},{"krate":0,"index":1971},{"krate":0,"index":1978},{"krate":0,"index":557},{"krate":0,"index":564},{"krate":0,"index":1983},{"krate":0,"index":1988},{"krate":0,"index":1987},{"krate":0,"index":1985}],"decl_id":null,"docs":" Generating random samples from probability distributions","sig":null,"attributes":[{"value":"! Generating random samples from probability distributions","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":22878,"byte_end":22938,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":22939,"byte_end":22942,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! This module is the home of the [`Distribution`] trait and several of its","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":22943,"byte_end":23019,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"! implementations. It is the workhorse behind some of the convenient","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23020,"byte_end":23090,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"! functionality of the [`Rng`] trait, e.g. [`Rng::gen`], [`Rng::gen_range`] and","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23091,"byte_end":23172,"line_start":14,"line_end":14,"column_start":1,"column_end":82}},{"value":"! of course [`Rng::sample`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23173,"byte_end":23203,"line_start":15,"line_end":15,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23204,"byte_end":23207,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! Abstractly, a [probability distribution] describes the probability of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23208,"byte_end":23281,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"! occurance of each value in its sample space.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23282,"byte_end":23330,"line_start":18,"line_end":18,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23331,"byte_end":23334,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! More concretely, an implementation of `Distribution<T>` for type `X` is an","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23335,"byte_end":23413,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"! algorithm for choosing values from the sample space (a subset of `T`)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23414,"byte_end":23487,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"! according to the distribution `X` represents, using an external source of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23488,"byte_end":23565,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"! randomness (an RNG supplied to the `sample` function).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23566,"byte_end":23624,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23625,"byte_end":23628,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! A type `X` may implement `Distribution<T>` for multiple types `T`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23629,"byte_end":23699,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"! Any type implementing [`Distribution`] is stateless (i.e. immutable),","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23700,"byte_end":23773,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"! but it may have internal parameters set at construction time (for example,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23774,"byte_end":23852,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"! [`Uniform`] allows specification of its sample space as a range within `T`).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23853,"byte_end":23933,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23934,"byte_end":23937,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23938,"byte_end":23941,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! # The `Standard` distribution","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23942,"byte_end":23975,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23976,"byte_end":23979,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! The [`Standard`] distribution is important to mention. This is the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":23980,"byte_end":24050,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"! distribution used by [`Rng::gen()`] and represents the \"default\" way to","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24051,"byte_end":24126,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"! produce a random value for many different types, including most primitive","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24127,"byte_end":24204,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"! types, tuples, arrays, and a few derived types. See the documentation of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24205,"byte_end":24281,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"! [`Standard`] for more details.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24282,"byte_end":24316,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24317,"byte_end":24320,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! Implementing `Distribution<T>` for [`Standard`] for user types `T` makes it","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24321,"byte_end":24400,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"! possible to generate type `T` with [`Rng::gen()`], and by extension also","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24401,"byte_end":24477,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"! with the [`random()`] function.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24478,"byte_end":24513,"line_start":41,"line_end":41,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24514,"byte_end":24517,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"! ## Random characters","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24518,"byte_end":24542,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"! ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24543,"byte_end":24547,"line_start":44,"line_end":44,"column_start":1,"column_end":5}},{"value":"! [`Alphanumeric`] is a simple distribution to sample random letters and","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24548,"byte_end":24622,"line_start":45,"line_end":45,"column_start":1,"column_end":75}},{"value":"! numbers of the `char` type; in contrast [`Standard`] may sample any valid","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24623,"byte_end":24700,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"! `char`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24701,"byte_end":24712,"line_start":47,"line_end":47,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24713,"byte_end":24716,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24717,"byte_end":24720,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! # Uniform numeric ranges","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24721,"byte_end":24749,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24750,"byte_end":24753,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! The [`Uniform`] distribution is more flexible than [`Standard`], but also","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24754,"byte_end":24831,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"! more specialised: it supports fewer target types, but allows the sample","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24832,"byte_end":24907,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"! space to be specified as an arbitrary range within its target type `T`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24908,"byte_end":24983,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"! Both [`Standard`] and [`Uniform`] are in some sense uniform distributions.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":24984,"byte_end":25062,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25063,"byte_end":25066,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"! Values may be sampled from this distribution using [`Rng::gen_range`] or","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25067,"byte_end":25143,"line_start":57,"line_end":57,"column_start":1,"column_end":77}},{"value":"! by creating a distribution object with [`Uniform::new`],","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25144,"byte_end":25204,"line_start":58,"line_end":58,"column_start":1,"column_end":61}},{"value":"! [`Uniform::new_inclusive`] or `From<Range>`. When the range limits are not","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25205,"byte_end":25283,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"! known at compile time it is typically faster to reuse an existing","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25284,"byte_end":25353,"line_start":60,"line_end":60,"column_start":1,"column_end":70}},{"value":"! distribution object than to call [`Rng::gen_range`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25354,"byte_end":25410,"line_start":61,"line_end":61,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25411,"byte_end":25414,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"! User types `T` may also implement `Distribution<T>` for [`Uniform`],","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25415,"byte_end":25487,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"! although this is less straightforward than for [`Standard`] (see the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25488,"byte_end":25560,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"! documentation in the [`uniform`] module. Doing so enables generation of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25561,"byte_end":25636,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"! values of type `T` with  [`Rng::gen_range`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25637,"byte_end":25685,"line_start":66,"line_end":66,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25686,"byte_end":25689,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! ## Open and half-open ranges","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25690,"byte_end":25722,"line_start":68,"line_end":68,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25723,"byte_end":25726,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"! There are surprisingly many ways to uniformly generate random floats. A","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25727,"byte_end":25802,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"! range between 0 and 1 is standard, but the exact bounds (open vs closed)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25803,"byte_end":25879,"line_start":71,"line_end":71,"column_start":1,"column_end":77}},{"value":"! and accuracy differ. In addition to the [`Standard`] distribution Rand offers","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25880,"byte_end":25961,"line_start":72,"line_end":72,"column_start":1,"column_end":82}},{"value":"! [`Open01`] and [`OpenClosed01`]. See \"Floating point implementation\" section of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":25962,"byte_end":26045,"line_start":73,"line_end":73,"column_start":1,"column_end":84}},{"value":"! [`Standard`] documentation for more details.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26046,"byte_end":26094,"line_start":74,"line_end":74,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26095,"byte_end":26098,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! # Non-uniform sampling","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26099,"byte_end":26125,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26126,"byte_end":26129,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"! Sampling a simple true/false outcome with a given probability has a name:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26130,"byte_end":26207,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"! the [`Bernoulli`] distribution (this is used by [`Rng::gen_bool`]).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26208,"byte_end":26279,"line_start":79,"line_end":79,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26280,"byte_end":26283,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"! For weighted sampling from a sequence of discrete values, use the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26284,"byte_end":26353,"line_start":81,"line_end":81,"column_start":1,"column_end":70}},{"value":"! [`weighted`] module.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26354,"byte_end":26378,"line_start":82,"line_end":82,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26379,"byte_end":26382,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"! This crate no longer includes other non-uniform distributions; instead","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26383,"byte_end":26457,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"! it is recommended that you use either [`rand_distr`] or [`statrs`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26458,"byte_end":26529,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26530,"byte_end":26533,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26534,"byte_end":26537,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"! [probability distribution]: https://en.wikipedia.org/wiki/Probability_distribution","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26538,"byte_end":26624,"line_start":88,"line_end":88,"column_start":1,"column_end":87}},{"value":"! [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26625,"byte_end":26680,"line_start":89,"line_end":89,"column_start":1,"column_end":56}},{"value":"! [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26681,"byte_end":26728,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"! [`Alphanumeric`]: distributions::Alphanumeric","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26730,"byte_end":26779,"line_start":92,"line_end":92,"column_start":1,"column_end":50}},{"value":"! [`Bernoulli`]: distributions::Bernoulli","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26780,"byte_end":26823,"line_start":93,"line_end":93,"column_start":1,"column_end":44}},{"value":"! [`Open01`]: distributions::Open01","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26824,"byte_end":26861,"line_start":94,"line_end":94,"column_start":1,"column_end":38}},{"value":"! [`OpenClosed01`]: distributions::OpenClosed01","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26862,"byte_end":26911,"line_start":95,"line_end":95,"column_start":1,"column_end":50}},{"value":"! [`Standard`]: distributions::Standard","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26912,"byte_end":26953,"line_start":96,"line_end":96,"column_start":1,"column_end":42}},{"value":"! [`Uniform`]: distributions::Uniform","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26954,"byte_end":26993,"line_start":97,"line_end":97,"column_start":1,"column_end":40}},{"value":"! [`Uniform::new`]: distributions::Uniform::new","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":26994,"byte_end":27043,"line_start":98,"line_end":98,"column_start":1,"column_end":50}},{"value":"! [`Uniform::new_inclusive`]: distributions::Uniform::new_inclusive","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27044,"byte_end":27113,"line_start":99,"line_end":99,"column_start":1,"column_end":70}},{"value":"! [`weighted`]: distributions::weighted","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27114,"byte_end":27155,"line_start":100,"line_end":100,"column_start":1,"column_end":42}},{"value":"! [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27156,"byte_end":27211,"line_start":101,"line_end":101,"column_start":1,"column_end":56}},{"value":"! [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":27212,"byte_end":27259,"line_start":102,"line_end":102,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":50},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uniform","qualname":"::distributions::uniform","value":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":944},{"krate":0,"index":953},{"krate":0,"index":951},{"krate":0,"index":948},{"krate":0,"index":60},{"krate":0,"index":68},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":956},{"krate":0,"index":966},{"krate":0,"index":964},{"krate":0,"index":961},{"krate":0,"index":104},{"krate":0,"index":969},{"krate":0,"index":971},{"krate":0,"index":985},{"krate":0,"index":987},{"krate":0,"index":1001},{"krate":0,"index":1003},{"krate":0,"index":1017},{"krate":0,"index":1019},{"krate":0,"index":1033},{"krate":0,"index":1035},{"krate":0,"index":1049},{"krate":0,"index":1051},{"krate":0,"index":1065},{"krate":0,"index":1067},{"krate":0,"index":1081},{"krate":0,"index":1083},{"krate":0,"index":1097},{"krate":0,"index":1099},{"krate":0,"index":1113},{"krate":0,"index":1115},{"krate":0,"index":1129},{"krate":0,"index":1131},{"krate":0,"index":1145},{"krate":0,"index":1147},{"krate":0,"index":1161},{"krate":0,"index":1170},{"krate":0,"index":1168},{"krate":0,"index":1165},{"krate":0,"index":105},{"krate":0,"index":1173},{"krate":0,"index":1175},{"krate":0,"index":1189},{"krate":0,"index":1191},{"krate":0,"index":1205},{"krate":0,"index":1211},{"krate":0,"index":1210},{"krate":0,"index":1208},{"krate":0,"index":1213},{"krate":0,"index":1226},{"krate":0,"index":1225},{"krate":0,"index":1223},{"krate":0,"index":106},{"krate":0,"index":108}],"decl_id":null,"docs":" A distribution uniformly sampling numbers within a given range.","sig":null,"attributes":[{"value":"! A distribution uniformly sampling numbers within a given range.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":37895,"byte_end":37962,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":37963,"byte_end":37966,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! [`Uniform`] is the standard distribution to sample uniformly from a range;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":37967,"byte_end":38045,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"! e.g. `Uniform::new_inclusive(1, 6)` can sample integers from 1 to 6, like a","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38046,"byte_end":38125,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"! standard die. [`Rng::gen_range`] supports any type supported by","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38126,"byte_end":38193,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"! [`Uniform`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38194,"byte_end":38210,"line_start":15,"line_end":15,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38211,"byte_end":38214,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! This distribution is provided with support for several primitive types","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38215,"byte_end":38289,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"! (all integer and floating-point types) as well as [`std::time::Duration`],","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38290,"byte_end":38368,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"! and supports extension to user-defined types via a type-specific *back-end*","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38369,"byte_end":38448,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"! implementation.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38449,"byte_end":38468,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38469,"byte_end":38472,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! The types [`UniformInt`], [`UniformFloat`] and [`UniformDuration`] are the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38473,"byte_end":38551,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"! back-ends supporting sampling from primitive integer and floating-point","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38552,"byte_end":38627,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"! ranges as well as from [`std::time::Duration`]; these types do not normally","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38628,"byte_end":38707,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"! need to be used directly (unless implementing a derived back-end).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38708,"byte_end":38778,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38779,"byte_end":38782,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! # Example usage","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38783,"byte_end":38802,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38803,"byte_end":38806,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38807,"byte_end":38814,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"! use rand::{Rng, thread_rng};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38815,"byte_end":38847,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"! use rand::distributions::Uniform;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38848,"byte_end":38885,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38886,"byte_end":38889,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! let mut rng = thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38890,"byte_end":38921,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"! let side = Uniform::new(-10.0, 10.0);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38922,"byte_end":38963,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38964,"byte_end":38967,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! // sample between 1 and 10 points","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":38968,"byte_end":39005,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"! for _ in 0..rng.gen_range(1, 11) {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39006,"byte_end":39044,"line_start":37,"line_end":37,"column_start":1,"column_end":39}},{"value":"!     // sample a point from the square with sides -10 - 10 in two dimensions","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39045,"byte_end":39124,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"!     let (x, y) = (rng.sample(side), rng.sample(side));","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39125,"byte_end":39183,"line_start":39,"line_end":39,"column_start":1,"column_end":59}},{"value":"!     println!(\"Point: {}, {}\", x, y);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39184,"byte_end":39224,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"! }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39225,"byte_end":39230,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39231,"byte_end":39238,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39239,"byte_end":39242,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! # Extending `Uniform` to support a custom type","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39243,"byte_end":39293,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39294,"byte_end":39297,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"! To extend [`Uniform`] to support your own types, write a back-end which","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39298,"byte_end":39373,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"! implements the [`UniformSampler`] trait, then implement the [`SampleUniform`]","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39374,"byte_end":39455,"line_start":47,"line_end":47,"column_start":1,"column_end":82}},{"value":"! helper trait to \"register\" your back-end. See the `MyF32` example below.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39456,"byte_end":39532,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39533,"byte_end":39536,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! At a minimum, the back-end needs to store any parameters needed for sampling","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39537,"byte_end":39617,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"! (e.g. the target range) and implement `new`, `new_inclusive` and `sample`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39618,"byte_end":39696,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"! Those methods should include an assert to check the range is valid (i.e.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39697,"byte_end":39773,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"! `low < high`). The example below merely wraps another back-end.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39774,"byte_end":39841,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39842,"byte_end":39845,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"! The `new`, `new_inclusive` and `sample_single` functions use arguments of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39846,"byte_end":39923,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"! type SampleBorrow<X> in order to support passing in values by reference or","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":39924,"byte_end":40002,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"! by value. In the implementation of these functions, you can choose to","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40003,"byte_end":40076,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"! simply use the reference returned by [`SampleBorrow::borrow`], or you can choose","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40077,"byte_end":40161,"line_start":58,"line_end":58,"column_start":1,"column_end":85}},{"value":"! to copy or clone the value, whatever is appropriate for your type.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40162,"byte_end":40232,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40233,"byte_end":40236,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40237,"byte_end":40244,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"! use rand::prelude::*;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40245,"byte_end":40270,"line_start":62,"line_end":62,"column_start":1,"column_end":26}},{"value":"! use rand::distributions::uniform::{Uniform, SampleUniform,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40271,"byte_end":40333,"line_start":63,"line_end":63,"column_start":1,"column_end":63}},{"value":"!         UniformSampler, UniformFloat, SampleBorrow};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40334,"byte_end":40390,"line_start":64,"line_end":64,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40391,"byte_end":40394,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"! struct MyF32(f32);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40395,"byte_end":40417,"line_start":66,"line_end":66,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40418,"byte_end":40421,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! #[derive(Clone, Copy, Debug)]","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40422,"byte_end":40455,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"! struct UniformMyF32(UniformFloat<f32>);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40456,"byte_end":40499,"line_start":69,"line_end":69,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40500,"byte_end":40503,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"! impl UniformSampler for UniformMyF32 {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40504,"byte_end":40546,"line_start":71,"line_end":71,"column_start":1,"column_end":43}},{"value":"!     type X = MyF32;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40547,"byte_end":40570,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"!     fn new<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40571,"byte_end":40620,"line_start":73,"line_end":73,"column_start":1,"column_end":50}},{"value":"!         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40621,"byte_end":40673,"line_start":74,"line_end":74,"column_start":1,"column_end":53}},{"value":"!               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40674,"byte_end":40725,"line_start":75,"line_end":75,"column_start":1,"column_end":52}},{"value":"!     {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40726,"byte_end":40735,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"!         UniformMyF32(UniformFloat::<f32>::new(low.borrow().0, high.borrow().0))","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40736,"byte_end":40819,"line_start":77,"line_end":77,"column_start":1,"column_end":84}},{"value":"!     }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40820,"byte_end":40829,"line_start":78,"line_end":78,"column_start":1,"column_end":10}},{"value":"!     fn new_inclusive<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40830,"byte_end":40889,"line_start":79,"line_end":79,"column_start":1,"column_end":60}},{"value":"!         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40890,"byte_end":40942,"line_start":80,"line_end":80,"column_start":1,"column_end":53}},{"value":"!               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40943,"byte_end":40994,"line_start":81,"line_end":81,"column_start":1,"column_end":52}},{"value":"!     {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":40995,"byte_end":41004,"line_start":82,"line_end":82,"column_start":1,"column_end":10}},{"value":"!         UniformSampler::new(low, high)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41005,"byte_end":41047,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"!     }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41048,"byte_end":41057,"line_start":84,"line_end":84,"column_start":1,"column_end":10}},{"value":"!     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41058,"byte_end":41125,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"!         MyF32(self.0.sample(rng))","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41126,"byte_end":41163,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"!     }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41164,"byte_end":41173,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41174,"byte_end":41179,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41180,"byte_end":41183,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"! impl SampleUniform for MyF32 {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41184,"byte_end":41218,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"!     type Sampler = UniformMyF32;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41219,"byte_end":41255,"line_start":91,"line_end":91,"column_start":1,"column_end":37}},{"value":"! }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41256,"byte_end":41261,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41262,"byte_end":41265,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"! let (low, high) = (MyF32(17.0f32), MyF32(22.0f32));","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41266,"byte_end":41321,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"! let uniform = Uniform::new(low, high);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41322,"byte_end":41364,"line_start":95,"line_end":95,"column_start":1,"column_end":43}},{"value":"! let x = uniform.sample(&mut thread_rng());","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41365,"byte_end":41411,"line_start":96,"line_end":96,"column_start":1,"column_end":47}},{"value":"! ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41412,"byte_end":41419,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41420,"byte_end":41423,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! [`SampleUniform`]: crate::distributions::uniform::SampleUniform","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41424,"byte_end":41491,"line_start":99,"line_end":99,"column_start":1,"column_end":68}},{"value":"! [`UniformSampler`]: crate::distributions::uniform::UniformSampler","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41492,"byte_end":41561,"line_start":100,"line_end":100,"column_start":1,"column_end":70}},{"value":"! [`UniformInt`]: crate::distributions::uniform::UniformInt","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41562,"byte_end":41623,"line_start":101,"line_end":101,"column_start":1,"column_end":62}},{"value":"! [`UniformFloat`]: crate::distributions::uniform::UniformFloat","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41624,"byte_end":41689,"line_start":102,"line_end":102,"column_start":1,"column_end":66}},{"value":"! [`UniformDuration`]: crate::distributions::uniform::UniformDuration","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41690,"byte_end":41761,"line_start":103,"line_end":103,"column_start":1,"column_end":72}},{"value":"! [`SampleBorrow::borrow`]: crate::distributions::uniform::SampleBorrow::borrow","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":41762,"byte_end":41843,"line_start":104,"line_end":104,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":944},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43991,"byte_end":43998,"line_start":165,"line_end":165,"column_start":12,"column_end":19},"name":"Uniform","qualname":"::distributions::uniform::Uniform","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample values uniformly between two bounds.","sig":null,"attributes":[{"value":"/ Sample values uniformly between two bounds.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":42344,"byte_end":42391,"line_start":124,"line_end":124,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":42392,"byte_end":42395,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ [`Uniform::new`] and [`Uniform::new_inclusive`] construct a uniform","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":42396,"byte_end":42467,"line_start":126,"line_end":126,"column_start":1,"column_end":72}},{"value":"/ distribution sampling from the given range; these functions may do extra","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":42468,"byte_end":42544,"line_start":127,"line_end":127,"column_start":1,"column_end":77}},{"value":"/ work up front to make sampling of multiple values faster.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":42545,"byte_end":42606,"line_start":128,"line_end":128,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":42607,"byte_end":42610,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ When sampling from a constant range, many calculations can happen at","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":42611,"byte_end":42683,"line_start":130,"line_end":130,"column_start":1,"column_end":73}},{"value":"/ compile-time and all methods should be fast; for floating-point ranges and","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":42684,"byte_end":42762,"line_start":131,"line_end":131,"column_start":1,"column_end":79}},{"value":"/ the full range of integer types this should have comparable performance to","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":42763,"byte_end":42841,"line_start":132,"line_end":132,"column_start":1,"column_end":79}},{"value":"/ the `Standard` distribution.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":42842,"byte_end":42874,"line_start":133,"line_end":133,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":42875,"byte_end":42878,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Steps are taken to avoid bias which might be present in naive","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":42879,"byte_end":42944,"line_start":135,"line_end":135,"column_start":1,"column_end":66}},{"value":"/ implementations; for example `rng.gen::<u8>() % 170` samples from the range","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":42945,"byte_end":43024,"line_start":136,"line_end":136,"column_start":1,"column_end":80}},{"value":"/ `[0, 169]` but is twice as likely to select numbers less than 85 than other","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43025,"byte_end":43104,"line_start":137,"line_end":137,"column_start":1,"column_end":80}},{"value":"/ values. Further, the implementations here give more weight to the high-bits","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43105,"byte_end":43184,"line_start":138,"line_end":138,"column_start":1,"column_end":80}},{"value":"/ generated by the RNG than the low bits, since with some RNGs the low-bits","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43185,"byte_end":43262,"line_start":139,"line_end":139,"column_start":1,"column_end":78}},{"value":"/ are of lower quality than the high bits.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43263,"byte_end":43307,"line_start":140,"line_end":140,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43308,"byte_end":43311,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ Implementations must sample in `[low, high)` range for","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43312,"byte_end":43370,"line_start":142,"line_end":142,"column_start":1,"column_end":59}},{"value":"/ `Uniform::new(low, high)`, i.e., excluding `high`. In particular care must","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43371,"byte_end":43449,"line_start":143,"line_end":143,"column_start":1,"column_end":79}},{"value":"/ be taken to ensure that rounding never results values `< low` or `>= high`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43450,"byte_end":43529,"line_start":144,"line_end":144,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43530,"byte_end":43533,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43534,"byte_end":43547,"line_start":146,"line_end":146,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43548,"byte_end":43551,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43552,"byte_end":43559,"line_start":148,"line_end":148,"column_start":1,"column_end":8}},{"value":"/ use rand::distributions::{Distribution, Uniform};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43560,"byte_end":43613,"line_start":149,"line_end":149,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43614,"byte_end":43617,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43618,"byte_end":43633,"line_start":151,"line_end":151,"column_start":1,"column_end":16}},{"value":"/     let between = Uniform::from(10..10000);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43634,"byte_end":43681,"line_start":152,"line_end":152,"column_start":1,"column_end":48}},{"value":"/     let mut rng = rand::thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43682,"byte_end":43723,"line_start":153,"line_end":153,"column_start":1,"column_end":42}},{"value":"/     let mut sum = 0;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43724,"byte_end":43748,"line_start":154,"line_end":154,"column_start":1,"column_end":25}},{"value":"/     for _ in 0..1000 {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43749,"byte_end":43775,"line_start":155,"line_end":155,"column_start":1,"column_end":27}},{"value":"/         sum += between.sample(&mut rng);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43776,"byte_end":43820,"line_start":156,"line_end":156,"column_start":1,"column_end":45}},{"value":"/     }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43821,"byte_end":43830,"line_start":157,"line_end":157,"column_start":1,"column_end":10}},{"value":"/     println!(\"{}\", sum);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43831,"byte_end":43859,"line_start":158,"line_end":158,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43860,"byte_end":43865,"line_start":159,"line_end":159,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43866,"byte_end":43873,"line_start":160,"line_end":160,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43874,"byte_end":43877,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ [`new`]: Uniform::new","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43878,"byte_end":43903,"line_start":162,"line_end":162,"column_start":1,"column_end":26}},{"value":"/ [`new_inclusive`]: Uniform::new_inclusive","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":43904,"byte_end":43949,"line_start":163,"line_end":163,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":44234,"byte_end":44237,"line_start":170,"line_end":170,"column_start":12,"column_end":15},"name":"new","qualname":"<Uniform<X>>::new","value":"fn <B1, B2> (low: B1, high: B2) -> Uniform<X>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the half\n open range `[low, high)` (excluding `high`). Panics if `low >= high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the half","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":44071,"byte_end":44144,"line_start":168,"line_end":168,"column_start":5,"column_end":78}},{"value":"/ open range `[low, high)` (excluding `high`). Panics if `low >= high`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":44149,"byte_end":44222,"line_start":169,"line_end":169,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":44577,"byte_end":44590,"line_start":179,"line_end":179,"column_start":12,"column_end":25},"name":"new_inclusive","qualname":"<Uniform<X>>::new_inclusive","value":"fn <B1, B2> (low: B1, high: B2) -> Uniform<X>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the closed\n range `[low, high]` (inclusive). Panics if `low > high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the closed","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":44425,"byte_end":44500,"line_start":177,"line_end":177,"column_start":5,"column_end":80}},{"value":"/ range `[low, high]` (inclusive). Panics if `low > high`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":44505,"byte_end":44565,"line_start":178,"line_end":178,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":72},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45237,"byte_end":45250,"line_start":200,"line_end":200,"column_start":11,"column_end":24},"name":"SampleUniform","qualname":"::distributions::uniform::SampleUniform","value":"SampleUniform: Sized","parent":null,"children":[{"krate":0,"index":73}],"decl_id":null,"docs":" Helper trait for creating objects using the correct implementation of\n [`UniformSampler`] for the sampling type.","sig":null,"attributes":[{"value":"/ Helper trait for creating objects using the correct implementation of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":44936,"byte_end":45009,"line_start":193,"line_end":193,"column_start":1,"column_end":74}},{"value":"/ [`UniformSampler`] for the sampling type.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45010,"byte_end":45055,"line_start":194,"line_end":194,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45056,"byte_end":45059,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45060,"byte_end":45132,"line_start":196,"line_end":196,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45133,"byte_end":45164,"line_start":197,"line_end":197,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45165,"byte_end":45168,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45169,"byte_end":45226,"line_start":199,"line_end":199,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":73},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45334,"byte_end":45341,"line_start":202,"line_end":202,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::distributions::uniform::SampleUniform::Sampler","value":"type Sampler: UniformSampler<X = Self>;","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" The `UniformSampler` implementation supporting type `X`.\n","sig":null,"attributes":[{"value":"/ The `UniformSampler` implementation supporting type `X`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45264,"byte_end":45324,"line_start":201,"line_end":201,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":74},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45816,"byte_end":45830,"line_start":215,"line_end":215,"column_start":11,"column_end":25},"name":"UniformSampler","qualname":"::distributions::uniform::UniformSampler","value":"UniformSampler: Sized","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":84}],"decl_id":null,"docs":" Helper trait handling actual uniform sampling.","sig":null,"attributes":[{"value":"/ Helper trait handling actual uniform sampling.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45372,"byte_end":45422,"line_start":205,"line_end":205,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45423,"byte_end":45426,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45427,"byte_end":45499,"line_start":207,"line_end":207,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45500,"byte_end":45531,"line_start":208,"line_end":208,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45532,"byte_end":45535,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ Implementation of [`sample_single`] is optional, and is only useful when","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45536,"byte_end":45612,"line_start":210,"line_end":210,"column_start":1,"column_end":77}},{"value":"/ the implementation can be faster than `Self::new(low, high).sample(rng)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45613,"byte_end":45690,"line_start":211,"line_end":211,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45691,"byte_end":45694,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45695,"byte_end":45752,"line_start":213,"line_end":213,"column_start":1,"column_end":58}},{"value":"/ [`sample_single`]: UniformSampler::sample_single","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45753,"byte_end":45805,"line_start":214,"line_end":214,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":75},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45898,"byte_end":45899,"line_start":217,"line_end":217,"column_start":10,"column_end":11},"name":"X","qualname":"::distributions::uniform::UniformSampler::X","value":"type X;","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" The type sampled by this implementation.\n","sig":null,"attributes":[{"value":"/ The type sampled by this implementation.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45844,"byte_end":45888,"line_start":216,"line_end":216,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46162,"byte_end":46165,"line_start":224,"line_end":224,"column_start":8,"column_end":11},"name":"new","qualname":"::distributions::uniform::UniformSampler::new","value":"fn <B1, B2> (low: B1, high: B2) -> Self","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Construct self, with inclusive lower bound and exclusive upper bound\n `[low, high)`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive lower bound and exclusive upper bound","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45906,"byte_end":45978,"line_start":219,"line_end":219,"column_start":5,"column_end":77}},{"value":"/ `[low, high)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45983,"byte_end":46001,"line_start":220,"line_end":220,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46006,"byte_end":46009,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46014,"byte_end":46077,"line_start":222,"line_end":222,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new`, which asserts that `low < high` before calling this.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46082,"byte_end":46154,"line_start":223,"line_end":223,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46540,"byte_end":46553,"line_start":233,"line_end":233,"column_start":8,"column_end":21},"name":"new_inclusive","qualname":"::distributions::uniform::UniformSampler::new_inclusive","value":"fn <B1, B2> (low: B1, high: B2) -> Self","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Construct self, with inclusive bounds `[low, high]`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive bounds `[low, high]`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46304,"byte_end":46360,"line_start":228,"line_end":228,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46365,"byte_end":46368,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46373,"byte_end":46436,"line_start":230,"line_end":230,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new_inclusive`, which asserts that `low <= high` before","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46441,"byte_end":46510,"line_start":231,"line_end":231,"column_start":5,"column_end":74}},{"value":"/ calling this.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46515,"byte_end":46532,"line_start":232,"line_end":232,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46719,"byte_end":46725,"line_start":238,"line_end":238,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::uniform::UniformSampler::sample","value":"fn <R> (&self, rng: &mut R) -> Self::X","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Sample a value.\n","sig":null,"attributes":[{"value":"/ Sample a value.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46692,"byte_end":46711,"line_start":237,"line_end":237,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":47700,"byte_end":47713,"line_start":259,"line_end":259,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::UniformSampler::sample_single","value":"fn <R, B1, B2> (low: B1, high: B2, rng: &mut R) -> Self::X","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and exclusive upper bound `[low, high)`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46780,"byte_end":46855,"line_start":240,"line_end":240,"column_start":5,"column_end":80}},{"value":"/ and exclusive upper bound `[low, high)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46860,"byte_end":46904,"line_start":241,"line_end":241,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46909,"byte_end":46912,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented using","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46917,"byte_end":46957,"line_start":243,"line_end":243,"column_start":5,"column_end":45}},{"value":"/ `UniformSampler::new(low, high).sample(rng)`. However, for some types","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":46962,"byte_end":47035,"line_start":244,"line_end":244,"column_start":5,"column_end":78}},{"value":"/ more optimal implementations for single usage may be provided via this","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":47040,"byte_end":47114,"line_start":245,"line_end":245,"column_start":5,"column_end":79}},{"value":"/ method (which is the case for integers and floats).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":47119,"byte_end":47174,"line_start":246,"line_end":246,"column_start":5,"column_end":60}},{"value":"/ Results may not be identical.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":47179,"byte_end":47212,"line_start":247,"line_end":247,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":47217,"byte_end":47220,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ Note that to use this method in a generic context, the type needs to be","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":47225,"byte_end":47300,"line_start":249,"line_end":249,"column_start":5,"column_end":80}},{"value":"/ retrieved via `SampleUniform::Sampler` as follows:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":47305,"byte_end":47359,"line_start":250,"line_end":250,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":47364,"byte_end":47371,"line_start":251,"line_end":251,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, distributions::uniform::{SampleUniform, UniformSampler}};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":47376,"byte_end":47460,"line_start":252,"line_end":252,"column_start":5,"column_end":89}},{"value":"/ # #[allow(unused)]","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":47465,"byte_end":47487,"line_start":253,"line_end":253,"column_start":5,"column_end":27}},{"value":"/ fn sample_from_range<T: SampleUniform>(lb: T, ub: T) -> T {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":47492,"byte_end":47555,"line_start":254,"line_end":254,"column_start":5,"column_end":68}},{"value":"/     let mut rng = thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":47560,"byte_end":47595,"line_start":255,"line_end":255,"column_start":5,"column_end":40}},{"value":"/     <T as SampleUniform>::Sampler::sample_single(lb, ub, &mut rng)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":47600,"byte_end":47670,"line_start":256,"line_end":256,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":47675,"byte_end":47680,"line_start":257,"line_end":257,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":47685,"byte_end":47692,"line_start":258,"line_end":258,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":94},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":48564,"byte_end":48576,"line_start":286,"line_end":286,"column_start":11,"column_end":23},"name":"SampleBorrow","qualname":"::distributions::uniform::SampleBorrow","value":"SampleBorrow<Borrowed>","parent":null,"children":[{"krate":0,"index":96}],"decl_id":null,"docs":" Helper trait similar to [`Borrow`] but implemented\n only for SampleUniform and references to SampleUniform in\n order to resolve ambiguity issues.","sig":null,"attributes":[{"value":"/ Helper trait similar to [`Borrow`] but implemented","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":48358,"byte_end":48412,"line_start":281,"line_end":281,"column_start":1,"column_end":55}},{"value":"/ only for SampleUniform and references to SampleUniform in","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":48413,"byte_end":48474,"line_start":282,"line_end":282,"column_start":1,"column_end":62}},{"value":"/ order to resolve ambiguity issues.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":48475,"byte_end":48513,"line_start":283,"line_end":283,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":48514,"byte_end":48517,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ [`Borrow`]: std::borrow::Borrow","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":48518,"byte_end":48553,"line_start":285,"line_end":285,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":48730,"byte_end":48736,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"borrow","qualname":"::distributions::uniform::SampleBorrow::borrow","value":"fn (&self) -> &Borrowed","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Immutably borrows from an owned value. See [`Borrow::borrow`]","sig":null,"attributes":[{"value":"/ Immutably borrows from an owned value. See [`Borrow::borrow`]","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":48593,"byte_end":48658,"line_start":287,"line_end":287,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":48663,"byte_end":48666,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ [`Borrow::borrow`]: std::borrow::Borrow::borrow","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":48671,"byte_end":48722,"line_start":289,"line_end":289,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":956},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":51133,"byte_end":51143,"line_start":341,"line_end":341,"column_start":12,"column_end":22},"name":"UniformInt","qualname":"::distributions::uniform::UniformInt","value":"UniformInt {  }","parent":null,"children":[{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for integer types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for integer types.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49188,"byte_end":49255,"line_start":306,"line_end":306,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49256,"byte_end":49259,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49260,"byte_end":49339,"line_start":308,"line_end":308,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49340,"byte_end":49397,"line_start":309,"line_end":309,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49398,"byte_end":49401,"line_start":310,"line_end":310,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49402,"byte_end":49428,"line_start":311,"line_end":311,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49429,"byte_end":49432,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/ For simplicity, we use the same generic struct `UniformInt<X>` for all","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49433,"byte_end":49507,"line_start":313,"line_end":313,"column_start":1,"column_end":75}},{"value":"/ integer types `X`. This gives us only one field type, `X`; to store unsigned","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49508,"byte_end":49588,"line_start":314,"line_end":314,"column_start":1,"column_end":81}},{"value":"/ values of this size, we take use the fact that these conversions are no-ops.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49589,"byte_end":49669,"line_start":315,"line_end":315,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49670,"byte_end":49673,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ For a closed range, the number of possible numbers we should generate is","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49674,"byte_end":49750,"line_start":317,"line_end":317,"column_start":1,"column_end":77}},{"value":"/ `range = (high - low + 1)`. To avoid bias, we must ensure that the size of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49751,"byte_end":49829,"line_start":318,"line_end":318,"column_start":1,"column_end":79}},{"value":"/ our sample space, `zone`, is a multiple of `range`; other values must be","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49830,"byte_end":49906,"line_start":319,"line_end":319,"column_start":1,"column_end":77}},{"value":"/ rejected (by replacing with a new random sample).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49907,"byte_end":49960,"line_start":320,"line_end":320,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49961,"byte_end":49964,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ As a special case, we use `range = 0` to represent the full range of the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":49965,"byte_end":50041,"line_start":322,"line_end":322,"column_start":1,"column_end":77}},{"value":"/ result type (i.e. for `new_inclusive($ty::MIN, $ty::MAX)`).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":50042,"byte_end":50105,"line_start":323,"line_end":323,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":50106,"byte_end":50109,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ The optimum `zone` is the largest product of `range` which fits in our","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":50110,"byte_end":50184,"line_start":325,"line_end":325,"column_start":1,"column_end":75}},{"value":"/ (unsigned) target type. We calculate this by calculating how many numbers we","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":50185,"byte_end":50265,"line_start":326,"line_end":326,"column_start":1,"column_end":81}},{"value":"/ must reject: `reject = (MAX + 1) % range = (MAX - range + 1) % range`. Any (large)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":50266,"byte_end":50352,"line_start":327,"line_end":327,"column_start":1,"column_end":87}},{"value":"/ product of `range` will suffice, thus in `sample_single` we multiply by a","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":50353,"byte_end":50430,"line_start":328,"line_end":328,"column_start":1,"column_end":78}},{"value":"/ power of 2 via bit-shifting (faster but may cause more rejections).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":50431,"byte_end":50502,"line_start":329,"line_end":329,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":50503,"byte_end":50506,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ The smallest integer PRNGs generate is `u32`. For 8- and 16-bit outputs we","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":50507,"byte_end":50585,"line_start":331,"line_end":331,"column_start":1,"column_end":79}},{"value":"/ use `u32` for our `zone` and samples (because it's not slower and because","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":50586,"byte_end":50663,"line_start":332,"line_end":332,"column_start":1,"column_end":78}},{"value":"/ it reduces the chance of having to reject a sample). In this case we cannot","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":50664,"byte_end":50743,"line_start":333,"line_end":333,"column_start":1,"column_end":80}},{"value":"/ store `zone` in the target type since it is too large, however we know","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":50744,"byte_end":50818,"line_start":334,"line_end":334,"column_start":1,"column_end":75}},{"value":"/ `ints_to_reject < range <= $unsigned::MAX`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":50819,"byte_end":50866,"line_start":335,"line_end":335,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":50867,"byte_end":50870,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ An alternative to using a modulus is widening multiply: After a widening","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":50871,"byte_end":50947,"line_start":337,"line_end":337,"column_start":1,"column_end":77}},{"value":"/ multiply by `range`, the result is in the high word. Then comparing the low","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":50948,"byte_end":51027,"line_start":338,"line_end":338,"column_start":1,"column_end":80}},{"value":"/ word against `zone` makes sure our distribution is uniform.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":51028,"byte_end":51091,"line_start":339,"line_end":339,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1161},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":63114,"byte_end":63126,"line_start":637,"line_end":637,"column_start":12,"column_end":24},"name":"UniformFloat","qualname":"::distributions::uniform::UniformFloat","value":"UniformFloat {  }","parent":null,"children":[{"krate":0,"index":1163},{"krate":0,"index":1164}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for floating-point types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for floating-point types.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62188,"byte_end":62262,"line_start":617,"line_end":617,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62263,"byte_end":62266,"line_start":618,"line_end":618,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62267,"byte_end":62346,"line_start":619,"line_end":619,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62347,"byte_end":62404,"line_start":620,"line_end":620,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62405,"byte_end":62408,"line_start":621,"line_end":621,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62409,"byte_end":62435,"line_start":622,"line_end":622,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62436,"byte_end":62439,"line_start":623,"line_end":623,"column_start":1,"column_end":4}},{"value":"/ Instead of generating a float in the `[0, 1)` range using [`Standard`], the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62440,"byte_end":62519,"line_start":624,"line_end":624,"column_start":1,"column_end":80}},{"value":"/ `UniformFloat` implementation converts the output of an PRNG itself. This","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62520,"byte_end":62597,"line_start":625,"line_end":625,"column_start":1,"column_end":78}},{"value":"/ way one or two steps can be optimized out.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62598,"byte_end":62644,"line_start":626,"line_end":626,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62645,"byte_end":62648,"line_start":627,"line_end":627,"column_start":1,"column_end":4}},{"value":"/ The floats are first converted to a value in the `[1, 2)` interval using a","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62649,"byte_end":62727,"line_start":628,"line_end":628,"column_start":1,"column_end":79}},{"value":"/ transmute-based method, and then mapped to the expected range with a","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62728,"byte_end":62800,"line_start":629,"line_end":629,"column_start":1,"column_end":73}},{"value":"/ multiply and addition. Values produced this way have what equals 22 bits of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62801,"byte_end":62880,"line_start":630,"line_end":630,"column_start":1,"column_end":80}},{"value":"/ random digits for an `f32`, and 52 for an `f64`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62881,"byte_end":62933,"line_start":631,"line_end":631,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62934,"byte_end":62937,"line_start":632,"line_end":632,"column_start":1,"column_end":4}},{"value":"/ [`new`]: UniformSampler::new","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62938,"byte_end":62970,"line_start":633,"line_end":633,"column_start":1,"column_end":33}},{"value":"/ [`new_inclusive`]: UniformSampler::new_inclusive","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":62971,"byte_end":63023,"line_start":634,"line_end":634,"column_start":1,"column_end":53}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":63024,"byte_end":63072,"line_start":635,"line_end":635,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1205},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":71065,"byte_end":71080,"line_start":819,"line_end":819,"column_start":12,"column_end":27},"name":"UniformDuration","qualname":"::distributions::uniform::UniformDuration","value":"UniformDuration {  }","parent":null,"children":[{"krate":0,"index":1206},{"krate":0,"index":1207}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `Duration`.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for `Duration`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":70816,"byte_end":70880,"line_start":814,"line_end":814,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":70881,"byte_end":70884,"line_start":815,"line_end":815,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own types, this type","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":70885,"byte_end":70965,"line_start":816,"line_end":816,"column_start":1,"column_end":81}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":70966,"byte_end":71023,"line_start":817,"line_end":817,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1228},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90531,"byte_end":90540,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"Bernoulli","qualname":"::distributions::bernoulli::Bernoulli","value":"Bernoulli {  }","parent":null,"children":[{"krate":0,"index":1229}],"decl_id":null,"docs":" The Bernoulli distribution.","sig":null,"attributes":[{"value":"/ The Bernoulli distribution.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":89953,"byte_end":89984,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":89985,"byte_end":89988,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This is a special case of the Binomial distribution where `n = 1`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":89989,"byte_end":90059,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90060,"byte_end":90063,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90064,"byte_end":90077,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90078,"byte_end":90081,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90082,"byte_end":90093,"line_start":20,"line_end":20,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{Bernoulli, Distribution};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90094,"byte_end":90149,"line_start":21,"line_end":21,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90150,"byte_end":90153,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ let d = Bernoulli::new(0.3).unwrap();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90154,"byte_end":90195,"line_start":23,"line_end":23,"column_start":1,"column_end":42}},{"value":"/ let v = d.sample(&mut rand::thread_rng());","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90196,"byte_end":90242,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"/ println!(\"{} is from a Bernoulli distribution\", v);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90243,"byte_end":90298,"line_start":25,"line_end":25,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90299,"byte_end":90306,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90307,"byte_end":90310,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Precision","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90311,"byte_end":90326,"line_start":28,"line_end":28,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90327,"byte_end":90330,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ This `Bernoulli` distribution uses 64 bits from the RNG (a `u64`),","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90331,"byte_end":90401,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/ so only probabilities that are multiples of 2<sup>-64</sup> can be","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90402,"byte_end":90472,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ represented.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":90473,"byte_end":90489,"line_start":32,"line_end":32,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1236},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92013,"byte_end":92031,"line_start":68,"line_end":68,"column_start":5,"column_end":23},"name":"InvalidProbability","qualname":"::distributions::bernoulli::BernoulliError::InvalidProbability","value":"BernoulliError::InvalidProbability","parent":{"krate":0,"index":1235},"children":[],"decl_id":null,"docs":" `p < 0` or `p > 1`.\n","sig":null,"attributes":[{"value":"/ `p < 0` or `p > 1`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":91985,"byte_end":92008,"line_start":67,"line_end":67,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":1235},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":91964,"byte_end":91978,"line_start":66,"line_end":66,"column_start":10,"column_end":24},"name":"BernoulliError","qualname":"::distributions::bernoulli::BernoulliError","value":"BernoulliError::{InvalidProbability}","parent":null,"children":[{"krate":0,"index":1236}],"decl_id":null,"docs":" Error type returned from `Bernoulli::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `Bernoulli::new`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":91863,"byte_end":91909,"line_start":64,"line_end":64,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92576,"byte_end":92579,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<Bernoulli>::new","value":"fn (p: f64) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the given probability of success `p`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the given probability of success `p`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92057,"byte_end":92131,"line_start":72,"line_end":72,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92136,"byte_end":92139,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ # Precision","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92144,"byte_end":92159,"line_start":74,"line_end":74,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92164,"byte_end":92167,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ For `p = 1.0`, the resulting distribution will always generate true.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92172,"byte_end":92244,"line_start":76,"line_end":76,"column_start":5,"column_end":77}},{"value":"/ For `p = 0.0`, the resulting distribution will always generate false.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92249,"byte_end":92322,"line_start":77,"line_end":77,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92327,"byte_end":92330,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ This method is accurate for any input `p` in the range `[0, 1]` which is","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92335,"byte_end":92411,"line_start":79,"line_end":79,"column_start":5,"column_end":81}},{"value":"/ a multiple of 2<sup>-64</sup>. (Note that not all multiples of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92416,"byte_end":92482,"line_start":80,"line_end":80,"column_start":5,"column_end":71}},{"value":"/ 2<sup>-64</sup> in `[0, 1]` can be represented as a `f64`.)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92487,"byte_end":92550,"line_start":81,"line_end":81,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92555,"byte_end":92564,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":93271,"byte_end":93281,"line_start":98,"line_end":98,"column_start":12,"column_end":22},"name":"from_ratio","qualname":"<Bernoulli>::from_ratio","value":"fn (numerator: u32, denominator: u32) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the probability of success of\n `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return\n a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the probability of success of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92865,"byte_end":92931,"line_start":91,"line_end":91,"column_start":5,"column_end":71}},{"value":"/ `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92936,"byte_end":93004,"line_start":92,"line_end":92,"column_start":5,"column_end":73}},{"value":"/ a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":93009,"byte_end":93083,"line_start":93,"line_end":93,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":93088,"byte_end":93091,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ If `numerator == denominator` then the returned `Bernoulli` will always","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":93096,"byte_end":93171,"line_start":95,"line_end":95,"column_start":5,"column_end":80}},{"value":"/ return `true`. If `numerator == 0` it will always return `false`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":93176,"byte_end":93245,"line_start":96,"line_end":96,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":93250,"byte_end":93259,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":130},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weighted","qualname":"::distributions::weighted","value":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":1307},{"krate":0,"index":1315},{"krate":0,"index":1312},{"krate":0,"index":201},{"krate":0,"index":209},{"krate":0,"index":1318},{"krate":0,"index":1336},{"krate":0,"index":1334},{"krate":0,"index":1333},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":220}],"decl_id":null,"docs":" Weighted index sampling\n \n This module provides two implementations for sampling indices:\n \n *   [`WeightedIndex`] allows `O(log N)` sampling\n *   [`alias_method::WeightedIndex`] allows `O(1)` sampling, but with\n      much greater set-up cost\n      \n [`alias_method::WeightedIndex`]: alias_method/struct.WeightedIndex.html\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":28660,"byte_end":28683,"line_start":142,"line_end":142,"column_start":1,"column_end":24}},{"value":"! Weighted index sampling","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":96142,"byte_end":96169,"line_start":9,"line_end":9,"column_start":1,"column_end":28}},{"value":"! ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":96170,"byte_end":96174,"line_start":10,"line_end":10,"column_start":1,"column_end":5}},{"value":"! This module provides two implementations for sampling indices:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":96175,"byte_end":96241,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"! ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":96242,"byte_end":96246,"line_start":12,"line_end":12,"column_start":1,"column_end":5}},{"value":"! *   [`WeightedIndex`] allows `O(log N)` sampling","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":96247,"byte_end":96299,"line_start":13,"line_end":13,"column_start":1,"column_end":53}},{"value":"! *   [`alias_method::WeightedIndex`] allows `O(1)` sampling, but with","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":96300,"byte_end":96372,"line_start":14,"line_end":14,"column_start":1,"column_end":73}},{"value":"!      much greater set-up cost","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":96373,"byte_end":96406,"line_start":15,"line_end":15,"column_start":1,"column_end":34}},{"value":"!      ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":96407,"byte_end":96416,"line_start":16,"line_end":16,"column_start":1,"column_end":10}},{"value":"! [`alias_method::WeightedIndex`]: alias_method/struct.WeightedIndex.html","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":96417,"byte_end":96492,"line_start":17,"line_end":17,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":131},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"alias_method","qualname":"::distributions::weighted::alias_method","value":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":154},{"krate":0,"index":172},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":1249},{"krate":0,"index":1254},{"krate":0,"index":1259},{"krate":0,"index":1263},{"krate":0,"index":1267},{"krate":0,"index":1271},{"krate":0,"index":1275},{"krate":0,"index":1279},{"krate":0,"index":1283},{"krate":0,"index":1287},{"krate":0,"index":1291},{"krate":0,"index":1295},{"krate":0,"index":1299},{"krate":0,"index":1303}],"decl_id":null,"docs":" This module contains an implementation of alias method for sampling random\n indices with probabilities proportional to a collection of weights.\n","sig":null,"attributes":[{"value":"! This module contains an implementation of alias method for sampling random","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":110283,"byte_end":110361,"line_start":1,"line_end":1,"column_start":1,"column_end":79}},{"value":"! indices with probabilities proportional to a collection of weights.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":110362,"byte_end":110433,"line_start":2,"line_end":2,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":148},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112831,"byte_end":112844,"line_start":64,"line_end":64,"column_start":12,"column_end":25},"name":"WeightedIndex","qualname":"::distributions::weighted::alias_method::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153}],"decl_id":null,"docs":" A distribution using weighted sampling to pick a discretely selected item.","sig":null,"attributes":[{"value":"/ A distribution using weighted sampling to pick a discretely selected item.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":110829,"byte_end":110907,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":110908,"byte_end":110911,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Sampling a [`WeightedIndex<W>`] distribution returns the index of a randomly","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":110912,"byte_end":110992,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ selected element from the vector used to create the [`WeightedIndex<W>`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":110993,"byte_end":111070,"line_start":20,"line_end":20,"column_start":1,"column_end":78}},{"value":"/ The chance of a given element being picked is proportional to the value of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111071,"byte_end":111149,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ the element. The weights can have any type `W` for which a implementation of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111150,"byte_end":111230,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ [`Weight`] exists.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111231,"byte_end":111253,"line_start":23,"line_end":23,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111254,"byte_end":111257,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111258,"byte_end":111275,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111276,"byte_end":111279,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Given that `n` is the number of items in the vector used to create an","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111280,"byte_end":111353,"line_start":27,"line_end":27,"column_start":1,"column_end":74}},{"value":"/ [`WeightedIndex<W>`], [`WeightedIndex<W>`] will require `O(n)` amount of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111354,"byte_end":111430,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/ memory. More specifically it takes up some constant amount of memory plus","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111431,"byte_end":111508,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"/ the vector used to create it and a [`Vec<u32>`] with capacity `n`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111509,"byte_end":111579,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111580,"byte_end":111583,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Time complexity for the creation of a [`WeightedIndex<W>`] is `O(n)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111584,"byte_end":111657,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ Sampling is `O(1)`, it makes a call to [`Uniform<u32>::sample`] and a call","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111658,"byte_end":111736,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/ to [`Uniform<W>::sample`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111737,"byte_end":111767,"line_start":34,"line_end":34,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111768,"byte_end":111771,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111772,"byte_end":111785,"line_start":36,"line_end":36,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111786,"byte_end":111789,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111790,"byte_end":111797,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ use rand::distributions::weighted::alias_method::WeightedIndex;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111798,"byte_end":111865,"line_start":39,"line_end":39,"column_start":1,"column_end":68}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111866,"byte_end":111891,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111892,"byte_end":111895,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ let choices = vec!['a', 'b', 'c'];","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111896,"byte_end":111934,"line_start":42,"line_end":42,"column_start":1,"column_end":39}},{"value":"/ let weights = vec![2, 1, 1];","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111935,"byte_end":111967,"line_start":43,"line_end":43,"column_start":1,"column_end":33}},{"value":"/ let dist = WeightedIndex::new(weights).unwrap();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":111968,"byte_end":112020,"line_start":44,"line_end":44,"column_start":1,"column_end":53}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112021,"byte_end":112052,"line_start":45,"line_end":45,"column_start":1,"column_end":32}},{"value":"/ for _ in 0..100 {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112053,"byte_end":112074,"line_start":46,"line_end":46,"column_start":1,"column_end":22}},{"value":"/     // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112075,"byte_end":112159,"line_start":47,"line_end":47,"column_start":1,"column_end":85}},{"value":"/     println!(\"{}\", choices[dist.sample(&mut rng)]);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112160,"byte_end":112215,"line_start":48,"line_end":48,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112216,"byte_end":112221,"line_start":49,"line_end":49,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112222,"byte_end":112225,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ let items = [('a', 0), ('b', 3), ('c', 7)];","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112226,"byte_end":112273,"line_start":51,"line_end":51,"column_start":1,"column_end":48}},{"value":"/ let dist2 = WeightedIndex::new(items.iter().map(|item| item.1).collect()).unwrap();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112274,"byte_end":112361,"line_start":52,"line_end":52,"column_start":1,"column_end":88}},{"value":"/ for _ in 0..100 {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112362,"byte_end":112383,"line_start":53,"line_end":53,"column_start":1,"column_end":22}},{"value":"/     // 0% chance to print 'a', 30% chance to print 'b', 70% chance to print 'c'","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112384,"byte_end":112467,"line_start":54,"line_end":54,"column_start":1,"column_end":84}},{"value":"/     println!(\"{}\", items[dist2.sample(&mut rng)].0);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112468,"byte_end":112524,"line_start":55,"line_end":55,"column_start":1,"column_end":57}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112525,"byte_end":112530,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112531,"byte_end":112538,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112539,"byte_end":112542,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ [`WeightedIndex<W>`]: crate::distributions::weighted::alias_method::WeightedIndex","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112543,"byte_end":112628,"line_start":59,"line_end":59,"column_start":1,"column_end":86}},{"value":"/ [`Weight`]: crate::distributions::weighted::alias_method::Weight","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112629,"byte_end":112697,"line_start":60,"line_end":60,"column_start":1,"column_end":69}},{"value":"/ [`Vec<u32>`]: Vec","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112698,"byte_end":112719,"line_start":61,"line_end":61,"column_start":1,"column_end":22}},{"value":"/ [`Uniform<u32>::sample`]: Distribution::sample","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112720,"byte_end":112770,"line_start":62,"line_end":62,"column_start":1,"column_end":51}},{"value":"/ [`Uniform<W>::sample`]: Distribution::sample","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":112771,"byte_end":112819,"line_start":63,"line_end":63,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":113327,"byte_end":113330,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedIndex<W>>::new","value":"fn (weights: Vec<W>) -> Result<Self, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`WeightedIndex`].","sig":null,"attributes":[{"value":"/ Creates a new [`WeightedIndex`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":113026,"byte_end":113062,"line_start":72,"line_end":72,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":113067,"byte_end":113070,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Returns an error if:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":113075,"byte_end":113099,"line_start":74,"line_end":74,"column_start":5,"column_end":29}},{"value":"/ - The vector is empty.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":113104,"byte_end":113130,"line_start":75,"line_end":75,"column_start":5,"column_end":31}},{"value":"/ - The vector is longer than `u32::MAX`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":113135,"byte_end":113178,"line_start":76,"line_end":76,"column_start":5,"column_end":48}},{"value":"/ - For any weight `w`: `w < 0` or `w > max` where `max = W::MAX /","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":113183,"byte_end":113251,"line_start":77,"line_end":77,"column_start":5,"column_end":73}},{"value":"/   weights.len()`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":113256,"byte_end":113277,"line_start":78,"line_end":78,"column_start":5,"column_end":26}},{"value":"/ - The sum of weights is zero.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":113282,"byte_end":113315,"line_start":79,"line_end":79,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":182},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":119904,"byte_end":119910,"line_start":272,"line_end":272,"column_start":11,"column_end":17},"name":"Weight","qualname":"::distributions::weighted::alias_method::Weight","value":"Weight: Sized + Copy + SampleUniform + PartialOrd + Add<Output = Self> + AddAssign +\nSub<Output = Self> + SubAssign + Mul<Output = Self> + MulAssign + Div<Output =\nSelf> + DivAssign + Sum","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186}],"decl_id":null,"docs":" Trait that must be implemented for weights, that are used with\n [`WeightedIndex`]. Currently no guarantees on the correctness of\n [`WeightedIndex`] are given for custom implementations of this trait.\n","sig":null,"attributes":[{"value":"/ Trait that must be implemented for weights, that are used with","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":119684,"byte_end":119750,"line_start":269,"line_end":269,"column_start":1,"column_end":67}},{"value":"/ [`WeightedIndex`]. Currently no guarantees on the correctness of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":119751,"byte_end":119819,"line_start":270,"line_end":270,"column_start":1,"column_end":69}},{"value":"/ [`WeightedIndex`] are given for custom implementations of this trait.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":119820,"byte_end":119893,"line_start":271,"line_end":271,"column_start":1,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":183},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120204,"byte_end":120207,"line_start":288,"line_end":288,"column_start":11,"column_end":14},"name":"MAX","qualname":"::distributions::weighted::alias_method::Weight::MAX","value":"Self","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Maximum number representable by `Self`.\n","sig":null,"attributes":[{"value":"/ Maximum number representable by `Self`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120150,"byte_end":120193,"line_start":287,"line_end":287,"column_start":5,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":184},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120269,"byte_end":120273,"line_start":291,"line_end":291,"column_start":11,"column_end":15},"name":"ZERO","qualname":"::distributions::weighted::alias_method::Weight::ZERO","value":"Self","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Element of `Self` equivalent to 0.\n","sig":null,"attributes":[{"value":"/ Element of `Self` equivalent to 0.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120220,"byte_end":120258,"line_start":290,"line_end":290,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120470,"byte_end":120488,"line_start":296,"line_end":296,"column_start":8,"column_end":26},"name":"try_from_u32_lossy","qualname":"::distributions::weighted::alias_method::Weight::try_from_u32_lossy","value":"fn (n: u32) -> Option<Self>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Produce an instance of `Self` from a `u32` value, or return `None` if\n out of range. Loss of precision (where `Self` is a floating point type)\n is acceptable.\n","sig":null,"attributes":[{"value":"/ Produce an instance of `Self` from a `u32` value, or return `None` if","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120286,"byte_end":120359,"line_start":293,"line_end":293,"column_start":5,"column_end":78}},{"value":"/ out of range. Loss of precision (where `Self` is a floating point type)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120364,"byte_end":120439,"line_start":294,"line_end":294,"column_start":5,"column_end":80}},{"value":"/ is acceptable.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120444,"byte_end":120462,"line_start":295,"line_end":295,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120565,"byte_end":120568,"line_start":299,"line_end":299,"column_start":8,"column_end":11},"name":"sum","qualname":"::distributions::weighted::alias_method::Weight::sum","value":"fn (values: &[Self]) -> Self","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Sums all values in slice `values`.\n","sig":null,"attributes":[{"value":"/ Sums all values in slice `values`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120519,"byte_end":120557,"line_start":298,"line_end":298,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1307},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99161,"byte_end":99174,"line_start":85,"line_end":85,"column_start":12,"column_end":25},"name":"WeightedIndex","qualname":"::distributions::weighted::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311}],"decl_id":null,"docs":" A distribution using weighted sampling to pick a discretely selected\n item.","sig":null,"attributes":[{"value":"/ A distribution using weighted sampling to pick a discretely selected","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":96833,"byte_end":96905,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ item.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":96906,"byte_end":96915,"line_start":31,"line_end":31,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":96916,"byte_end":96919,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Sampling a `WeightedIndex` distribution returns the index of a randomly","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":96920,"byte_end":96995,"line_start":33,"line_end":33,"column_start":1,"column_end":76}},{"value":"/ selected element from the iterator used when the `WeightedIndex` was","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":96996,"byte_end":97068,"line_start":34,"line_end":34,"column_start":1,"column_end":73}},{"value":"/ created. The chance of a given element being picked is proportional to the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97069,"byte_end":97147,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ value of the element. The weights can use any type `X` for which an","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97148,"byte_end":97219,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/ implementation of [`Uniform<X>`] exists.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97220,"byte_end":97264,"line_start":37,"line_end":37,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97265,"byte_end":97268,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97269,"byte_end":97286,"line_start":39,"line_end":39,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97287,"byte_end":97290,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ A `WeightedIndex<X>` contains a `Vec<X>` and a [`Uniform<X>`] and so its","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97291,"byte_end":97367,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ size is the sum of the size of those objects, possibly plus some alignment.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97368,"byte_end":97447,"line_start":42,"line_end":42,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97448,"byte_end":97451,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Creating a `WeightedIndex<X>` will allocate enough space to hold `N - 1`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97452,"byte_end":97528,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ weights of type `X`, where `N` is the number of weights. However, since","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97529,"byte_end":97604,"line_start":45,"line_end":45,"column_start":1,"column_end":76}},{"value":"/ `Vec` doesn't guarantee a particular growth strategy, additional memory","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97605,"byte_end":97680,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"/ might be allocated but not used. Since the `WeightedIndex` object also","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97681,"byte_end":97755,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ contains, this might cause additional allocations, though for primitive","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97756,"byte_end":97831,"line_start":48,"line_end":48,"column_start":1,"column_end":76}},{"value":"/ types, ['Uniform<X>`] doesn't allocate any memory.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97832,"byte_end":97886,"line_start":49,"line_end":49,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97887,"byte_end":97890,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Time complexity of sampling from `WeightedIndex` is `O(log N)` where","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97891,"byte_end":97963,"line_start":51,"line_end":51,"column_start":1,"column_end":73}},{"value":"/ `N` is the number of weights.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97964,"byte_end":97997,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":97998,"byte_end":98001,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Sampling from `WeightedIndex` will result in a single call to","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98002,"byte_end":98067,"line_start":54,"line_end":54,"column_start":1,"column_end":66}},{"value":"/ `Uniform<X>::sample` (method of the [`Distribution`] trait), which typically","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98068,"byte_end":98148,"line_start":55,"line_end":55,"column_start":1,"column_end":81}},{"value":"/ will request a single value from the underlying [`RngCore`], though the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98149,"byte_end":98224,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/ exact number depends on the implementaiton of `Uniform<X>::sample`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98225,"byte_end":98296,"line_start":57,"line_end":57,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98297,"byte_end":98300,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98301,"byte_end":98314,"line_start":59,"line_end":59,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98315,"byte_end":98318,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98319,"byte_end":98326,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98327,"byte_end":98352,"line_start":62,"line_end":62,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::WeightedIndex;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98353,"byte_end":98396,"line_start":63,"line_end":63,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98397,"byte_end":98400,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ let choices = ['a', 'b', 'c'];","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98401,"byte_end":98435,"line_start":65,"line_end":65,"column_start":1,"column_end":35}},{"value":"/ let weights = [2,   1,   1];","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98436,"byte_end":98468,"line_start":66,"line_end":66,"column_start":1,"column_end":33}},{"value":"/ let dist = WeightedIndex::new(&weights).unwrap();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98469,"byte_end":98522,"line_start":67,"line_end":67,"column_start":1,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98523,"byte_end":98554,"line_start":68,"line_end":68,"column_start":1,"column_end":32}},{"value":"/ for _ in 0..100 {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98555,"byte_end":98576,"line_start":69,"line_end":69,"column_start":1,"column_end":22}},{"value":"/     // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98577,"byte_end":98661,"line_start":70,"line_end":70,"column_start":1,"column_end":85}},{"value":"/     println!(\"{}\", choices[dist.sample(&mut rng)]);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98662,"byte_end":98717,"line_start":71,"line_end":71,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98718,"byte_end":98723,"line_start":72,"line_end":72,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98724,"byte_end":98727,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ let items = [('a', 0), ('b', 3), ('c', 7)];","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98728,"byte_end":98775,"line_start":74,"line_end":74,"column_start":1,"column_end":48}},{"value":"/ let dist2 = WeightedIndex::new(items.iter().map(|item| item.1)).unwrap();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98776,"byte_end":98853,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"/ for _ in 0..100 {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98854,"byte_end":98875,"line_start":76,"line_end":76,"column_start":1,"column_end":22}},{"value":"/     // 0% chance to print 'a', 30% chance to print 'b', 70% chance to print 'c'","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98876,"byte_end":98959,"line_start":77,"line_end":77,"column_start":1,"column_end":84}},{"value":"/     println!(\"{}\", items[dist2.sample(&mut rng)].0);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":98960,"byte_end":99016,"line_start":78,"line_end":78,"column_start":1,"column_end":57}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99017,"byte_end":99022,"line_start":79,"line_end":79,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99023,"byte_end":99030,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99031,"byte_end":99034,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ [`Uniform<X>`]: crate::distributions::uniform::Uniform","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99035,"byte_end":99093,"line_start":82,"line_end":82,"column_start":1,"column_end":59}},{"value":"/ [`RngCore`]: crate::RngCore","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99094,"byte_end":99125,"line_start":83,"line_end":83,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99748,"byte_end":99751,"line_start":100,"line_end":100,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedIndex<X>>::new","value":"fn <I> (weights: I) -> Result<WeightedIndex<X>, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new a `WeightedIndex` [`Distribution`] using the values\n in `weights`. The weights can use any type `X` for which an\n implementation of [`Uniform<X>`] exists.","sig":null,"attributes":[{"value":"/ Creates a new a `WeightedIndex` [`Distribution`] using the values","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99360,"byte_end":99429,"line_start":92,"line_end":92,"column_start":5,"column_end":74}},{"value":"/ in `weights`. The weights can use any type `X` for which an","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99434,"byte_end":99497,"line_start":93,"line_end":93,"column_start":5,"column_end":68}},{"value":"/ implementation of [`Uniform<X>`] exists.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99502,"byte_end":99546,"line_start":94,"line_end":94,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99551,"byte_end":99554,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the iterator is empty, if any weight is `< 0`, or","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99559,"byte_end":99632,"line_start":96,"line_end":96,"column_start":5,"column_end":78}},{"value":"/ if its total value is 0.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99637,"byte_end":99665,"line_start":97,"line_end":97,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99670,"byte_end":99673,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ [`Uniform<X>`]: crate::distributions::uniform::Uniform","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99678,"byte_end":99736,"line_start":99,"line_end":99,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":101391,"byte_end":101405,"line_start":143,"line_end":143,"column_start":12,"column_end":26},"name":"update_weights","qualname":"<WeightedIndex<X>>::update_weights","value":"fn (&mut self, new_weights: &[(usize, &X)]) -> Result<(), WeightedError>","parent":null,"children":[],"decl_id":null,"docs":" Update a subset of weights, without changing the number of weights.","sig":null,"attributes":[{"value":"/ Update a subset of weights, without changing the number of weights.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":100968,"byte_end":101039,"line_start":134,"line_end":134,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":101044,"byte_end":101047,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ `new_weights` must be sorted by the index.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":101052,"byte_end":101098,"line_start":136,"line_end":136,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":101103,"byte_end":101106,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ Using this method instead of `new` might be more efficient if only a small number of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":101111,"byte_end":101199,"line_start":138,"line_end":138,"column_start":5,"column_end":93}},{"value":"/ weights is modified. No allocations are performed, unless the weight type `X` uses","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":101204,"byte_end":101290,"line_start":139,"line_end":139,"column_start":5,"column_end":91}},{"value":"/ allocation internally.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":101295,"byte_end":101321,"line_start":140,"line_end":140,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":101326,"byte_end":101329,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ In case of error, `self` is not modified.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":101334,"byte_end":101379,"line_start":142,"line_end":142,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1319},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":109258,"byte_end":109264,"line_start":354,"line_end":354,"column_start":5,"column_end":11},"name":"NoItem","qualname":"::distributions::weighted::WeightedError::NoItem","value":"WeightedError::NoItem","parent":{"krate":0,"index":1318},"children":[],"decl_id":null,"docs":" The provided weight collection contains no items.\n","sig":null,"attributes":[{"value":"/ The provided weight collection contains no items.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":109200,"byte_end":109253,"line_start":353,"line_end":353,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1321},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":109379,"byte_end":109392,"line_start":358,"line_end":358,"column_start":5,"column_end":18},"name":"InvalidWeight","qualname":"::distributions::weighted::WeightedError::InvalidWeight","value":"WeightedError::InvalidWeight","parent":{"krate":0,"index":1318},"children":[],"decl_id":null,"docs":" A weight is either less than zero, greater than the supported maximum or\n otherwise invalid.\n","sig":null,"attributes":[{"value":"/ A weight is either less than zero, greater than the supported maximum or","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":109271,"byte_end":109347,"line_start":356,"line_end":356,"column_start":5,"column_end":81}},{"value":"/ otherwise invalid.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":109352,"byte_end":109374,"line_start":357,"line_end":357,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1323},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":109461,"byte_end":109475,"line_start":361,"line_end":361,"column_start":5,"column_end":19},"name":"AllWeightsZero","qualname":"::distributions::weighted::WeightedError::AllWeightsZero","value":"WeightedError::AllWeightsZero","parent":{"krate":0,"index":1318},"children":[],"decl_id":null,"docs":" All items in the provided weight collection are zero.\n","sig":null,"attributes":[{"value":"/ All items in the provided weight collection are zero.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":109399,"byte_end":109456,"line_start":360,"line_end":360,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1325},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":109557,"byte_end":109564,"line_start":364,"line_end":364,"column_start":5,"column_end":12},"name":"TooMany","qualname":"::distributions::weighted::WeightedError::TooMany","value":"WeightedError::TooMany","parent":{"krate":0,"index":1318},"children":[],"decl_id":null,"docs":" Too many weights are provided (length greater than `u32::MAX`)\n","sig":null,"attributes":[{"value":"/ Too many weights are provided (length greater than `u32::MAX`)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":109486,"byte_end":109552,"line_start":363,"line_end":363,"column_start":5,"column_end":71}}]},{"kind":"Enum","id":{"krate":0,"index":1318},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":109180,"byte_end":109193,"line_start":352,"line_end":352,"column_start":10,"column_end":23},"name":"WeightedError","qualname":"::distributions::weighted::WeightedError","value":"WeightedError::{NoItem, InvalidWeight, AllWeightsZero, TooMany}","parent":null,"children":[{"krate":0,"index":1319},{"krate":0,"index":1321},{"krate":0,"index":1323},{"krate":0,"index":1325}],"decl_id":null,"docs":" Error type returned from `WeightedIndex::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `WeightedIndex::new`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":109075,"byte_end":109125,"line_start":350,"line_end":350,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1338},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_sphere.rs","byte_start":128327,"byte_end":128344,"line_start":24,"line_end":24,"column_start":12,"column_end":29},"name":"UnitSphereSurface","qualname":"::distributions::unit_sphere::UnitSphereSurface","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples uniformly from the surface of the unit sphere in three dimensions.","sig":null,"attributes":[{"value":"/ Samples uniformly from the surface of the unit sphere in three dimensions.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_sphere.rs","byte_start":127900,"byte_end":127978,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_sphere.rs","byte_start":127979,"byte_end":127982,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Implemented via a method by Marsaglia[^1].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_sphere.rs","byte_start":127983,"byte_end":128029,"line_start":17,"line_end":17,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_sphere.rs","byte_start":128030,"byte_end":128033,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [^1]: Marsaglia, George (1972). [*Choosing a Point from the Surface of a","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_sphere.rs","byte_start":128034,"byte_end":128110,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/       Sphere.*](https://doi.org/10.1214/aoms/1177692644)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_sphere.rs","byte_start":128111,"byte_end":128171,"line_start":20,"line_end":20,"column_start":1,"column_end":61}},{"value":"/       Ann. Math. Statist. 43, no. 2, 645--646.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_sphere.rs","byte_start":128172,"byte_end":128222,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_sphere.rs","byte_start":128223,"byte_end":128285,"line_start":22,"line_end":22,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_sphere.rs","byte_start":128455,"byte_end":128458,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<UnitSphereSurface>::new","value":"fn () -> UnitSphereSurface","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `UnitSphereSurface` distribution.\n","sig":null,"attributes":[{"value":"/ Construct a new `UnitSphereSurface` distribution.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_sphere.rs","byte_start":128376,"byte_end":128429,"line_start":27,"line_end":27,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_sphere.rs","byte_start":128434,"byte_end":128443,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1345},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131548,"byte_end":131558,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"UnitCircle","qualname":"::distributions::unit_circle::UnitCircle","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples uniformly from the edge of the unit circle in two dimensions.","sig":null,"attributes":[{"value":"/ Samples uniformly from the edge of the unit circle in two dimensions.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131046,"byte_end":131119,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131120,"byte_end":131123,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Implemented via a method by von Neumann[^1].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131124,"byte_end":131172,"line_start":17,"line_end":17,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131173,"byte_end":131176,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [^1]: von Neumann, J. (1951) [*Various Techniques Used in Connection with","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131177,"byte_end":131254,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/       Random Digits.*](https://mcnp.lanl.gov/pdf_files/nbs_vonneumann.pdf)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131255,"byte_end":131333,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/       NBS Appl. Math. Ser., No. 12. Washington, DC: U.S. Government Printing","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131334,"byte_end":131414,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/       Office, pp. 36-38.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131415,"byte_end":131443,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131444,"byte_end":131506,"line_start":23,"line_end":23,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131655,"byte_end":131658,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<UnitCircle>::new","value":"fn () -> UnitCircle","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `UnitCircle` distribution.\n","sig":null,"attributes":[{"value":"/ Construct a new `UnitCircle` distribution.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131583,"byte_end":131629,"line_start":28,"line_end":28,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131634,"byte_end":131643,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1352},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":135233,"byte_end":135238,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"Gamma","qualname":"::distributions::gamma::Gamma","value":"Gamma {  }","parent":null,"children":[{"krate":0,"index":1353}],"decl_id":null,"docs":" The Gamma distribution `Gamma(shape, scale)` distribution.","sig":null,"attributes":[{"value":"/ The Gamma distribution `Gamma(shape, scale)` distribution.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134306,"byte_end":134368,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134369,"byte_end":134372,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The density function of this distribution is","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134373,"byte_end":134421,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134422,"byte_end":134425,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134426,"byte_end":134437,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ f(x) =  x^(k - 1) * exp(-x / θ) / (Γ(k) * θ^k)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134438,"byte_end":134491,"line_start":25,"line_end":25,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134492,"byte_end":134499,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134500,"byte_end":134503,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ where `Γ` is the Gamma function, `k` is the shape and `θ` is the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134504,"byte_end":134574,"line_start":28,"line_end":28,"column_start":1,"column_end":69}},{"value":"/ scale and both `k` and `θ` are strictly positive.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134575,"byte_end":134629,"line_start":29,"line_end":29,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134630,"byte_end":134633,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ The algorithm used is that described by Marsaglia & Tsang 2000[^1],","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134634,"byte_end":134705,"line_start":31,"line_end":31,"column_start":1,"column_end":72}},{"value":"/ falling back to directly sampling from an Exponential for `shape","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134706,"byte_end":134774,"line_start":32,"line_end":32,"column_start":1,"column_end":69}},{"value":"/ == 1`, and using the boosting technique described in that paper for","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134775,"byte_end":134846,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ `shape < 1`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134847,"byte_end":134863,"line_start":34,"line_end":34,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134864,"byte_end":134867,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ [^1]: George Marsaglia and Wai Wan Tsang. 2000. \"A Simple Method for","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134868,"byte_end":134940,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/       Generating Gamma Variables\" *ACM Trans. Math. Softw.* 26, 3","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":134941,"byte_end":135010,"line_start":37,"line_end":37,"column_start":1,"column_end":70}},{"value":"/       (September 2000), 363-372.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":135011,"byte_end":135047,"line_start":38,"line_end":38,"column_start":1,"column_end":37}},{"value":"/       DOI:[10.1145/358407.358414](https://doi.acm.org/10.1145/358407.358414)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":135048,"byte_end":135128,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":135129,"byte_end":135191,"line_start":40,"line_end":40,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":136523,"byte_end":136526,"line_start":90,"line_end":90,"column_start":12,"column_end":15},"name":"new","qualname":"<Gamma>::new","value":"fn (shape: f64, scale: f64) -> Gamma","parent":null,"children":[],"decl_id":null,"docs":" Construct an object representing the `Gamma(shape, scale)`\n distribution.","sig":null,"attributes":[{"value":"/ Construct an object representing the `Gamma(shape, scale)`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":136357,"byte_end":136419,"line_start":85,"line_end":85,"column_start":5,"column_end":67}},{"value":"/ distribution.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":136424,"byte_end":136441,"line_start":86,"line_end":86,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":136446,"byte_end":136449,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Panics if `shape <= 0` or `scale <= 0`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":136454,"byte_end":136497,"line_start":88,"line_end":88,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":136502,"byte_end":136511,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1391},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":138968,"byte_end":138978,"line_start":171,"line_end":171,"column_start":12,"column_end":22},"name":"ChiSquared","qualname":"::distributions::gamma::ChiSquared","value":"ChiSquared {  }","parent":null,"children":[{"krate":0,"index":1392}],"decl_id":null,"docs":" The chi-squared distribution `χ²(k)`, where `k` is the degrees of\n freedom.","sig":null,"attributes":[{"value":"/ The chi-squared distribution `χ²(k)`, where `k` is the degrees of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":138556,"byte_end":138627,"line_start":162,"line_end":162,"column_start":1,"column_end":70}},{"value":"/ freedom.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":138628,"byte_end":138640,"line_start":163,"line_end":163,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":138641,"byte_end":138644,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ For `k > 0` integral, this distribution is the sum of the squares","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":138645,"byte_end":138714,"line_start":165,"line_end":165,"column_start":1,"column_end":70}},{"value":"/ of `k` independent standard normal random variables. For other","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":138715,"byte_end":138781,"line_start":166,"line_end":166,"column_start":1,"column_end":67}},{"value":"/ `k`, this uses the equivalent characterisation","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":138782,"byte_end":138832,"line_start":167,"line_end":167,"column_start":1,"column_end":51}},{"value":"/ `χ²(k) = Gamma(k/2, 2)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":138833,"byte_end":138863,"line_start":168,"line_end":168,"column_start":1,"column_end":29}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":138864,"byte_end":138926,"line_start":169,"line_end":169,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":139444,"byte_end":139447,"line_start":187,"line_end":187,"column_start":12,"column_end":15},"name":"new","qualname":"<ChiSquared>::new","value":"fn (k: f64) -> ChiSquared","parent":null,"children":[],"decl_id":null,"docs":" Create a new chi-squared distribution with degrees-of-freedom\n `k`. Panics if `k < 0`.\n","sig":null,"attributes":[{"value":"/ Create a new chi-squared distribution with degrees-of-freedom","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":139335,"byte_end":139400,"line_start":185,"line_end":185,"column_start":5,"column_end":70}},{"value":"/ `k`. Panics if `k < 0`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":139405,"byte_end":139432,"line_start":186,"line_end":186,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1409},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":140379,"byte_end":140386,"line_start":217,"line_end":217,"column_start":12,"column_end":19},"name":"FisherF","qualname":"::distributions::gamma::FisherF","value":"FisherF {  }","parent":null,"children":[{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412}],"decl_id":null,"docs":" The Fisher F distribution `F(m, n)`.","sig":null,"attributes":[{"value":"/ The Fisher F distribution `F(m, n)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":140081,"byte_end":140121,"line_start":210,"line_end":210,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":140122,"byte_end":140125,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ This distribution is equivalent to the ratio of two normalised","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":140126,"byte_end":140192,"line_start":212,"line_end":212,"column_start":1,"column_end":67}},{"value":"/ chi-squared distributions, that is, `F(m,n) = (χ²(m)/m) /","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":140193,"byte_end":140256,"line_start":213,"line_end":213,"column_start":1,"column_end":62}},{"value":"/ (χ²(n)/n)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":140257,"byte_end":140274,"line_start":214,"line_end":214,"column_start":1,"column_end":16}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":140275,"byte_end":140337,"line_start":215,"line_end":215,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":140721,"byte_end":140724,"line_start":228,"line_end":228,"column_start":12,"column_end":15},"name":"new","qualname":"<FisherF>::new","value":"fn (m: f64, n: f64) -> FisherF","parent":null,"children":[],"decl_id":null,"docs":" Create a new `FisherF` distribution, with the given\n parameter. Panics if either `m` or `n` are not positive.\n","sig":null,"attributes":[{"value":"/ Create a new `FisherF` distribution, with the given","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":140589,"byte_end":140644,"line_start":226,"line_end":226,"column_start":5,"column_end":60}},{"value":"/ parameter. Panics if either `m` or `n` are not positive.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":140649,"byte_end":140709,"line_start":227,"line_end":227,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1418},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":141388,"byte_end":141396,"line_start":249,"line_end":249,"column_start":12,"column_end":20},"name":"StudentT","qualname":"::distributions::gamma::StudentT","value":"StudentT {  }","parent":null,"children":[{"krate":0,"index":1419},{"krate":0,"index":1420}],"decl_id":null,"docs":" The Student t distribution, `t(nu)`, where `nu` is the degrees of\n freedom.\n","sig":null,"attributes":[{"value":"/ The Student t distribution, `t(nu)`, where `nu` is the degrees of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":141201,"byte_end":141270,"line_start":245,"line_end":245,"column_start":1,"column_end":70}},{"value":"/ freedom.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":141271,"byte_end":141283,"line_start":246,"line_end":246,"column_start":1,"column_end":13}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":141284,"byte_end":141346,"line_start":247,"line_end":247,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":141564,"byte_end":141567,"line_start":257,"line_end":257,"column_start":12,"column_end":15},"name":"new","qualname":"<StudentT>::new","value":"fn (n: f64) -> StudentT","parent":null,"children":[],"decl_id":null,"docs":" Create a new Student t distribution with `n` degrees of\n freedom. Panics if `n <= 0`.\n","sig":null,"attributes":[{"value":"/ Create a new Student t distribution with `n` degrees of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":141456,"byte_end":141515,"line_start":255,"line_end":255,"column_start":5,"column_end":64}},{"value":"/ freedom. Panics if `n <= 0`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":141520,"byte_end":141552,"line_start":256,"line_end":256,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1426},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":142129,"byte_end":142133,"line_start":275,"line_end":275,"column_start":12,"column_end":16},"name":"Beta","qualname":"::distributions::gamma::Beta","value":"Beta {  }","parent":null,"children":[{"krate":0,"index":1427},{"krate":0,"index":1428}],"decl_id":null,"docs":" The Beta distribution with shape parameters `alpha` and `beta`.\n","sig":null,"attributes":[{"value":"/ The Beta distribution with shape parameters `alpha` and `beta`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":141957,"byte_end":142024,"line_start":272,"line_end":272,"column_start":1,"column_end":68}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":142025,"byte_end":142087,"line_start":273,"line_end":273,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":142345,"byte_end":142348,"line_start":285,"line_end":285,"column_start":12,"column_end":15},"name":"new","qualname":"<Beta>::new","value":"fn (alpha: f64, beta: f64) -> Beta","parent":null,"children":[],"decl_id":null,"docs":" Construct an object representing the `Beta(alpha, beta)`\n distribution.","sig":null,"attributes":[{"value":"/ Construct an object representing the `Beta(alpha, beta)`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":142195,"byte_end":142255,"line_start":281,"line_end":281,"column_start":5,"column_end":65}},{"value":"/ distribution.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":142260,"byte_end":142277,"line_start":282,"line_end":282,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":142282,"byte_end":142285,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ Panics if `shape <= 0` or `scale <= 0`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":142290,"byte_end":142333,"line_start":284,"line_end":284,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1434},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":145523,"byte_end":145537,"line_start":31,"line_end":31,"column_start":12,"column_end":26},"name":"StandardNormal","qualname":"::distributions::normal::StandardNormal","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples floating-point numbers according to the normal distribution\n `N(0, 1)` (a.k.a. a standard normal, or Gaussian). This is equivalent to\n `Normal::new(0.0, 1.0)` but faster.","sig":null,"attributes":[{"value":"/ Samples floating-point numbers according to the normal distribution","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":144891,"byte_end":144962,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/ `N(0, 1)` (a.k.a. a standard normal, or Gaussian). This is equivalent to","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":144963,"byte_end":145039,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ `Normal::new(0.0, 1.0)` but faster.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":145040,"byte_end":145079,"line_start":19,"line_end":19,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":145080,"byte_end":145083,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ See `Normal` for the general normal distribution.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":145084,"byte_end":145137,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":145138,"byte_end":145141,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Implemented via the ZIGNOR variant[^1] of the Ziggurat method.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":145142,"byte_end":145208,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":145209,"byte_end":145212,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [^1]: Jurgen A. Doornik (2005). [*An Improved Ziggurat Method to","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":145213,"byte_end":145281,"line_start":25,"line_end":25,"column_start":1,"column_end":69}},{"value":"/       Generate Normal Random Samples*](","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":145282,"byte_end":145325,"line_start":26,"line_end":26,"column_start":1,"column_end":44}},{"value":"/       https://www.doornik.com/research/ziggurat.pdf).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":145326,"byte_end":145383,"line_start":27,"line_end":27,"column_start":1,"column_end":58}},{"value":"/       Nuffield College, Oxford","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":145384,"byte_end":145418,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":145419,"byte_end":145481,"line_start":29,"line_end":29,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1441},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147146,"byte_end":147152,"line_start":79,"line_end":79,"column_start":12,"column_end":18},"name":"Normal","qualname":"::distributions::normal::Normal","value":"Normal {  }","parent":null,"children":[{"krate":0,"index":1442},{"krate":0,"index":1443}],"decl_id":null,"docs":" The normal distribution `N(mean, std_dev**2)`.","sig":null,"attributes":[{"value":"/ The normal distribution `N(mean, std_dev**2)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":146709,"byte_end":146759,"line_start":68,"line_end":68,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":146760,"byte_end":146763,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ This uses the ZIGNOR variant of the Ziggurat method, see [`StandardNormal`]","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":146764,"byte_end":146843,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/ for more details.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":146844,"byte_end":146865,"line_start":71,"line_end":71,"column_start":1,"column_end":22}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":146866,"byte_end":146870,"line_start":72,"line_end":72,"column_start":1,"column_end":5}},{"value":"/ Note that [`StandardNormal`] is an optimised implementation for mean 0, and","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":146871,"byte_end":146950,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/ standard deviation 1.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":146951,"byte_end":146976,"line_start":74,"line_end":74,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":146977,"byte_end":146980,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ [`StandardNormal`]: crate::distributions::StandardNormal","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":146981,"byte_end":147041,"line_start":76,"line_end":76,"column_start":1,"column_end":61}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147042,"byte_end":147104,"line_start":77,"line_end":77,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147394,"byte_end":147397,"line_start":92,"line_end":92,"column_start":12,"column_end":15},"name":"new","qualname":"<Normal>::new","value":"fn (mean: f64, std_dev: f64) -> Normal","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Normal` distribution with the given mean and\n standard deviation.","sig":null,"attributes":[{"value":"/ Construct a new `Normal` distribution with the given mean and","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147209,"byte_end":147274,"line_start":85,"line_end":85,"column_start":5,"column_end":70}},{"value":"/ standard deviation.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147279,"byte_end":147302,"line_start":86,"line_end":86,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147307,"byte_end":147310,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147315,"byte_end":147327,"line_start":88,"line_end":88,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147332,"byte_end":147335,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Panics if `std_dev < 0`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147340,"byte_end":147368,"line_start":90,"line_end":90,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147373,"byte_end":147382,"line_start":91,"line_end":91,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1449},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":148028,"byte_end":148037,"line_start":114,"line_end":114,"column_start":12,"column_end":21},"name":"LogNormal","qualname":"::distributions::normal::LogNormal","value":"LogNormal {  }","parent":null,"children":[{"krate":0,"index":1450}],"decl_id":null,"docs":" The log-normal distribution `ln N(mean, std_dev**2)`.","sig":null,"attributes":[{"value":"/ The log-normal distribution `ln N(mean, std_dev**2)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147769,"byte_end":147826,"line_start":108,"line_end":108,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147827,"byte_end":147830,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ If `X` is log-normal distributed, then `ln(X)` is `N(mean, std_dev**2)`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147831,"byte_end":147906,"line_start":110,"line_end":110,"column_start":1,"column_end":76}},{"value":"/ distributed.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147907,"byte_end":147923,"line_start":111,"line_end":111,"column_start":1,"column_end":17}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147924,"byte_end":147986,"line_start":112,"line_end":112,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":148269,"byte_end":148272,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"new","qualname":"<LogNormal>::new","value":"fn (mean: f64, std_dev: f64) -> LogNormal","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `LogNormal` distribution with the given mean\n and standard deviation.","sig":null,"attributes":[{"value":"/ Construct a new `LogNormal` distribution with the given mean","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":148081,"byte_end":148145,"line_start":119,"line_end":119,"column_start":5,"column_end":69}},{"value":"/ and standard deviation.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":148150,"byte_end":148177,"line_start":120,"line_end":120,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":148182,"byte_end":148185,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":148190,"byte_end":148202,"line_start":122,"line_end":122,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":148207,"byte_end":148210,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Panics if `std_dev < 0`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":148215,"byte_end":148243,"line_start":124,"line_end":124,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":148248,"byte_end":148257,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1456},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":150696,"byte_end":150700,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"Exp1","qualname":"::distributions::exponential::Exp1","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples floating-point numbers according to the exponential distribution,\n with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or\n sampling with `-rng.gen::<f64>().ln()`, but faster.","sig":null,"attributes":[{"value":"/ Samples floating-point numbers according to the exponential distribution,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":149919,"byte_end":149996,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":149997,"byte_end":150071,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/ sampling with `-rng.gen::<f64>().ln()`, but faster.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":150072,"byte_end":150127,"line_start":19,"line_end":19,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":150128,"byte_end":150131,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ See `Exp` for the general exponential distribution.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":150132,"byte_end":150187,"line_start":21,"line_end":21,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":150188,"byte_end":150191,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Implemented via the ZIGNOR variant[^1] of the Ziggurat method. The exact","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":150192,"byte_end":150268,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ description in the paper was adjusted to use tables for the exponential","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":150269,"byte_end":150344,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ distribution rather than normal.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":150345,"byte_end":150381,"line_start":25,"line_end":25,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":150382,"byte_end":150385,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ [^1]: Jurgen A. Doornik (2005). [*An Improved Ziggurat Method to","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":150386,"byte_end":150454,"line_start":27,"line_end":27,"column_start":1,"column_end":69}},{"value":"/       Generate Normal Random Samples*](","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":150455,"byte_end":150498,"line_start":28,"line_end":28,"column_start":1,"column_end":44}},{"value":"/       https://www.doornik.com/research/ziggurat.pdf).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":150499,"byte_end":150556,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/       Nuffield College, Oxford","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":150557,"byte_end":150591,"line_start":30,"line_end":30,"column_start":1,"column_end":35}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":150592,"byte_end":150654,"line_start":31,"line_end":31,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1463},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":151646,"byte_end":151649,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"Exp","qualname":"::distributions::exponential::Exp","value":"Exp {  }","parent":null,"children":[{"krate":0,"index":1464}],"decl_id":null,"docs":" The exponential distribution `Exp(lambda)`.","sig":null,"attributes":[{"value":"/ The exponential distribution `Exp(lambda)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":151289,"byte_end":151336,"line_start":55,"line_end":55,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":151337,"byte_end":151340,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ This distribution has density function: `f(x) = lambda * exp(-lambda * x)`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":151341,"byte_end":151419,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"/ for `x > 0`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":151420,"byte_end":151436,"line_start":58,"line_end":58,"column_start":1,"column_end":17}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":151437,"byte_end":151441,"line_start":59,"line_end":59,"column_start":1,"column_end":5}},{"value":"/ Note that [`Exp1`](crate::distributions::Exp1) is an optimised implementation for `lambda = 1`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":151442,"byte_end":151541,"line_start":60,"line_end":60,"column_start":1,"column_end":100}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":151542,"byte_end":151604,"line_start":61,"line_end":61,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":151890,"byte_end":151893,"line_start":72,"line_end":72,"column_start":12,"column_end":15},"name":"new","qualname":"<Exp>::new","value":"fn (lambda: f64) -> Exp","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Exp` with the given shape parameter\n `lambda`. Panics if `lambda <= 0`.\n","sig":null,"attributes":[{"value":"/ Construct a new `Exp` with the given shape parameter","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":151765,"byte_end":151821,"line_start":69,"line_end":69,"column_start":5,"column_end":61}},{"value":"/ `lambda`. Panics if `lambda <= 0`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":151826,"byte_end":151864,"line_start":70,"line_end":70,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":151869,"byte_end":151878,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1470},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/pareto.rs","byte_start":153368,"byte_end":153374,"line_start":18,"line_end":18,"column_start":12,"column_end":18},"name":"Pareto","qualname":"::distributions::pareto::Pareto","value":"Pareto {  }","parent":null,"children":[{"krate":0,"index":1471},{"krate":0,"index":1472}],"decl_id":null,"docs":" Samples floating-point numbers according to the Pareto distribution\n","sig":null,"attributes":[{"value":"/ Samples floating-point numbers according to the Pareto distribution","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/pareto.rs","byte_start":153192,"byte_end":153263,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/pareto.rs","byte_start":153264,"byte_end":153326,"line_start":16,"line_end":16,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/pareto.rs","byte_start":153745,"byte_end":153748,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<Pareto>::new","value":"fn (scale: f64, shape: f64) -> Pareto","parent":null,"children":[],"decl_id":null,"docs":" Construct a new Pareto distribution with given `scale` and `shape`.","sig":null,"attributes":[{"value":"/ Construct a new Pareto distribution with given `scale` and `shape`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/pareto.rs","byte_start":153438,"byte_end":153509,"line_start":24,"line_end":24,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/pareto.rs","byte_start":153514,"byte_end":153517,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ In the literature, `scale` is commonly written as x<sub>m</sub> or k and","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/pareto.rs","byte_start":153522,"byte_end":153598,"line_start":26,"line_end":26,"column_start":5,"column_end":81}},{"value":"/ `shape` is often written as α.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/pareto.rs","byte_start":153603,"byte_end":153638,"line_start":27,"line_end":27,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/pareto.rs","byte_start":153643,"byte_end":153646,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/pareto.rs","byte_start":153651,"byte_end":153663,"line_start":29,"line_end":29,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/pareto.rs","byte_start":153668,"byte_end":153671,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ `scale` and `shape` have to be non-zero and positive.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/pareto.rs","byte_start":153676,"byte_end":153733,"line_start":31,"line_end":31,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1478},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/poisson.rs","byte_start":155389,"byte_end":155396,"line_start":23,"line_end":23,"column_start":12,"column_end":19},"name":"Poisson","qualname":"::distributions::poisson::Poisson","value":"Poisson {  }","parent":null,"children":[{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1482},{"krate":0,"index":1483}],"decl_id":null,"docs":" The Poisson distribution `Poisson(lambda)`.","sig":null,"attributes":[{"value":"/ The Poisson distribution `Poisson(lambda)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/poisson.rs","byte_start":155131,"byte_end":155178,"line_start":17,"line_end":17,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/poisson.rs","byte_start":155179,"byte_end":155182,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This distribution has a density function:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/poisson.rs","byte_start":155183,"byte_end":155228,"line_start":19,"line_end":19,"column_start":1,"column_end":46}},{"value":"/ `f(k) = lambda^k * exp(-lambda) / k!` for `k >= 0`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/poisson.rs","byte_start":155229,"byte_end":155284,"line_start":20,"line_end":20,"column_start":1,"column_end":56}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/poisson.rs","byte_start":155285,"byte_end":155347,"line_start":21,"line_end":21,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/poisson.rs","byte_start":155666,"byte_end":155669,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Poisson>::new","value":"fn (lambda: f64) -> Poisson","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Poisson` with the given shape parameter\n `lambda`. Panics if `lambda <= 0`.\n","sig":null,"attributes":[{"value":"/ Construct a new `Poisson` with the given shape parameter","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/poisson.rs","byte_start":155551,"byte_end":155611,"line_start":33,"line_end":33,"column_start":5,"column_end":65}},{"value":"/ `lambda`. Panics if `lambda <= 0`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/poisson.rs","byte_start":155616,"byte_end":155654,"line_start":34,"line_end":34,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1489},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/binomial.rs","byte_start":160505,"byte_end":160513,"line_start":23,"line_end":23,"column_start":12,"column_end":20},"name":"Binomial","qualname":"::distributions::binomial::Binomial","value":"Binomial {  }","parent":null,"children":[{"krate":0,"index":1490},{"krate":0,"index":1491}],"decl_id":null,"docs":" The binomial distribution `Binomial(n, p)`.","sig":null,"attributes":[{"value":"/ The binomial distribution `Binomial(n, p)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/binomial.rs","byte_start":160247,"byte_end":160294,"line_start":17,"line_end":17,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/binomial.rs","byte_start":160295,"byte_end":160298,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This distribution has density function:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/binomial.rs","byte_start":160299,"byte_end":160342,"line_start":19,"line_end":19,"column_start":1,"column_end":44}},{"value":"/ `f(k) = n!/(k! (n-k)!) p^k (1-p)^(n-k)` for `k >= 0`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/binomial.rs","byte_start":160343,"byte_end":160400,"line_start":20,"line_end":20,"column_start":1,"column_end":58}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/binomial.rs","byte_start":160401,"byte_end":160463,"line_start":21,"line_end":21,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/binomial.rs","byte_start":160806,"byte_end":160809,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Binomial>::new","value":"fn (n: u64, p: f64) -> Binomial","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Binomial` with the given shape parameters `n` (number\n of trials) and `p` (probability of success).","sig":null,"attributes":[{"value":"/ Construct a new `Binomial` with the given shape parameters `n` (number","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/binomial.rs","byte_start":160621,"byte_end":160695,"line_start":31,"line_end":31,"column_start":5,"column_end":79}},{"value":"/ of trials) and `p` (probability of success).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/binomial.rs","byte_start":160700,"byte_end":160748,"line_start":32,"line_end":32,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/binomial.rs","byte_start":160753,"byte_end":160756,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ Panics if `p < 0` or `p > 1`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/binomial.rs","byte_start":160761,"byte_end":160794,"line_start":34,"line_end":34,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1497},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/cauchy.rs","byte_start":171720,"byte_end":171726,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Cauchy","qualname":"::distributions::cauchy::Cauchy","value":"Cauchy {  }","parent":null,"children":[{"krate":0,"index":1498},{"krate":0,"index":1499}],"decl_id":null,"docs":" The Cauchy distribution `Cauchy(median, scale)`.","sig":null,"attributes":[{"value":"/ The Cauchy distribution `Cauchy(median, scale)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/cauchy.rs","byte_start":171450,"byte_end":171502,"line_start":18,"line_end":18,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/cauchy.rs","byte_start":171503,"byte_end":171506,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This distribution has a density function:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/cauchy.rs","byte_start":171507,"byte_end":171552,"line_start":20,"line_end":20,"column_start":1,"column_end":46}},{"value":"/ `f(x) = 1 / (pi * scale * (1 + ((x - median) / scale)^2))`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/cauchy.rs","byte_start":171553,"byte_end":171615,"line_start":21,"line_end":21,"column_start":1,"column_end":63}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/cauchy.rs","byte_start":171616,"byte_end":171678,"line_start":22,"line_end":22,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/cauchy.rs","byte_start":171951,"byte_end":171954,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<Cauchy>::new","value":"fn (median: f64, scale: f64) -> Cauchy","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Cauchy` with the given shape parameters\n `median` the peak location and `scale` the scale factor.\n Panics if `scale <= 0`.\n","sig":null,"attributes":[{"value":"/ Construct a new `Cauchy` with the given shape parameters","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/cauchy.rs","byte_start":171782,"byte_end":171842,"line_start":30,"line_end":30,"column_start":5,"column_end":65}},{"value":"/ `median` the peak location and `scale` the scale factor.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/cauchy.rs","byte_start":171847,"byte_end":171907,"line_start":31,"line_end":31,"column_start":5,"column_end":65}},{"value":"/ Panics if `scale <= 0`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/cauchy.rs","byte_start":171912,"byte_end":171939,"line_start":32,"line_end":32,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1505},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175066,"byte_end":175075,"line_start":25,"line_end":25,"column_start":12,"column_end":21},"name":"Dirichlet","qualname":"::distributions::dirichlet::Dirichlet","value":"Dirichlet {  }","parent":null,"children":[{"krate":0,"index":1506}],"decl_id":null,"docs":" The dirichelet distribution `Dirichlet(alpha)`.","sig":null,"attributes":[{"value":"/ The dirichelet distribution `Dirichlet(alpha)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":174695,"byte_end":174746,"line_start":18,"line_end":18,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":174747,"byte_end":174750,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The Dirichlet distribution is a family of continuous multivariate","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":174751,"byte_end":174820,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/ probability distributions parameterized by a vector alpha of positive reals.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":174821,"byte_end":174901,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/ It is a multivariate generalization of the beta distribution.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":174902,"byte_end":174967,"line_start":22,"line_end":22,"column_start":1,"column_end":66}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":174968,"byte_end":175030,"line_start":23,"line_end":23,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175325,"byte_end":175328,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"new","qualname":"<Dirichlet>::new","value":"fn <V> (alpha: V) -> Dirichlet","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Dirichlet` with the given alpha parameter `alpha`.","sig":null,"attributes":[{"value":"/ Construct a new `Dirichlet` with the given alpha parameter `alpha`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175164,"byte_end":175235,"line_start":31,"line_end":31,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175240,"byte_end":175243,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175248,"byte_end":175260,"line_start":33,"line_end":33,"column_start":5,"column_end":17}},{"value":"/ - if `alpha.len() < 2`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175265,"byte_end":175291,"line_start":34,"line_end":34,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175296,"byte_end":175299,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175304,"byte_end":175313,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175742,"byte_end":175756,"line_start":54,"line_end":54,"column_start":12,"column_end":26},"name":"new_with_param","qualname":"<Dirichlet>::new_with_param","value":"fn (alpha: f64, size: usize) -> Dirichlet","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Dirichlet` with the given shape parameter `alpha` and `size`.","sig":null,"attributes":[{"value":"/ Construct a new `Dirichlet` with the given shape parameter `alpha` and `size`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175549,"byte_end":175631,"line_start":47,"line_end":47,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175636,"byte_end":175639,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175644,"byte_end":175656,"line_start":49,"line_end":49,"column_start":5,"column_end":17}},{"value":"/ - if `alpha <= 0.0`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175661,"byte_end":175684,"line_start":50,"line_end":50,"column_start":5,"column_end":28}},{"value":"/ - if `size < 2`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175689,"byte_end":175708,"line_start":51,"line_end":51,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175713,"byte_end":175716,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175721,"byte_end":175730,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1511},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/triangular.rs","byte_start":178176,"byte_end":178186,"line_start":18,"line_end":18,"column_start":12,"column_end":22},"name":"Triangular","qualname":"::distributions::triangular::Triangular","value":"Triangular {  }","parent":null,"children":[{"krate":0,"index":1512},{"krate":0,"index":1513},{"krate":0,"index":1514}],"decl_id":null,"docs":" The triangular distribution.\n","sig":null,"attributes":[{"value":"/ The triangular distribution.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/triangular.rs","byte_start":178039,"byte_end":178071,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/triangular.rs","byte_start":178072,"byte_end":178134,"line_start":16,"line_end":16,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/triangular.rs","byte_start":178470,"byte_end":178473,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<Triangular>::new","value":"fn (min: f64, max: f64, mode: f64) -> Triangular","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Triangular` with minimum `min`, maximum `max` and mode\n `mode`.","sig":null,"attributes":[{"value":"/ Construct a new `Triangular` with minimum `min`, maximum `max` and mode","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/triangular.rs","byte_start":178257,"byte_end":178332,"line_start":25,"line_end":25,"column_start":5,"column_end":80}},{"value":"/ `mode`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/triangular.rs","byte_start":178337,"byte_end":178348,"line_start":26,"line_end":26,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/triangular.rs","byte_start":178353,"byte_end":178356,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/triangular.rs","byte_start":178361,"byte_end":178373,"line_start":28,"line_end":28,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/triangular.rs","byte_start":178378,"byte_end":178381,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ If `max < mode`, `mode < max` or `max == min`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/triangular.rs","byte_start":178386,"byte_end":178436,"line_start":30,"line_end":30,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/triangular.rs","byte_start":178441,"byte_end":178444,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/triangular.rs","byte_start":178449,"byte_end":178458,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1520},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weibull.rs","byte_start":180447,"byte_end":180454,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Weibull","qualname":"::distributions::weibull::Weibull","value":"Weibull {  }","parent":null,"children":[{"krate":0,"index":1521},{"krate":0,"index":1522}],"decl_id":null,"docs":" Samples floating-point numbers according to the Weibull distribution\n","sig":null,"attributes":[{"value":"/ Samples floating-point numbers according to the Weibull distribution","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weibull.rs","byte_start":180270,"byte_end":180342,"line_start":15,"line_end":15,"column_start":1,"column_end":73}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weibull.rs","byte_start":180343,"byte_end":180405,"line_start":16,"line_end":16,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weibull.rs","byte_start":180696,"byte_end":180699,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<Weibull>::new","value":"fn (scale: f64, shape: f64) -> Weibull","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Weibull` distribution with given `scale` and `shape`.","sig":null,"attributes":[{"value":"/ Construct a new `Weibull` distribution with given `scale` and `shape`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weibull.rs","byte_start":180515,"byte_end":180589,"line_start":24,"line_end":24,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weibull.rs","byte_start":180594,"byte_end":180597,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weibull.rs","byte_start":180602,"byte_end":180614,"line_start":26,"line_end":26,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weibull.rs","byte_start":180619,"byte_end":180622,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ `scale` and `shape` have to be non-zero and positive.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weibull.rs","byte_start":180627,"byte_end":180684,"line_start":28,"line_end":28,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1528},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183049,"byte_end":183061,"line_start":43,"line_end":43,"column_start":12,"column_end":24},"name":"OpenClosed01","qualname":"::distributions::float::OpenClosed01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the half-open\n interval `(0, 1]`, i.e. including 1 but not 0.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the half-open","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182096,"byte_end":182174,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ interval `(0, 1]`, i.e. including 1 but not 0.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182175,"byte_end":182225,"line_start":19,"line_end":19,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182226,"byte_end":182229,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182230,"byte_end":182304,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ the 23 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182305,"byte_end":182382,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182383,"byte_end":182456,"line_start":23,"line_end":23,"column_start":1,"column_end":74}},{"value":"/ multiplicative method.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182457,"byte_end":182483,"line_start":24,"line_end":24,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182484,"byte_end":182487,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`Open01`]","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182488,"byte_end":182554,"line_start":26,"line_end":26,"column_start":1,"column_end":67}},{"value":"/ which samples from `(0, 1)` and [`Uniform`] which samples from arbitrary","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182555,"byte_end":182631,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182632,"byte_end":182643,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182644,"byte_end":182647,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182648,"byte_end":182661,"line_start":30,"line_end":30,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182662,"byte_end":182669,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182670,"byte_end":182702,"line_start":32,"line_end":32,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::OpenClosed01;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182703,"byte_end":182745,"line_start":33,"line_end":33,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182746,"byte_end":182749,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(OpenClosed01);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182750,"byte_end":182803,"line_start":35,"line_end":35,"column_start":1,"column_end":54}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182804,"byte_end":182845,"line_start":36,"line_end":36,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182846,"byte_end":182853,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182854,"byte_end":182857,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182858,"byte_end":182906,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/ [`Open01`]: crate::distributions::Open01","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182907,"byte_end":182951,"line_start":40,"line_end":40,"column_start":1,"column_end":45}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":182952,"byte_end":183007,"line_start":41,"line_end":41,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1535},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183992,"byte_end":183998,"line_start":69,"line_end":69,"column_start":12,"column_end":18},"name":"Open01","qualname":"::distributions::float::Open01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the open\n interval `(0, 1)`, i.e. not including either endpoint.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the open","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183064,"byte_end":183137,"line_start":45,"line_end":45,"column_start":1,"column_end":74}},{"value":"/ interval `(0, 1)`, i.e. not including either endpoint.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183138,"byte_end":183196,"line_start":46,"line_end":46,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183197,"byte_end":183200,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε + ε/2`. For `f32`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183201,"byte_end":183280,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/ the 22 most significant random bits of an `u32` are used, for `f64` 52 from","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183281,"byte_end":183360,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/ an `u64`. The conversion uses a transmute-based method.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183361,"byte_end":183420,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183421,"byte_end":183424,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`OpenClosed01`]","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183425,"byte_end":183497,"line_start":52,"line_end":52,"column_start":1,"column_end":73}},{"value":"/ which samples from `(0, 1]` and [`Uniform`] which samples from arbitrary","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183498,"byte_end":183574,"line_start":53,"line_end":53,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183575,"byte_end":183586,"line_start":54,"line_end":54,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183587,"byte_end":183590,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183591,"byte_end":183604,"line_start":56,"line_end":56,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183605,"byte_end":183612,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183613,"byte_end":183645,"line_start":58,"line_end":58,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Open01;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183646,"byte_end":183682,"line_start":59,"line_end":59,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183683,"byte_end":183686,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(Open01);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183687,"byte_end":183734,"line_start":61,"line_end":61,"column_start":1,"column_end":48}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183735,"byte_end":183776,"line_start":62,"line_end":62,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183777,"byte_end":183784,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183785,"byte_end":183788,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183789,"byte_end":183837,"line_start":65,"line_end":65,"column_start":1,"column_end":49}},{"value":"/ [`OpenClosed01`]: crate::distributions::OpenClosed01","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183838,"byte_end":183894,"line_start":66,"line_end":66,"column_start":1,"column_end":57}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":183895,"byte_end":183950,"line_start":67,"line_end":67,"column_start":1,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":414},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":184108,"byte_end":184117,"line_start":74,"line_end":74,"column_start":11,"column_end":20},"name":"IntoFloat","qualname":"::distributions::float::IntoFloat","value":"IntoFloat","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":415},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":184129,"byte_end":184130,"line_start":75,"line_end":75,"column_start":10,"column_end":11},"name":"F","qualname":"::distributions::float::IntoFloat::F","value":"type F;","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":184532,"byte_end":184556,"line_start":85,"line_end":85,"column_start":8,"column_end":32},"name":"into_float_with_exponent","qualname":"::distributions::float::IntoFloat::into_float_with_exponent","value":"fn (self, exponent: i32) -> Self::F","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" Helper method to combine the fraction and a contant exponent into a\n float.","sig":null,"attributes":[{"value":"/ Helper method to combine the fraction and a contant exponent into a","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":184137,"byte_end":184208,"line_start":77,"line_end":77,"column_start":5,"column_end":76}},{"value":"/ float.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":184213,"byte_end":184223,"line_start":78,"line_end":78,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":184228,"byte_end":184231,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Only the least significant bits of `self` may be set, 23 for `f32` and","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":184236,"byte_end":184310,"line_start":80,"line_end":80,"column_start":5,"column_end":79}},{"value":"/ 52 for `f64`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":184315,"byte_end":184332,"line_start":81,"line_end":81,"column_start":5,"column_end":22}},{"value":"/ The resulting value will fall in a range that depends on the exponent.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":184337,"byte_end":184411,"line_start":82,"line_end":82,"column_start":5,"column_end":79}},{"value":"/ As an example the range with exponent 0 will be","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":184416,"byte_end":184467,"line_start":83,"line_end":83,"column_start":5,"column_end":56}},{"value":"/ [2<sup>0</sup>..2<sup>1</sup>), which is [1..2).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/float.rs","byte_start":184472,"byte_end":184524,"line_start":84,"line_end":84,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":418},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":29170,"byte_end":29183,"line_start":157,"line_end":157,"column_start":24,"column_end":37},"name":"hidden_export","qualname":"::distributions::hidden_export","value":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","parent":null,"children":[{"krate":0,"index":419}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1604},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203548,"byte_end":203560,"line_start":37,"line_end":37,"column_start":12,"column_end":24},"name":"Alphanumeric","qualname":"::distributions::other::Alphanumeric","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample a `char`, uniformly distributed over ASCII letters and numbers:\n a-z, A-Z and 0-9.\n \n # Example","sig":null,"attributes":[{"value":"/ Sample a `char`, uniformly distributed over ASCII letters and numbers:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203077,"byte_end":203151,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/ a-z, A-Z and 0-9.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203152,"byte_end":203173,"line_start":20,"line_end":20,"column_start":1,"column_end":22}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203174,"byte_end":203178,"line_start":21,"line_end":21,"column_start":1,"column_end":5}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203179,"byte_end":203192,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203193,"byte_end":203196,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203197,"byte_end":203204,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use std::iter;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203205,"byte_end":203223,"line_start":25,"line_end":25,"column_start":1,"column_end":19}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203224,"byte_end":203256,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Alphanumeric;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203257,"byte_end":203299,"line_start":27,"line_end":27,"column_start":1,"column_end":43}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203300,"byte_end":203304,"line_start":28,"line_end":28,"column_start":1,"column_end":5}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203305,"byte_end":203336,"line_start":29,"line_end":29,"column_start":1,"column_end":32}},{"value":"/ let chars: String = iter::repeat(())","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203337,"byte_end":203377,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/         .map(|()| rng.sample(Alphanumeric))","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203378,"byte_end":203425,"line_start":31,"line_end":31,"column_start":1,"column_end":48}},{"value":"/         .take(7)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203426,"byte_end":203446,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/         .collect();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203447,"byte_end":203470,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/ println!(\"Random chars: {}\", chars);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203471,"byte_end":203511,"line_start":34,"line_end":34,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203512,"byte_end":203519,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":491},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/utils.rs","byte_start":211629,"byte_end":211635,"line_start":20,"line_end":20,"column_start":10,"column_end":16},"name":"Output","qualname":"::distributions::utils::WideningMultiply::Output","value":"type Output;","parent":{"krate":0,"index":489},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":500},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/utils.rs","byte_start":218898,"byte_end":218902,"line_start":233,"line_end":233,"column_start":10,"column_end":14},"name":"Mask","qualname":"::distributions::utils::FloatSIMDUtils::Mask","value":"type Mask;","parent":{"krate":0,"index":496},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":505},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/utils.rs","byte_start":219417,"byte_end":219421,"line_start":245,"line_end":245,"column_start":10,"column_end":14},"name":"UInt","qualname":"::distributions::utils::FloatSIMDUtils::UInt","value":"type UInt;","parent":{"krate":0,"index":496},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":545},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":30349,"byte_end":30361,"line_start":183,"line_end":183,"column_start":11,"column_end":23},"name":"Distribution","qualname":"::distributions::Distribution","value":"Distribution<T>","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":549}],"decl_id":null,"docs":" Types (distributions) that can be used to create a random instance of `T`.","sig":null,"attributes":[{"value":"/ Types (distributions) that can be used to create a random instance of `T`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":29328,"byte_end":29406,"line_start":165,"line_end":165,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":29407,"byte_end":29410,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ It is possible to sample from a distribution through both the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":29411,"byte_end":29476,"line_start":167,"line_end":167,"column_start":1,"column_end":66}},{"value":"/ `Distribution` and [`Rng`] traits, via `distr.sample(&mut rng)` and","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":29477,"byte_end":29548,"line_start":168,"line_end":168,"column_start":1,"column_end":72}},{"value":"/ `rng.sample(distr)`. They also both offer the [`sample_iter`] method, which","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":29549,"byte_end":29628,"line_start":169,"line_end":169,"column_start":1,"column_end":80}},{"value":"/ produces an iterator that samples from the distribution.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":29629,"byte_end":29689,"line_start":170,"line_end":170,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":29690,"byte_end":29693,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ All implementations are expected to be immutable; this has the significant","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":29694,"byte_end":29772,"line_start":172,"line_end":172,"column_start":1,"column_end":79}},{"value":"/ advantage of not needing to consider thread safety, and for most","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":29773,"byte_end":29841,"line_start":173,"line_end":173,"column_start":1,"column_end":69}},{"value":"/ distributions efficient state-less sampling algorithms are available.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":29842,"byte_end":29915,"line_start":174,"line_end":174,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":29916,"byte_end":29919,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ Implementations are typically expected to be portable with reproducible","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":29920,"byte_end":29995,"line_start":176,"line_end":176,"column_start":1,"column_end":76}},{"value":"/ results when used with a PRNG with fixed seed; see the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":29996,"byte_end":30054,"line_start":177,"line_end":177,"column_start":1,"column_end":59}},{"value":"/ [portability chapter](https://rust-random.github.io/book/portability.html)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":30055,"byte_end":30133,"line_start":178,"line_end":178,"column_start":1,"column_end":79}},{"value":"/ of The Rust Rand Book. In some cases this does not apply, e.g. the `usize`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":30134,"byte_end":30212,"line_start":179,"line_end":179,"column_start":1,"column_end":79}},{"value":"/ type requires different sampling on 32-bit and 64-bit machines.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":30213,"byte_end":30280,"line_start":180,"line_end":180,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":30281,"byte_end":30284,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::method.sample_iter","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":30285,"byte_end":30338,"line_start":182,"line_end":182,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":30455,"byte_end":30461,"line_start":185,"line_end":185,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::Distribution::sample","value":"fn <R> (&self, rng: &mut R) -> T","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" Generate a random value of `T`, using `rng` as the source of randomness.\n","sig":null,"attributes":[{"value":"/ Generate a random value of `T`, using `rng` as the source of randomness.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":30371,"byte_end":30447,"line_start":184,"line_end":184,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31668,"byte_end":31679,"line_start":217,"line_end":217,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::distributions::Distribution::sample_iter","value":"fn <R> (self, rng: R) -> DistIter<Self, R, T>","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" Create an iterator that generates random values of `T`, using `rng` as\n the source of randomness.","sig":null,"attributes":[{"value":"/ Create an iterator that generates random values of `T`, using `rng` as","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":30510,"byte_end":30584,"line_start":187,"line_end":187,"column_start":5,"column_end":79}},{"value":"/ the source of randomness.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":30589,"byte_end":30618,"line_start":188,"line_end":188,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":30623,"byte_end":30626,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes `self` by value. This works since","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":30631,"byte_end":30698,"line_start":190,"line_end":190,"column_start":5,"column_end":72}},{"value":"/ `Distribution<T>` is impl'd for `&D` where `D: Distribution<T>`,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":30703,"byte_end":30771,"line_start":191,"line_end":191,"column_start":5,"column_end":73}},{"value":"/ however borrowing is not automatic hence `distr.sample_iter(...)` may","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":30776,"byte_end":30849,"line_start":192,"line_end":192,"column_start":5,"column_end":78}},{"value":"/ need to be replaced with `(&distr).sample_iter(...)` to borrow or","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":30854,"byte_end":30923,"line_start":193,"line_end":193,"column_start":5,"column_end":74}},{"value":"/ `(&*distr).sample_iter(...)` to reborrow an existing reference.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":30928,"byte_end":30995,"line_start":194,"line_end":194,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31000,"byte_end":31003,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31008,"byte_end":31021,"line_start":196,"line_end":196,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31026,"byte_end":31029,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31034,"byte_end":31041,"line_start":198,"line_end":198,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31046,"byte_end":31071,"line_start":199,"line_end":199,"column_start":5,"column_end":30}},{"value":"/ use rand::distributions::{Distribution, Alphanumeric, Uniform, Standard};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31076,"byte_end":31153,"line_start":200,"line_end":200,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31158,"byte_end":31161,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ let rng = thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31166,"byte_end":31193,"line_start":202,"line_end":202,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31198,"byte_end":31201,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31206,"byte_end":31229,"line_start":204,"line_end":204,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = Standard.sample_iter(rng).take(16).collect();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31234,"byte_end":31301,"line_start":205,"line_end":205,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31306,"byte_end":31309,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31314,"byte_end":31328,"line_start":207,"line_end":207,"column_start":5,"column_end":19}},{"value":"/ let s: String = Alphanumeric.sample_iter(rng).take(7).collect();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31333,"byte_end":31401,"line_start":208,"line_end":208,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31406,"byte_end":31409,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31414,"byte_end":31434,"line_start":210,"line_end":210,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31439,"byte_end":31488,"line_start":211,"line_end":211,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = die_range.sample_iter(rng);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31493,"byte_end":31543,"line_start":212,"line_end":212,"column_start":5,"column_end":55}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31548,"byte_end":31589,"line_start":213,"line_end":213,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31594,"byte_end":31638,"line_start":214,"line_end":214,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31643,"byte_end":31648,"line_start":215,"line_end":215,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":31653,"byte_end":31660,"line_start":216,"line_end":216,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1971},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":32360,"byte_end":32368,"line_start":243,"line_end":243,"column_start":12,"column_end":20},"name":"DistIter","qualname":"::distributions::DistIter","value":"DistIter {  }","parent":null,"children":[{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1977}],"decl_id":null,"docs":" An iterator that generates random values of `T` with distribution `D`,\n using `R` as the source of randomness.","sig":null,"attributes":[{"value":"/ An iterator that generates random values of `T` with distribution `D`,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":32043,"byte_end":32117,"line_start":235,"line_end":235,"column_start":1,"column_end":75}},{"value":"/ using `R` as the source of randomness.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":32118,"byte_end":32160,"line_start":236,"line_end":236,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":32161,"byte_end":32164,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`sample_iter`] method on [`Distribution`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":32165,"byte_end":32244,"line_start":238,"line_end":238,"column_start":1,"column_end":80}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":32245,"byte_end":32280,"line_start":239,"line_end":239,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":32281,"byte_end":32284,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::sample_iter","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":32285,"byte_end":32331,"line_start":241,"line_end":241,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1983},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":36516,"byte_end":36524,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"name":"Standard","qualname":"::distributions::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A generic random value distribution, implemented for many primitive types.\n Usually generates values with a numerically uniform distribution, and with a\n range appropriate to the type.","sig":null,"attributes":[{"value":"/ A generic random value distribution, implemented for many primitive types.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33235,"byte_end":33313,"line_start":275,"line_end":275,"column_start":1,"column_end":79}},{"value":"/ Usually generates values with a numerically uniform distribution, and with a","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33314,"byte_end":33394,"line_start":276,"line_end":276,"column_start":1,"column_end":81}},{"value":"/ range appropriate to the type.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33395,"byte_end":33429,"line_start":277,"line_end":277,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33430,"byte_end":33433,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ ## Provided implementations","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33434,"byte_end":33465,"line_start":279,"line_end":279,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33466,"byte_end":33469,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ Assuming the provided `Rng` is well-behaved, these implementations","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33470,"byte_end":33540,"line_start":281,"line_end":281,"column_start":1,"column_end":71}},{"value":"/ generate values with the following ranges and distributions:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33541,"byte_end":33605,"line_start":282,"line_end":282,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33606,"byte_end":33609,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ * Integers (`i32`, `u32`, `isize`, `usize`, etc.): Uniformly distributed","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33610,"byte_end":33686,"line_start":284,"line_end":284,"column_start":1,"column_end":77}},{"value":"/   over all values of the type.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33687,"byte_end":33721,"line_start":285,"line_end":285,"column_start":1,"column_end":35}},{"value":"/ * `char`: Uniformly distributed over all Unicode scalar values, i.e. all","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33722,"byte_end":33798,"line_start":286,"line_end":286,"column_start":1,"column_end":77}},{"value":"/   code points in the range `0...0x10_FFFF`, except for the range","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33799,"byte_end":33867,"line_start":287,"line_end":287,"column_start":1,"column_end":69}},{"value":"/   `0xD800...0xDFFF` (the surrogate code points). This includes","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33868,"byte_end":33934,"line_start":288,"line_end":288,"column_start":1,"column_end":67}},{"value":"/   unassigned/reserved code points.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33935,"byte_end":33973,"line_start":289,"line_end":289,"column_start":1,"column_end":39}},{"value":"/ * `bool`: Generates `false` or `true`, each with probability 0.5.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33974,"byte_end":34043,"line_start":290,"line_end":290,"column_start":1,"column_end":70}},{"value":"/ * Floating point types (`f32` and `f64`): Uniformly distributed in the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34044,"byte_end":34118,"line_start":291,"line_end":291,"column_start":1,"column_end":75}},{"value":"/   half-open range `[0, 1)`. See notes below.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34119,"byte_end":34167,"line_start":292,"line_end":292,"column_start":1,"column_end":49}},{"value":"/ * Wrapping integers (`Wrapping<T>`), besides the type identical to their","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34168,"byte_end":34244,"line_start":293,"line_end":293,"column_start":1,"column_end":77}},{"value":"/   normal integer variants.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34245,"byte_end":34275,"line_start":294,"line_end":294,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34276,"byte_end":34279,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ The `Standard` distribution also supports generation of the following","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34280,"byte_end":34353,"line_start":296,"line_end":296,"column_start":1,"column_end":74}},{"value":"/ compound types where all component types are supported:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34354,"byte_end":34413,"line_start":297,"line_end":297,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34414,"byte_end":34417,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ *   Tuples (up to 12 elements): each element is generated sequentially.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34418,"byte_end":34493,"line_start":299,"line_end":299,"column_start":1,"column_end":76}},{"value":"/ *   Arrays (up to 32 elements): each element is generated sequentially;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34494,"byte_end":34569,"line_start":300,"line_end":300,"column_start":1,"column_end":76}},{"value":"/     see also [`Rng::fill`] which supports arbitrary array length for integer","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34570,"byte_end":34650,"line_start":301,"line_end":301,"column_start":1,"column_end":81}},{"value":"/     types and tends to be faster for `u32` and smaller types.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34651,"byte_end":34716,"line_start":302,"line_end":302,"column_start":1,"column_end":66}},{"value":"/ *   `Option<T>` first generates a `bool`, and if true generates and returns","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34717,"byte_end":34796,"line_start":303,"line_end":303,"column_start":1,"column_end":80}},{"value":"/     `Some(value)` where `value: T`, otherwise returning `None`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34797,"byte_end":34864,"line_start":304,"line_end":304,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34865,"byte_end":34868,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ ## Custom implementations","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34869,"byte_end":34898,"line_start":306,"line_end":306,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34899,"byte_end":34902,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution may be implemented for user types as follows:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34903,"byte_end":34982,"line_start":308,"line_end":308,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34983,"byte_end":34986,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34987,"byte_end":34994,"line_start":310,"line_end":310,"column_start":1,"column_end":8}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":34995,"byte_end":35021,"line_start":311,"line_end":311,"column_start":1,"column_end":27}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35022,"byte_end":35040,"line_start":312,"line_end":312,"column_start":1,"column_end":19}},{"value":"/ use rand::distributions::{Distribution, Standard};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35041,"byte_end":35095,"line_start":313,"line_end":313,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35096,"byte_end":35099,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ struct MyF32 {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35100,"byte_end":35118,"line_start":315,"line_end":315,"column_start":1,"column_end":19}},{"value":"/     x: f32,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35119,"byte_end":35134,"line_start":316,"line_end":316,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35135,"byte_end":35140,"line_start":317,"line_end":317,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35141,"byte_end":35144,"line_start":318,"line_end":318,"column_start":1,"column_end":4}},{"value":"/ impl Distribution<MyF32> for Standard {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35145,"byte_end":35188,"line_start":319,"line_end":319,"column_start":1,"column_end":44}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> MyF32 {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35189,"byte_end":35254,"line_start":320,"line_end":320,"column_start":1,"column_end":66}},{"value":"/         MyF32 { x: rng.gen() }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35255,"byte_end":35289,"line_start":321,"line_end":321,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35290,"byte_end":35299,"line_start":322,"line_end":322,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35300,"byte_end":35305,"line_start":323,"line_end":323,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35306,"byte_end":35313,"line_start":324,"line_end":324,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35314,"byte_end":35317,"line_start":325,"line_end":325,"column_start":1,"column_end":4}},{"value":"/ ## Example usage","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35318,"byte_end":35338,"line_start":326,"line_end":326,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35339,"byte_end":35346,"line_start":327,"line_end":327,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35347,"byte_end":35372,"line_start":328,"line_end":328,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::Standard;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35373,"byte_end":35411,"line_start":329,"line_end":329,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35412,"byte_end":35415,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = StdRng::from_entropy().sample(Standard);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35416,"byte_end":35475,"line_start":331,"line_end":331,"column_start":1,"column_end":60}},{"value":"/ println!(\"f32 from [0, 1): {}\", val);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35476,"byte_end":35517,"line_start":332,"line_end":332,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35518,"byte_end":35525,"line_start":333,"line_end":333,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35526,"byte_end":35529,"line_start":334,"line_end":334,"column_start":1,"column_end":4}},{"value":"/ # Floating point implementation","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35530,"byte_end":35565,"line_start":335,"line_end":335,"column_start":1,"column_end":36}},{"value":"/ The floating point implementations for `Standard` generate a random value in","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35566,"byte_end":35646,"line_start":336,"line_end":336,"column_start":1,"column_end":81}},{"value":"/ the half-open interval `[0, 1)`, i.e. including 0 but not 1.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35647,"byte_end":35711,"line_start":337,"line_end":337,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35712,"byte_end":35715,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35716,"byte_end":35790,"line_start":339,"line_end":339,"column_start":1,"column_end":74}},{"value":"/ the 23 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35791,"byte_end":35868,"line_start":340,"line_end":340,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35869,"byte_end":35942,"line_start":341,"line_end":341,"column_start":1,"column_end":74}},{"value":"/ multiplicative method: `(rng.gen::<$uty>() >> N) as $ty * (ε/2)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":35943,"byte_end":36013,"line_start":342,"line_end":342,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":36014,"byte_end":36017,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ See also: [`Open01`] which samples from `(0, 1)`, [`OpenClosed01`] which","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":36018,"byte_end":36094,"line_start":344,"line_end":344,"column_start":1,"column_end":77}},{"value":"/ samples from `(0, 1]` and `Rng::gen_range(0, 1)` which also samples from","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":36095,"byte_end":36171,"line_start":345,"line_end":345,"column_start":1,"column_end":77}},{"value":"/ `[0, 1)`. Note that `Open01` and `gen_range` (which uses [`Uniform`]) use","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":36172,"byte_end":36249,"line_start":346,"line_end":346,"column_start":1,"column_end":78}},{"value":"/ transmute-based methods which yield 1 bit less precision but may perform","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":36250,"byte_end":36326,"line_start":347,"line_end":347,"column_start":1,"column_end":77}},{"value":"/ faster on some architectures (on modern Intel CPUs all methods have","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":36327,"byte_end":36398,"line_start":348,"line_end":348,"column_start":1,"column_end":72}},{"value":"/ approximately equal performance).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":36399,"byte_end":36436,"line_start":349,"line_end":349,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":36437,"byte_end":36440,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`]: uniform::Uniform","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":36441,"byte_end":36474,"line_start":351,"line_end":351,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":568},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","parent":null,"children":[{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":577},{"krate":0,"index":580}],"decl_id":null,"docs":" Convenience re-export of common members","sig":null,"attributes":[{"value":"! Convenience re-export of common members","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":253657,"byte_end":253700,"line_start":9,"line_end":9,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":253701,"byte_end":253704,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! Like the standard library's prelude, this module simplifies importing of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":253705,"byte_end":253781,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"! common items. Unlike the standard prelude, the contents of this module must","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":253782,"byte_end":253861,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"! be imported manually:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":253862,"byte_end":253887,"line_start":13,"line_end":13,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":253888,"byte_end":253891,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":253892,"byte_end":253899,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"! use rand::prelude::*;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":253900,"byte_end":253925,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"! # let mut r = StdRng::from_rng(thread_rng()).unwrap();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":253926,"byte_end":253984,"line_start":17,"line_end":17,"column_start":1,"column_end":59}},{"value":"! # let _: f32 = r.gen();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":253985,"byte_end":254012,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"! ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/prelude.rs","byte_start":254013,"byte_end":254020,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":583},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rngs","qualname":"::rngs","value":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":675},{"krate":0,"index":691},{"krate":0,"index":703},{"krate":0,"index":722},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747}],"decl_id":null,"docs":" Random number generators and adapters","sig":null,"attributes":[{"value":"! Random number generators and adapters","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":254856,"byte_end":254897,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":254898,"byte_end":254901,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! ## Background: Random number generators (RNGs)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":254902,"byte_end":254952,"line_start":11,"line_end":11,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":254953,"byte_end":254956,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! Computers cannot produce random numbers from nowhere. We classify","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":254957,"byte_end":255026,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"! random number generators as follows:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":255027,"byte_end":255067,"line_start":14,"line_end":14,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":255068,"byte_end":255071,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! -   \"True\" random number generators (TRNGs) use hard-to-predict data sources","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":255072,"byte_end":255152,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"!     (e.g. the high-resolution parts of event timings and sensor jitter) to","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":255153,"byte_end":255231,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"!     harvest random bit-sequences, apply algorithms to remove bias and","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":255232,"byte_end":255305,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"!     estimate available entropy, then combine these bits into a byte-sequence","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":255306,"byte_end":255386,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"!     or an entropy pool. This job is usually done by the operating system or","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":255387,"byte_end":255466,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"!     a hardware generator (HRNG).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":255467,"byte_end":255503,"line_start":21,"line_end":21,"column_start":1,"column_end":37}},{"value":"! -   \"Pseudo\"-random number generators (PRNGs) use algorithms to transform a","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":255504,"byte_end":255583,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"!     seed into a sequence of pseudo-random numbers. These generators can be","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":255584,"byte_end":255662,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"!     fast and produce well-distributed unpredictable random numbers (or not).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":255663,"byte_end":255743,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"!     They are usually deterministic: given algorithm and seed, the output","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":255744,"byte_end":255820,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"!     sequence can be reproduced. They have finite period and eventually loop;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":255821,"byte_end":255901,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"!     with many algorithms this period is fixed and can be proven sufficiently","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":255902,"byte_end":255982,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"!     long, while others are chaotic and the period depends on the seed.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":255983,"byte_end":256057,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"! -   \"Cryptographically secure\" pseudo-random number generators (CSPRNGs)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256058,"byte_end":256134,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"!     are the sub-set of PRNGs which are secure. Security of the generator","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256135,"byte_end":256211,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"!     relies both on hiding the internal state and using a strong algorithm.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256212,"byte_end":256290,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256291,"byte_end":256294,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! ## Traits and functionality","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256295,"byte_end":256326,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256327,"byte_end":256330,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! All RNGs implement the [`RngCore`] trait, as a consequence of which the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256331,"byte_end":256406,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"! [`Rng`] extension trait is automatically implemented. Secure RNGs may","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256407,"byte_end":256480,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"! additionally implement the [`CryptoRng`] trait.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256481,"byte_end":256532,"line_start":37,"line_end":37,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256533,"byte_end":256536,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! All PRNGs require a seed to produce their random number sequence. The","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256537,"byte_end":256610,"line_start":39,"line_end":39,"column_start":1,"column_end":74}},{"value":"! [`SeedableRng`] trait provides three ways of constructing PRNGs:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256611,"byte_end":256679,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256680,"byte_end":256683,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! -   `from_seed` accepts a type specific to the PRNG","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256684,"byte_end":256739,"line_start":42,"line_end":42,"column_start":1,"column_end":56}},{"value":"! -   `from_rng` allows a PRNG to be seeded from any other RNG","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256740,"byte_end":256804,"line_start":43,"line_end":43,"column_start":1,"column_end":65}},{"value":"! -   `seed_from_u64` allows any PRNG to be seeded from a `u64` insecurely","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256805,"byte_end":256881,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"! -   `from_entropy` securely seeds a PRNG from fresh entropy","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256882,"byte_end":256945,"line_start":45,"line_end":45,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256946,"byte_end":256949,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"! Use the [`rand_core`] crate when implementing your own RNGs.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":256950,"byte_end":257014,"line_start":47,"line_end":47,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257015,"byte_end":257018,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"! ## Our generators","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257019,"byte_end":257040,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257041,"byte_end":257044,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! This crate provides several random number generators:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257045,"byte_end":257102,"line_start":51,"line_end":51,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257103,"byte_end":257106,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"! -   [`OsRng`] is an interface to the operating system's random number","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257107,"byte_end":257180,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"!     source. Typically the operating system uses a CSPRNG with entropy","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257181,"byte_end":257254,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"!     provided by a TRNG and some type of on-going re-seeding.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257255,"byte_end":257319,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"! -   [`ThreadRng`], provided by the [`thread_rng`] function, is a handle to a","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257320,"byte_end":257400,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"!     thread-local CSPRNG with periodic seeding from [`OsRng`]. Because this","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257401,"byte_end":257479,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"!     is local, it is typically much faster than [`OsRng`]. It should be","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257480,"byte_end":257554,"line_start":58,"line_end":58,"column_start":1,"column_end":75}},{"value":"!     secure, though the paranoid may prefer [`OsRng`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257555,"byte_end":257612,"line_start":59,"line_end":59,"column_start":1,"column_end":58}},{"value":"! -   [`StdRng`] is a CSPRNG chosen for good performance and trust of security","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257613,"byte_end":257693,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"!     (based on reviews, maturity and usage). The current algorithm is ChaCha20,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257694,"byte_end":257776,"line_start":61,"line_end":61,"column_start":1,"column_end":83}},{"value":"!     which is well established and rigorously analysed.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257777,"byte_end":257835,"line_start":62,"line_end":62,"column_start":1,"column_end":59}},{"value":"!     [`StdRng`] provides the algorithm used by [`ThreadRng`] but without","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257836,"byte_end":257911,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"!     periodic reseeding.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257912,"byte_end":257939,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"! -   [`SmallRng`] is an **insecure** PRNG designed to be fast, simple, require","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":257940,"byte_end":258021,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"!     little memory, and have good output quality.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258022,"byte_end":258074,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258075,"byte_end":258078,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! The algorithms selected for [`StdRng`] and [`SmallRng`] may change in any","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258079,"byte_end":258156,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"! release and may be platform-dependent, therefore they should be considered","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258157,"byte_end":258235,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"! **not reproducible**.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258236,"byte_end":258261,"line_start":70,"line_end":70,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258262,"byte_end":258265,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"! ## Additional generators","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258266,"byte_end":258294,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258295,"byte_end":258298,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"! **TRNGs**: The [`rdrand`] crate provides an interface to the RDRAND and","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258299,"byte_end":258374,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"! RDSEED instructions available in modern Intel and AMD CPUs.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258375,"byte_end":258438,"line_start":75,"line_end":75,"column_start":1,"column_end":64}},{"value":"! The [`rand_jitter`] crate provides a user-space implementation of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258439,"byte_end":258508,"line_start":76,"line_end":76,"column_start":1,"column_end":70}},{"value":"! entropy harvesting from CPU timer jitter, but is very slow and has","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258509,"byte_end":258579,"line_start":77,"line_end":77,"column_start":1,"column_end":71}},{"value":"! [security issues](https://github.com/rust-random/rand/issues/699).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258580,"byte_end":258650,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258651,"byte_end":258654,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"! **PRNGs**: Several companion crates are available, providing individual or","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258655,"byte_end":258733,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"! families of PRNG algorithms. These provide the implementations behind","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258734,"byte_end":258807,"line_start":81,"line_end":81,"column_start":1,"column_end":74}},{"value":"! [`StdRng`] and [`SmallRng`] but can also be used directly, indeed *should*","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258808,"byte_end":258886,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"! be used directly when **reproducibility** matters.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258887,"byte_end":258941,"line_start":83,"line_end":83,"column_start":1,"column_end":55}},{"value":"! Some suggestions are: [`rand_chacha`], [`rand_pcg`], [`rand_xoshiro`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":258942,"byte_end":259016,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"! A full list can be found by searching for crates with the [`rng` tag].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259017,"byte_end":259091,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259092,"byte_end":259095,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"! [`SmallRng`]: rngs::SmallRng","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259096,"byte_end":259128,"line_start":87,"line_end":87,"column_start":1,"column_end":33}},{"value":"! [`StdRng`]: rngs::StdRng","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259129,"byte_end":259157,"line_start":88,"line_end":88,"column_start":1,"column_end":29}},{"value":"! [`OsRng`]: rngs::OsRng","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259158,"byte_end":259184,"line_start":89,"line_end":89,"column_start":1,"column_end":27}},{"value":"! [`ThreadRng`]: rngs::ThreadRng","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259185,"byte_end":259219,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"! [`mock::StepRng`]: rngs::mock::StepRng","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259220,"byte_end":259262,"line_start":91,"line_end":91,"column_start":1,"column_end":43}},{"value":"! [`adapter::ReadRng`]: rngs::adapter::ReadRng","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259263,"byte_end":259311,"line_start":92,"line_end":92,"column_start":1,"column_end":49}},{"value":"! [`adapter::ReseedingRng`]: rngs::adapter::ReseedingRng","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259312,"byte_end":259370,"line_start":93,"line_end":93,"column_start":1,"column_end":59}},{"value":"! [`rdrand`]: https://crates.io/crates/rdrand","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259371,"byte_end":259418,"line_start":94,"line_end":94,"column_start":1,"column_end":48}},{"value":"! [`rand_jitter`]: https://crates.io/crates/rand_jitter","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259419,"byte_end":259476,"line_start":95,"line_end":95,"column_start":1,"column_end":58}},{"value":"! [`rand_chacha`]: https://crates.io/crates/rand_chacha","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259477,"byte_end":259534,"line_start":96,"line_end":96,"column_start":1,"column_end":58}},{"value":"! [`rand_pcg`]: https://crates.io/crates/rand_pcg","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259535,"byte_end":259586,"line_start":97,"line_end":97,"column_start":1,"column_end":52}},{"value":"! [`rand_xoshiro`]: https://crates.io/crates/rand_xoshiro","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259587,"byte_end":259646,"line_start":98,"line_end":98,"column_start":1,"column_end":60}},{"value":"! [`rng` tag]: https://crates.io/keywords/rng","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259647,"byte_end":259694,"line_start":99,"line_end":99,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":584},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::rngs::adapter","value":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/mod.rs","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":607},{"krate":0,"index":671},{"krate":0,"index":674}],"decl_id":null,"docs":" Wrappers / adapters forming RNGs\n","sig":null,"attributes":[{"value":"! Wrappers / adapters forming RNGs","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/mod.rs","byte_start":260614,"byte_end":260650,"line_start":9,"line_end":9,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1990},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":262287,"byte_end":262294,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"ReadRng","qualname":"::rngs::adapter::read::ReadRng","value":"ReadRng {  }","parent":null,"children":[{"krate":0,"index":1992}],"decl_id":null,"docs":" An RNG that reads random bytes straight from any type supporting\n [`std::io::Read`], for example files.","sig":null,"attributes":[{"value":"/ An RNG that reads random bytes straight from any type supporting","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261337,"byte_end":261405,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ [`std::io::Read`], for example files.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261406,"byte_end":261447,"line_start":19,"line_end":19,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261448,"byte_end":261451,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This will work best with an infinite reader, but that is not required.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261452,"byte_end":261526,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261527,"byte_end":261530,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This can be used with `/dev/urandom` on Unix but it is recommended to use","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261531,"byte_end":261608,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ [`OsRng`] instead.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261609,"byte_end":261631,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261632,"byte_end":261635,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261636,"byte_end":261648,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261649,"byte_end":261652,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ `ReadRng` uses [`std::io::Read::read_exact`], which retries on interrupts.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261653,"byte_end":261731,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ All other errors from the underlying reader, including when it does not","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261732,"byte_end":261807,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ have enough data, will only be reported through [`try_fill_bytes`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261808,"byte_end":261879,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"/ The other [`RngCore`] methods will panic in case of an error.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261880,"byte_end":261945,"line_start":31,"line_end":31,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261946,"byte_end":261949,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261950,"byte_end":261963,"line_start":33,"line_end":33,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261964,"byte_end":261967,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261968,"byte_end":261975,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261976,"byte_end":261994,"line_start":36,"line_end":36,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::adapter::ReadRng;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":261995,"byte_end":262032,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":262033,"byte_end":262036,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let data = vec![1, 2, 3, 4, 5, 6, 7, 8];","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":262037,"byte_end":262081,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/ let mut rng = ReadRng::new(&data[..]);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":262082,"byte_end":262124,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/ println!(\"{:x}\", rng.gen::<u32>());","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":262125,"byte_end":262164,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":262165,"byte_end":262172,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":262173,"byte_end":262176,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ [`OsRng`]: crate::rngs::OsRng","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":262177,"byte_end":262210,"line_start":44,"line_end":44,"column_start":1,"column_end":34}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":262211,"byte_end":262258,"line_start":45,"line_end":45,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":262401,"byte_end":262404,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadRng<R>>::new","value":"fn (r: R) -> ReadRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReadRng` from a `Read`.\n","sig":null,"attributes":[{"value":"/ Create a new `ReadRng` from a `Read`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":262348,"byte_end":262389,"line_start":52,"line_end":52,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1996},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":263233,"byte_end":263242,"line_start":83,"line_end":83,"column_start":12,"column_end":21},"name":"ReadError","qualname":"::rngs::adapter::read::ReadError","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ReadRng` error type\n","sig":null,"attributes":[{"value":"/ `ReadRng` error type","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":263180,"byte_end":263204,"line_start":81,"line_end":81,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":2001},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268183,"byte_end":268195,"line_start":79,"line_end":79,"column_start":12,"column_end":24},"name":"ReseedingRng","qualname":"::rngs::adapter::reseeding::ReseedingRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around any PRNG that implements [`BlockRngCore`], that adds the\n ability to reseed it.","sig":null,"attributes":[{"value":"/ A wrapper around any PRNG that implements [`BlockRngCore`], that adds the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":265582,"byte_end":265659,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ ability to reseed it.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":265660,"byte_end":265685,"line_start":19,"line_end":19,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":265686,"byte_end":265689,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ `ReseedingRng` reseeds the underlying PRNG in the following cases:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":265690,"byte_end":265760,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":265761,"byte_end":265764,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - On a manual call to [`reseed()`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":265765,"byte_end":265804,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/ - After `clone()`, the clone will be reseeded on first use.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":265805,"byte_end":265868,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"/ - After a process is forked, the RNG in the child process is reseeded within","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":265869,"byte_end":265949,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   the next few generated values, depending on the block size of the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":265950,"byte_end":266021,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/   underlying PRNG. For ChaCha and Hc128 this is a maximum of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266022,"byte_end":266086,"line_start":27,"line_end":27,"column_start":1,"column_end":65}},{"value":"/   15 `u32` values before reseeding.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266087,"byte_end":266126,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/ - After the PRNG has generated a configurable number of random bytes.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266127,"byte_end":266200,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266201,"byte_end":266204,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # When should reseeding after a fixed number of generated bytes be used?","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266205,"byte_end":266281,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266282,"byte_end":266285,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Reseeding after a fixed number of generated bytes is never strictly","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266286,"byte_end":266357,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ *necessary*. Cryptographic PRNGs don't have a limited number of bytes they","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266358,"byte_end":266436,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ can output, or at least not a limit reachable in any practical way. There is","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266437,"byte_end":266517,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"/ no such thing as 'running out of entropy'.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266518,"byte_end":266564,"line_start":36,"line_end":36,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266565,"byte_end":266568,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Occasionally reseeding can be seen as some form of 'security in depth'. Even","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266569,"byte_end":266649,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/ if in the future a cryptographic weakness is found in the CSPRNG being used,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266650,"byte_end":266730,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ or a flaw in the implementation, occasionally reseeding should make","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266731,"byte_end":266802,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ exploiting it much more difficult or even impossible.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266803,"byte_end":266860,"line_start":41,"line_end":41,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266861,"byte_end":266864,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Use [`ReseedingRng::new`] with a `threshold` of `0` to disable reseeding","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266865,"byte_end":266941,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/ after a fixed number of generated bytes.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266942,"byte_end":266986,"line_start":44,"line_end":44,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266987,"byte_end":266990,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Error handling","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":266991,"byte_end":267011,"line_start":46,"line_end":46,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267012,"byte_end":267015,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Although unlikely, reseeding the wrapped PRNG can fail. `ReseedingRng` will","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267016,"byte_end":267095,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ never panic but try to handle the error intelligently through some","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267096,"byte_end":267166,"line_start":49,"line_end":49,"column_start":1,"column_end":71}},{"value":"/ combination of retrying and delaying reseeding until later.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267167,"byte_end":267230,"line_start":50,"line_end":50,"column_start":1,"column_end":64}},{"value":"/ If handling the source error fails `ReseedingRng` will continue generating","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267231,"byte_end":267309,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ data from the wrapped PRNG without reseeding.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267310,"byte_end":267359,"line_start":52,"line_end":52,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267360,"byte_end":267363,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Manually calling [`reseed()`] will not have this retry or delay logic, but","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267364,"byte_end":267442,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"/ reports the error.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267443,"byte_end":267465,"line_start":55,"line_end":55,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267466,"byte_end":267469,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267470,"byte_end":267483,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267484,"byte_end":267487,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267488,"byte_end":267495,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267496,"byte_end":267521,"line_start":60,"line_end":60,"column_start":1,"column_end":26}},{"value":"/ use rand_chacha::ChaCha20Core; // Internal part of ChaChaRng that","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267522,"byte_end":267591,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/                              // implements BlockRngCore","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267592,"byte_end":267651,"line_start":62,"line_end":62,"column_start":1,"column_end":60}},{"value":"/ use rand::rngs::OsRng;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267652,"byte_end":267678,"line_start":63,"line_end":63,"column_start":1,"column_end":27}},{"value":"/ use rand::rngs::adapter::ReseedingRng;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267679,"byte_end":267721,"line_start":64,"line_end":64,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267722,"byte_end":267725,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ let prng = ChaCha20Core::from_entropy();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267726,"byte_end":267770,"line_start":66,"line_end":66,"column_start":1,"column_end":45}},{"value":"/ let mut reseeding_rng = ReseedingRng::new(prng, 0, OsRng);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267771,"byte_end":267833,"line_start":67,"line_end":67,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267834,"byte_end":267837,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", reseeding_rng.gen::<u64>());","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267838,"byte_end":267885,"line_start":69,"line_end":69,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267886,"byte_end":267889,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let mut cloned_rng = reseeding_rng.clone();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267890,"byte_end":267937,"line_start":71,"line_end":71,"column_start":1,"column_end":48}},{"value":"/ assert!(reseeding_rng.gen::<u64>() != cloned_rng.gen::<u64>());","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":267938,"byte_end":268005,"line_start":72,"line_end":72,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268006,"byte_end":268013,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268014,"byte_end":268017,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ [`BlockRngCore`]: rand_core::block::BlockRngCore","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268018,"byte_end":268070,"line_start":75,"line_end":75,"column_start":1,"column_end":53}},{"value":"/ [`ReseedingRng::new`]: ReseedingRng::new","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268071,"byte_end":268115,"line_start":76,"line_end":76,"column_start":1,"column_end":45}},{"value":"/ [`reseed()`]: ReseedingRng::reseed","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268116,"byte_end":268154,"line_start":77,"line_end":77,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268694,"byte_end":268697,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"new","qualname":"<ReseedingRng<R, Rsdr>>::new","value":"fn (rng: R, threshold: u64, reseeder: Rsdr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReseedingRng` from an existing PRNG, combined with a RNG\n to use as reseeder.","sig":null,"attributes":[{"value":"/ Create a new `ReseedingRng` from an existing PRNG, combined with a RNG","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268397,"byte_end":268471,"line_start":87,"line_end":87,"column_start":5,"column_end":79}},{"value":"/ to use as reseeder.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268476,"byte_end":268499,"line_start":88,"line_end":88,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268504,"byte_end":268507,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ `threshold` sets the number of generated bytes after which to reseed the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268512,"byte_end":268588,"line_start":90,"line_end":90,"column_start":5,"column_end":81}},{"value":"/ PRNG. Set it to zero to never reseed based on the number of generated","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268593,"byte_end":268666,"line_start":91,"line_end":91,"column_start":5,"column_end":78}},{"value":"/ values.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268671,"byte_end":268682,"line_start":92,"line_end":92,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268882,"byte_end":268888,"line_start":98,"line_end":98,"column_start":12,"column_end":18},"name":"reseed","qualname":"<ReseedingRng<R, Rsdr>>::reseed","value":"fn (&mut self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Reseed the internal PRNG.\n","sig":null,"attributes":[{"value":"/ Reseed the internal PRNG.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268841,"byte_end":268870,"line_start":97,"line_end":97,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2022},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278222,"byte_end":278232,"line_start":24,"line_end":24,"column_start":12,"column_end":22},"name":"EntropyRng","qualname":"::rngs::entropy::EntropyRng","value":"EntropyRng {  }","parent":null,"children":[{"krate":0,"index":2023}],"decl_id":null,"docs":" An interface returning random data from external source(s), provided\n specifically for securely seeding algorithmic generators (PRNGs).","sig":null,"attributes":[{"value":"/ An interface returning random data from external source(s), provided","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":277868,"byte_end":277940,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ specifically for securely seeding algorithmic generators (PRNGs).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":277941,"byte_end":278010,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278011,"byte_end":278014,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This is deprecated. It is suggested you use [`rngs::OsRng`] instead.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278015,"byte_end":278087,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278088,"byte_end":278092,"line_start":20,"line_end":20,"column_start":1,"column_end":5}},{"value":"/ [`rngs::OsRng`]: crate::rngs::OsRng","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278093,"byte_end":278132,"line_start":21,"line_end":21,"column_start":1,"column_end":40}},{"value":"deprecated(since = \"0.7.0\", note = \"use rngs::OsRng instead\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278150,"byte_end":278210,"line_start":23,"line_end":23,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278545,"byte_end":278548,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<EntropyRng>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `EntropyRng`.","sig":null,"attributes":[{"value":"/ Create a new `EntropyRng`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278279,"byte_end":278309,"line_start":29,"line_end":29,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278314,"byte_end":278317,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ This method will do no system calls or other initialization routines,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278322,"byte_end":278395,"line_start":31,"line_end":31,"column_start":5,"column_end":78}},{"value":"/ those are done on first use. This is done to make `new` infallible,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278400,"byte_end":278471,"line_start":32,"line_end":32,"column_start":5,"column_end":76}},{"value":"/ and `try_fill_bytes` the only place to report errors.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278476,"byte_end":278533,"line_start":33,"line_end":33,"column_start":5,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":691},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mock","qualname":"::rngs::mock","value":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":2026},{"krate":0,"index":2031},{"krate":0,"index":2029},{"krate":0,"index":696},{"krate":0,"index":698}],"decl_id":null,"docs":" Mock random number generator\n","sig":null,"attributes":[{"value":"! Mock random number generator","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":279730,"byte_end":279762,"line_start":9,"line_end":9,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":2026},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280291,"byte_end":280298,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"StepRng","qualname":"::rngs::mock::StepRng","value":"StepRng {  }","parent":null,"children":[{"krate":0,"index":2027},{"krate":0,"index":2028}],"decl_id":null,"docs":" A simple implementation of `RngCore` for testing purposes.\n \n This generates an arithmetic sequence (i.e. adds a constant each step)\n over a `u64` number, using wrapping arithmetic. If the increment is 0\n the generator yields a constant.\n \n ```\n use rand::Rng;\n use rand::rngs::mock::StepRng;\n \n let mut my_rng = StepRng::new(2, 1);\n let sample: [u64; 3] = my_rng.gen();\n assert_eq!(sample, [2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ A simple implementation of `RngCore` for testing purposes.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":279805,"byte_end":279867,"line_start":13,"line_end":13,"column_start":1,"column_end":63}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":279868,"byte_end":279872,"line_start":14,"line_end":14,"column_start":1,"column_end":5}},{"value":"/ This generates an arithmetic sequence (i.e. adds a constant each step)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":279873,"byte_end":279947,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ over a `u64` number, using wrapping arithmetic. If the increment is 0","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":279948,"byte_end":280021,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/ the generator yields a constant.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280022,"byte_end":280058,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280059,"byte_end":280063,"line_start":18,"line_end":18,"column_start":1,"column_end":5}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280064,"byte_end":280071,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280072,"byte_end":280090,"line_start":20,"line_end":20,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::mock::StepRng;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280091,"byte_end":280125,"line_start":21,"line_end":21,"column_start":1,"column_end":35}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280126,"byte_end":280130,"line_start":22,"line_end":22,"column_start":1,"column_end":5}},{"value":"/ let mut my_rng = StepRng::new(2, 1);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280131,"byte_end":280171,"line_start":23,"line_end":23,"column_start":1,"column_end":41}},{"value":"/ let sample: [u64; 3] = my_rng.gen();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280172,"byte_end":280212,"line_start":24,"line_end":24,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(sample, [2, 3, 4]);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280213,"byte_end":280247,"line_start":25,"line_end":25,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280248,"byte_end":280255,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280488,"byte_end":280491,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<StepRng>::new","value":"fn (initial: u64, increment: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `StepRng`, yielding an arithmetic sequence starting with\n `initial` and incremented by `increment` each time.\n","sig":null,"attributes":[{"value":"/ Create a `StepRng`, yielding an arithmetic sequence starting with","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280347,"byte_end":280416,"line_start":34,"line_end":34,"column_start":5,"column_end":74}},{"value":"/ `initial` and incremented by `increment` each time.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280421,"byte_end":280476,"line_start":35,"line_end":35,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2033},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":282726,"byte_end":282732,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"name":"StdRng","qualname":"::rngs::std::StdRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient\n on the current platform, to be statistically strong and unpredictable\n (meaning a cryptographically secure PRNG).","sig":null,"attributes":[{"value":"/ The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":281909,"byte_end":281987,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ on the current platform, to be statistically strong and unpredictable","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":281988,"byte_end":282061,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ (meaning a cryptographically secure PRNG).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":282062,"byte_end":282108,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":282109,"byte_end":282112,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The current algorithm used is the ChaCha block cipher with either 20 or 12","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":282113,"byte_end":282191,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ rounds (see the `stdrng_*` feature flags, documented in the README).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":282192,"byte_end":282264,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/ This may change as new evidence of cipher security and performance","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":282265,"byte_end":282335,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ becomes available.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":282336,"byte_end":282358,"line_start":28,"line_end":28,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":282359,"byte_end":282362,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The algorithm is deterministic but should not be considered reproducible","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":282363,"byte_end":282439,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ due to dependence on configuration and possible replacement in future","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":282440,"byte_end":282513,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"/ library versions. For a secure reproducible generator, we recommend use of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":282514,"byte_end":282592,"line_start":32,"line_end":32,"column_start":1,"column_end":79}},{"value":"/ the [rand_chacha] crate directly.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":282593,"byte_end":282630,"line_start":33,"line_end":33,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":282631,"byte_end":282634,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ [rand_chacha]: https://crates.io/crates/rand_chacha","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":282635,"byte_end":282690,"line_start":35,"line_end":35,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":2040},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286980,"byte_end":286989,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"ThreadRng","qualname":"::rngs::thread::ThreadRng","value":"ThreadRng {  }","parent":null,"children":[{"krate":0,"index":2041}],"decl_id":null,"docs":" The type returned by [`thread_rng`], essentially just a reference to the\n PRNG in thread-local memory.","sig":null,"attributes":[{"value":"/ The type returned by [`thread_rng`], essentially just a reference to the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286087,"byte_end":286163,"line_start":39,"line_end":39,"column_start":1,"column_end":77}},{"value":"/ PRNG in thread-local memory.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286164,"byte_end":286196,"line_start":40,"line_end":40,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286197,"byte_end":286200,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ `ThreadRng` uses the same PRNG as [`StdRng`] for security and performance.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286201,"byte_end":286279,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ As hinted by the name, the generator is thread-local. `ThreadRng` is a","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286280,"byte_end":286354,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ handle to this generator and thus supports `Copy`, but not `Send` or `Sync`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286355,"byte_end":286435,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286436,"byte_end":286439,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Unlike `StdRng`, `ThreadRng` uses the  [`ReseedingRng`] wrapper to reseed","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286440,"byte_end":286517,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ the PRNG from fresh entropy every 64 kiB of random data.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286518,"byte_end":286578,"line_start":47,"line_end":47,"column_start":1,"column_end":61}},{"value":"/ [`OsRng`] is used to provide seed data.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286579,"byte_end":286622,"line_start":48,"line_end":48,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286623,"byte_end":286626,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Note that the reseeding is done as an extra precaution against side-channel","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286627,"byte_end":286706,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/ attacks and mis-use (e.g. if somehow weak entropy were supplied initially).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286707,"byte_end":286786,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ The PRNG algorithms used are assumed to be secure.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286787,"byte_end":286841,"line_start":52,"line_end":52,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286842,"byte_end":286845,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ [`ReseedingRng`]: crate::rngs::adapter::ReseedingRng","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286846,"byte_end":286902,"line_start":54,"line_end":54,"column_start":1,"column_end":57}},{"value":"/ [`StdRng`]: crate::rngs::StdRng","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":286903,"byte_end":286938,"line_start":55,"line_end":55,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":734},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":287879,"byte_end":287889,"line_start":80,"line_end":80,"column_start":8,"column_end":18},"name":"thread_rng","qualname":"::rngs::thread::thread_rng","value":"fn () -> ThreadRng","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the lazily-initialized thread-local random number generator,\n seeded by the system. Intended to be used in method chaining style,\n e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.\n `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making\n `ThreadRng::default()` equivalent.","sig":null,"attributes":[{"value":"/ Retrieve the lazily-initialized thread-local random number generator,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":287502,"byte_end":287575,"line_start":73,"line_end":73,"column_start":1,"column_end":74}},{"value":"/ seeded by the system. Intended to be used in method chaining style,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":287576,"byte_end":287647,"line_start":74,"line_end":74,"column_start":1,"column_end":72}},{"value":"/ e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":287648,"byte_end":287709,"line_start":75,"line_end":75,"column_start":1,"column_end":62}},{"value":"/ `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":287710,"byte_end":287784,"line_start":76,"line_end":76,"column_start":1,"column_end":75}},{"value":"/ `ThreadRng::default()` equivalent.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":287785,"byte_end":287823,"line_start":77,"line_end":77,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":287824,"byte_end":287827,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ For more information see [`ThreadRng`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":287828,"byte_end":287871,"line_start":79,"line_end":79,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":748},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seq","qualname":"::seq","value":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":823},{"krate":0,"index":847},{"krate":0,"index":854},{"krate":0,"index":885},{"krate":0,"index":2085},{"krate":0,"index":2092},{"krate":0,"index":887},{"krate":0,"index":895},{"krate":0,"index":900}],"decl_id":null,"docs":" Sequence-related functionality\n \n This module provides:\n \n *   [`seq::SliceRandom`] slice sampling and mutation\n *   [`seq::IteratorRandom`] iterator sampling\n *   [`seq::index::sample`] low-level API to choose multiple indices from\n     `0..length`\n \n Also see:\n \n *   [`distributions::weighted`] module which provides implementations of\n     weighted index sampling.\n \n In order to make results reproducible across 32-64 bit architectures, all\n `usize` indices are sampled as a `u32` where possible (also providing a\n small performance boost in some cases).\n","sig":null,"attributes":[{"value":"! Sequence-related functionality","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289229,"byte_end":289263,"line_start":9,"line_end":9,"column_start":1,"column_end":35}},{"value":"! ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289264,"byte_end":289268,"line_start":10,"line_end":10,"column_start":1,"column_end":5}},{"value":"! This module provides:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289269,"byte_end":289294,"line_start":11,"line_end":11,"column_start":1,"column_end":26}},{"value":"! ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289295,"byte_end":289299,"line_start":12,"line_end":12,"column_start":1,"column_end":5}},{"value":"! *   [`seq::SliceRandom`] slice sampling and mutation","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289300,"byte_end":289356,"line_start":13,"line_end":13,"column_start":1,"column_end":57}},{"value":"! *   [`seq::IteratorRandom`] iterator sampling","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289357,"byte_end":289406,"line_start":14,"line_end":14,"column_start":1,"column_end":50}},{"value":"! *   [`seq::index::sample`] low-level API to choose multiple indices from","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289407,"byte_end":289483,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"!     `0..length`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289484,"byte_end":289503,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"! ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289504,"byte_end":289508,"line_start":17,"line_end":17,"column_start":1,"column_end":5}},{"value":"! Also see:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289509,"byte_end":289522,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"! ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289523,"byte_end":289527,"line_start":19,"line_end":19,"column_start":1,"column_end":5}},{"value":"! *   [`distributions::weighted`] module which provides implementations of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289528,"byte_end":289604,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"!     weighted index sampling.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289605,"byte_end":289637,"line_start":21,"line_end":21,"column_start":1,"column_end":33}},{"value":"! ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289638,"byte_end":289642,"line_start":22,"line_end":22,"column_start":1,"column_end":5}},{"value":"! In order to make results reproducible across 32-64 bit architectures, all","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289643,"byte_end":289720,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"! `usize` indices are sampled as a `u32` where possible (also providing a","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289721,"byte_end":289796,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"! small performance boost in some cases).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289797,"byte_end":289840,"line_start":25,"line_end":25,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":749},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::seq::index","value":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":758},{"krate":0,"index":2052},{"krate":0,"index":2061},{"krate":0,"index":2059},{"krate":0,"index":759},{"krate":0,"index":767},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":2063},{"krate":0,"index":2071},{"krate":0,"index":776},{"krate":0,"index":783},{"krate":0,"index":2074},{"krate":0,"index":2083},{"krate":0,"index":2081},{"krate":0,"index":785},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":800},{"krate":0,"index":803},{"krate":0,"index":805},{"krate":0,"index":808},{"krate":0,"index":811},{"krate":0,"index":814}],"decl_id":null,"docs":" Low-level API for sampling indices\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289843,"byte_end":289866,"line_start":28,"line_end":28,"column_start":1,"column_end":24}},{"value":"! Low-level API for sampling indices","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":316989,"byte_end":317027,"line_start":9,"line_end":9,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2053},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":317660,"byte_end":317663,"line_start":27,"line_end":27,"column_start":20,"column_end":23},"name":"U32","qualname":"::seq::index::IndexVec::U32","value":"IndexVec::U32(Vec<u32>)","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2056},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":317694,"byte_end":317699,"line_start":28,"line_end":28,"column_start":20,"column_end":25},"name":"USize","qualname":"::seq::index::IndexVec::USize","value":"IndexVec::USize(Vec<usize>)","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2052},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":317630,"byte_end":317638,"line_start":26,"line_end":26,"column_start":10,"column_end":18},"name":"IndexVec","qualname":"::seq::index::IndexVec","value":"IndexVec::{U32, USize}","parent":null,"children":[{"krate":0,"index":2053},{"krate":0,"index":2056}],"decl_id":null,"docs":" A vector of indices.","sig":null,"attributes":[{"value":"/ A vector of indices.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":317516,"byte_end":317540,"line_start":22,"line_end":22,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":317541,"byte_end":317544,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Multiple internal representations are possible.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":317545,"byte_end":317596,"line_start":24,"line_end":24,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":317795,"byte_end":317798,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexVec>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of indices\n","sig":null,"attributes":[{"value":"/ Returns the number of indices","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":317736,"byte_end":317769,"line_start":32,"line_end":32,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":317774,"byte_end":317783,"line_start":33,"line_end":33,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":318016,"byte_end":318024,"line_start":43,"line_end":43,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexVec>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the length is 0.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the length is 0.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":317952,"byte_end":317990,"line_start":41,"line_end":41,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":317995,"byte_end":318004,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":318361,"byte_end":318366,"line_start":55,"line_end":55,"column_start":12,"column_end":17},"name":"index","qualname":"<IndexVec>::index","value":"fn (&self, index: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the value at the given `index`.","sig":null,"attributes":[{"value":"/ Return the value at the given `index`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":318187,"byte_end":318229,"line_start":50,"line_end":50,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":318234,"byte_end":318237,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ (Note: we cannot implement [`std::ops::Index`] because of lifetime","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":318242,"byte_end":318312,"line_start":52,"line_end":52,"column_start":5,"column_end":75}},{"value":"/ restrictions.)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":318317,"byte_end":318335,"line_start":53,"line_end":53,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":318340,"byte_end":318349,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":318645,"byte_end":318653,"line_start":64,"line_end":64,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<IndexVec>::into_vec","value":"fn (self) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return result as a `Vec<usize>`. Conversion may or may not be trivial.\n","sig":null,"attributes":[{"value":"/ Return result as a `Vec<usize>`. Conversion may or may not be trivial.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":318545,"byte_end":318619,"line_start":62,"line_end":62,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":318624,"byte_end":318633,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":318918,"byte_end":318922,"line_start":73,"line_end":73,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexVec>::iter","value":"fn (&self) -> IndexVecIter<'_>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the indices as a sequence of `usize` values\n","sig":null,"attributes":[{"value":"/ Iterate over the indices as a sequence of `usize` values","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":318832,"byte_end":318892,"line_start":71,"line_end":71,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":318897,"byte_end":318906,"line_start":72,"line_end":72,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":319232,"byte_end":319241,"line_start":82,"line_end":82,"column_start":12,"column_end":21},"name":"into_iter","qualname":"<IndexVec>::into_iter","value":"fn (self) -> IndexVecIntoIter","parent":null,"children":[],"decl_id":null,"docs":" Convert into an iterator over the indices as a sequence of `usize` values\n","sig":null,"attributes":[{"value":"/ Convert into an iterator over the indices as a sequence of `usize` values","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":319129,"byte_end":319206,"line_start":80,"line_end":80,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":319211,"byte_end":319220,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2065},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":320360,"byte_end":320363,"line_start":121,"line_end":121,"column_start":20,"column_end":23},"name":"U32","qualname":"::seq::index::IndexVecIter::U32","value":"IndexVecIter::U32(slice::Iter<'a, u32>)","parent":{"krate":0,"index":2063},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2068},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":320406,"byte_end":320411,"line_start":122,"line_end":122,"column_start":20,"column_end":25},"name":"USize","qualname":"::seq::index::IndexVecIter::USize","value":"IndexVecIter::USize(slice::Iter<'a, usize>)","parent":{"krate":0,"index":2063},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2063},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":320322,"byte_end":320334,"line_start":120,"line_end":120,"column_start":10,"column_end":22},"name":"IndexVecIter","qualname":"::seq::index::IndexVecIter","value":"IndexVecIter::{U32, USize}","parent":null,"children":[{"krate":0,"index":2065},{"krate":0,"index":2068}],"decl_id":null,"docs":" Return type of `IndexVec::iter`.\n","sig":null,"attributes":[{"value":"/ Return type of `IndexVec::iter`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":320259,"byte_end":320295,"line_start":118,"line_end":118,"column_start":1,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2075},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":321142,"byte_end":321145,"line_start":150,"line_end":150,"column_start":20,"column_end":23},"name":"U32","qualname":"::seq::index::IndexVecIntoIter::U32","value":"IndexVecIntoIter::U32(vec::IntoIter<u32>)","parent":{"krate":0,"index":2074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2078},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":321186,"byte_end":321191,"line_start":151,"line_end":151,"column_start":20,"column_end":25},"name":"USize","qualname":"::seq::index::IndexVecIntoIter::USize","value":"IndexVecIntoIter::USize(vec::IntoIter<usize>)","parent":{"krate":0,"index":2074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2074},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":321104,"byte_end":321120,"line_start":149,"line_end":149,"column_start":10,"column_end":26},"name":"IndexVecIntoIter","qualname":"::seq::index::IndexVecIntoIter","value":"IndexVecIntoIter::{U32, USize}","parent":null,"children":[{"krate":0,"index":2075},{"krate":0,"index":2078}],"decl_id":null,"docs":" Return type of `IndexVec::into_iter`.\n","sig":null,"attributes":[{"value":"/ Return type of `IndexVec::into_iter`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":321029,"byte_end":321070,"line_start":147,"line_end":147,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":793},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322867,"byte_end":322873,"line_start":201,"line_end":201,"column_start":8,"column_end":14},"name":"sample","qualname":"::seq::index::sample","value":"fn <R> (rng: &mut R, length: usize, amount: usize) -> IndexVec","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` distinct indices from `0..length`, and\n return them in random order (fully shuffled).","sig":null,"attributes":[{"value":"/ Randomly sample exactly `amount` distinct indices from `0..length`, and","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":321799,"byte_end":321874,"line_start":179,"line_end":179,"column_start":1,"column_end":76}},{"value":"/ return them in random order (fully shuffled).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":321875,"byte_end":321924,"line_start":180,"line_end":180,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":321925,"byte_end":321928,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ This method is used internally by the slice sampling methods, but it can","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":321929,"byte_end":322005,"line_start":182,"line_end":182,"column_start":1,"column_end":77}},{"value":"/ sometimes be useful to have the indices themselves so this is provided as","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322006,"byte_end":322083,"line_start":183,"line_end":183,"column_start":1,"column_end":78}},{"value":"/ an alternative.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322084,"byte_end":322103,"line_start":184,"line_end":184,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322104,"byte_end":322107,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ The implementation used is not specified; we automatically select the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322108,"byte_end":322181,"line_start":186,"line_end":186,"column_start":1,"column_end":74}},{"value":"/ fastest available algorithm for the `length` and `amount` parameters","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322182,"byte_end":322254,"line_start":187,"line_end":187,"column_start":1,"column_end":73}},{"value":"/ (based on detailed profiling on an Intel Haswell CPU). Roughly speaking,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322255,"byte_end":322331,"line_start":188,"line_end":188,"column_start":1,"column_end":77}},{"value":"/ complexity is `O(amount)`, except that when `amount` is small, performance","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322332,"byte_end":322410,"line_start":189,"line_end":189,"column_start":1,"column_end":79}},{"value":"/ is closer to `O(amount^2)`, and when `length` is close to `amount` then","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322411,"byte_end":322486,"line_start":190,"line_end":190,"column_start":1,"column_end":76}},{"value":"/ `O(length)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322487,"byte_end":322503,"line_start":191,"line_end":191,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322504,"byte_end":322507,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ Note that performance is significantly better over `u32` indices than over","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322508,"byte_end":322586,"line_start":193,"line_end":193,"column_start":1,"column_end":79}},{"value":"/ `u64` indices. Because of this we hide the underlying type behind an","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322587,"byte_end":322659,"line_start":194,"line_end":194,"column_start":1,"column_end":73}},{"value":"/ abstraction, `IndexVec`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322660,"byte_end":322688,"line_start":195,"line_end":195,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322689,"byte_end":322692,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ If an allocation-free `no_std` function is required, it is suggested","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322693,"byte_end":322765,"line_start":197,"line_end":197,"column_start":1,"column_end":73}},{"value":"/ to adapt the internal `sample_floyd` implementation.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322766,"byte_end":322822,"line_start":198,"line_end":198,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322823,"byte_end":322826,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ Panics if `amount > length`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":322827,"byte_end":322859,"line_start":200,"line_end":200,"column_start":1,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":823},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290807,"byte_end":290818,"line_start":58,"line_end":58,"column_start":11,"column_end":22},"name":"SliceRandom","qualname":"::seq::SliceRandom","value":"SliceRandom","parent":null,"children":[{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":827},{"krate":0,"index":829},{"krate":0,"index":831},{"krate":0,"index":837},{"krate":0,"index":843},{"krate":0,"index":845}],"decl_id":null,"docs":" Extension trait on slices, providing random mutation and sampling methods.\n \n This trait is implemented on all `[T]` slice types, providing several\n methods for choosing and shuffling elements. You must `use` this trait:\n \n ```\n use rand::seq::SliceRandom;\n \n fn main() {\n     let mut rng = rand::thread_rng();\n     let mut bytes = \"Hello, random!\".to_string().into_bytes();\n     bytes.shuffle(&mut rng);\n     let str = String::from_utf8(bytes).unwrap();\n     println!(\"{}\", str);\n }\n ```\n Example output (non-deterministic):\n ```none\n l,nmroHado !le\n ```\n","sig":null,"attributes":[{"value":"/ Extension trait on slices, providing random mutation and sampling methods.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290180,"byte_end":290258,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290259,"byte_end":290263,"line_start":39,"line_end":39,"column_start":1,"column_end":5}},{"value":"/ This trait is implemented on all `[T]` slice types, providing several","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290264,"byte_end":290337,"line_start":40,"line_end":40,"column_start":1,"column_end":74}},{"value":"/ methods for choosing and shuffling elements. You must `use` this trait:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290338,"byte_end":290413,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290414,"byte_end":290418,"line_start":42,"line_end":42,"column_start":1,"column_end":5}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290419,"byte_end":290426,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290427,"byte_end":290458,"line_start":44,"line_end":44,"column_start":1,"column_end":32}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290459,"byte_end":290463,"line_start":45,"line_end":45,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290464,"byte_end":290479,"line_start":46,"line_end":46,"column_start":1,"column_end":16}},{"value":"/     let mut rng = rand::thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290480,"byte_end":290521,"line_start":47,"line_end":47,"column_start":1,"column_end":42}},{"value":"/     let mut bytes = \"Hello, random!\".to_string().into_bytes();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290522,"byte_end":290588,"line_start":48,"line_end":48,"column_start":1,"column_end":67}},{"value":"/     bytes.shuffle(&mut rng);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290589,"byte_end":290621,"line_start":49,"line_end":49,"column_start":1,"column_end":33}},{"value":"/     let str = String::from_utf8(bytes).unwrap();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290622,"byte_end":290674,"line_start":50,"line_end":50,"column_start":1,"column_end":53}},{"value":"/     println!(\"{}\", str);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290675,"byte_end":290703,"line_start":51,"line_end":51,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290704,"byte_end":290709,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290710,"byte_end":290717,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290718,"byte_end":290757,"line_start":54,"line_end":54,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290758,"byte_end":290769,"line_start":55,"line_end":55,"column_start":1,"column_end":12}},{"value":"/ l,nmroHado !le","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290770,"byte_end":290788,"line_start":56,"line_end":56,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290789,"byte_end":290796,"line_start":57,"line_end":57,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":824},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290856,"byte_end":290860,"line_start":60,"line_end":60,"column_start":10,"column_end":14},"name":"Item","qualname":"::seq::SliceRandom::Item","value":"type Item;","parent":{"krate":0,"index":823},"children":[],"decl_id":null,"docs":" The element type.\n","sig":null,"attributes":[{"value":"/ The element type.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290825,"byte_end":290846,"line_start":59,"line_end":59,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291347,"byte_end":291353,"line_start":78,"line_end":78,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::SliceRandom::choose","value":"fn <R> (&self, rng: &mut R) -> Option<&Self::Item>","parent":{"krate":0,"index":823},"children":[],"decl_id":null,"docs":" Returns a reference to one random element of the slice, or `None` if the\n slice is empty.\n \n For slices, complexity is `O(1)`.","sig":null,"attributes":[{"value":"/ Returns a reference to one random element of the slice, or `None` if the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290867,"byte_end":290943,"line_start":62,"line_end":62,"column_start":5,"column_end":81}},{"value":"/ slice is empty.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290948,"byte_end":290967,"line_start":63,"line_end":63,"column_start":5,"column_end":24}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290972,"byte_end":290976,"line_start":64,"line_end":64,"column_start":5,"column_end":9}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":290981,"byte_end":291018,"line_start":65,"line_end":65,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291023,"byte_end":291026,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291031,"byte_end":291044,"line_start":67,"line_end":67,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291049,"byte_end":291052,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291057,"byte_end":291064,"line_start":69,"line_end":69,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291069,"byte_end":291094,"line_start":70,"line_end":70,"column_start":5,"column_end":30}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291099,"byte_end":291130,"line_start":71,"line_end":71,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291135,"byte_end":291138,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ let choices = [1, 2, 4, 8, 16, 32];","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291143,"byte_end":291182,"line_start":73,"line_end":73,"column_start":5,"column_end":44}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291187,"byte_end":291218,"line_start":74,"line_end":74,"column_start":5,"column_end":36}},{"value":"/ println!(\"{:?}\", choices.choose(&mut rng));","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291223,"byte_end":291270,"line_start":75,"line_end":75,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(choices[..0].choose(&mut rng), None);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291275,"byte_end":291327,"line_start":76,"line_end":76,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291332,"byte_end":291339,"line_start":77,"line_end":77,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291598,"byte_end":291608,"line_start":85,"line_end":85,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::seq::SliceRandom::choose_mut","value":"fn <R> (&mut self, rng: &mut R) -> Option<&mut Self::Item>","parent":{"krate":0,"index":823},"children":[],"decl_id":null,"docs":" Returns a mutable reference to one random element of the slice, or\n `None` if the slice is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to one random element of the slice, or","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291432,"byte_end":291502,"line_start":81,"line_end":81,"column_start":5,"column_end":75}},{"value":"/ `None` if the slice is empty.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291507,"byte_end":291540,"line_start":82,"line_end":82,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291545,"byte_end":291548,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291553,"byte_end":291590,"line_start":84,"line_end":84,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292643,"byte_end":292658,"line_start":113,"line_end":113,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::SliceRandom::choose_multiple","value":"fn <R> (&self, rng: &mut R, amount: usize) -> SliceChooseIter<Self, Self::Item>","parent":{"krate":0,"index":823},"children":[],"decl_id":null,"docs":" Chooses `amount` elements from the slice at random, without repetition,\n and in random order. The returned iterator is appropriate both for\n collection into a `Vec` and filling an existing buffer (see example).","sig":null,"attributes":[{"value":"/ Chooses `amount` elements from the slice at random, without repetition,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291695,"byte_end":291770,"line_start":88,"line_end":88,"column_start":5,"column_end":80}},{"value":"/ and in random order. The returned iterator is appropriate both for","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291775,"byte_end":291845,"line_start":89,"line_end":89,"column_start":5,"column_end":75}},{"value":"/ collection into a `Vec` and filling an existing buffer (see example).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291850,"byte_end":291923,"line_start":90,"line_end":90,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291928,"byte_end":291931,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ In case this API is not sufficiently flexible, use [`index::sample`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":291936,"byte_end":292009,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292014,"byte_end":292017,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is the same as [`index::sample`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292022,"byte_end":292082,"line_start":94,"line_end":94,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292087,"byte_end":292090,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292095,"byte_end":292108,"line_start":96,"line_end":96,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292113,"byte_end":292120,"line_start":97,"line_end":97,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292125,"byte_end":292156,"line_start":98,"line_end":98,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292161,"byte_end":292164,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ let mut rng = &mut rand::thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292169,"byte_end":292211,"line_start":100,"line_end":100,"column_start":5,"column_end":47}},{"value":"/ let sample = \"Hello, audience!\".as_bytes();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292216,"byte_end":292263,"line_start":101,"line_end":101,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292268,"byte_end":292271,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ // collect the results into a vector:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292276,"byte_end":292317,"line_start":103,"line_end":103,"column_start":5,"column_end":46}},{"value":"/ let v: Vec<u8> = sample.choose_multiple(&mut rng, 3).cloned().collect();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292322,"byte_end":292398,"line_start":104,"line_end":104,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292403,"byte_end":292406,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ // store in a buffer:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292411,"byte_end":292436,"line_start":106,"line_end":106,"column_start":5,"column_end":30}},{"value":"/ let mut buf = [0u8; 5];","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292441,"byte_end":292468,"line_start":107,"line_end":107,"column_start":5,"column_end":32}},{"value":"/ for (b, slot) in sample.choose_multiple(&mut rng, buf.len()).zip(buf.iter_mut()) {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292473,"byte_end":292559,"line_start":108,"line_end":108,"column_start":5,"column_end":91}},{"value":"/     *slot = *b;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292564,"byte_end":292583,"line_start":109,"line_end":109,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292588,"byte_end":292593,"line_start":110,"line_end":110,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292598,"byte_end":292605,"line_start":111,"line_end":111,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292610,"byte_end":292635,"line_start":112,"line_end":112,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293801,"byte_end":293816,"line_start":140,"line_end":140,"column_start":8,"column_end":23},"name":"choose_weighted","qualname":"::seq::SliceRandom::choose_weighted","value":"fn <R, F, B, X> (&self, rng: &mut R, weight: F) -> Result<&Self::Item, WeightedError>","parent":{"krate":0,"index":823},"children":[],"decl_id":null,"docs":" Similar to [`choose`], but where the likelihood of each outcome may be\n specified.\n \n The specified function `weight` maps each item `x` to a relative\n likelihood `weight(x)`. The probability of each item being selected is\n therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","sig":null,"attributes":[{"value":"/ Similar to [`choose`], but where the likelihood of each outcome may be","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292766,"byte_end":292840,"line_start":116,"line_end":116,"column_start":5,"column_end":79}},{"value":"/ specified.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292845,"byte_end":292859,"line_start":117,"line_end":117,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292864,"byte_end":292868,"line_start":118,"line_end":118,"column_start":5,"column_end":9}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292873,"byte_end":292941,"line_start":119,"line_end":119,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":292946,"byte_end":293020,"line_start":120,"line_end":120,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293025,"byte_end":293096,"line_start":121,"line_end":121,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293101,"byte_end":293104,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293109,"byte_end":293160,"line_start":123,"line_end":123,"column_start":5,"column_end":56}},{"value":"/ See also [`choose_weighted_mut`], [`distributions::weighted`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293165,"byte_end":293231,"line_start":124,"line_end":124,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293236,"byte_end":293239,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293244,"byte_end":293257,"line_start":126,"line_end":126,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293262,"byte_end":293265,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293270,"byte_end":293277,"line_start":128,"line_end":128,"column_start":5,"column_end":12}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293282,"byte_end":293307,"line_start":129,"line_end":129,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293312,"byte_end":293315,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ let choices = [('a', 2), ('b', 1), ('c', 1)];","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293320,"byte_end":293369,"line_start":131,"line_end":131,"column_start":5,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293374,"byte_end":293405,"line_start":132,"line_end":132,"column_start":5,"column_end":36}},{"value":"/ // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293410,"byte_end":293490,"line_start":133,"line_end":133,"column_start":5,"column_end":85}},{"value":"/ println!(\"{:?}\", choices.choose_weighted(&mut rng, |item| item.1).unwrap().0);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293495,"byte_end":293577,"line_start":134,"line_end":134,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293582,"byte_end":293589,"line_start":135,"line_end":135,"column_start":5,"column_end":12}},{"value":"/ [`choose`]: SliceRandom::choose","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293594,"byte_end":293629,"line_start":136,"line_end":136,"column_start":5,"column_end":40}},{"value":"/ [`choose_weighted_mut`]: SliceRandom::choose_weighted_mut","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293634,"byte_end":293695,"line_start":137,"line_end":137,"column_start":5,"column_end":66}},{"value":"/ [`distributions::weighted`]: crate::distributions::weighted","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293700,"byte_end":293763,"line_start":138,"line_end":138,"column_start":5,"column_end":68}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":293768,"byte_end":293793,"line_start":139,"line_end":139,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":294860,"byte_end":294879,"line_start":167,"line_end":167,"column_start":8,"column_end":27},"name":"choose_weighted_mut","qualname":"::seq::SliceRandom::choose_weighted_mut","value":"fn <R, F, B, X> (&mut self, rng: &mut R, weight: F) -> Result<&mut Self::Item, WeightedError>","parent":{"krate":0,"index":823},"children":[],"decl_id":null,"docs":" Similar to [`choose_mut`], but where the likelihood of each outcome may\n be specified.\n \n The specified function `weight` maps each item `x` to a relative\n likelihood `weight(x)`. The probability of each item being selected is\n therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","sig":null,"attributes":[{"value":"/ Similar to [`choose_mut`], but where the likelihood of each outcome may","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":294175,"byte_end":294250,"line_start":153,"line_end":153,"column_start":5,"column_end":80}},{"value":"/ be specified.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":294255,"byte_end":294272,"line_start":154,"line_end":154,"column_start":5,"column_end":22}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":294277,"byte_end":294281,"line_start":155,"line_end":155,"column_start":5,"column_end":9}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":294286,"byte_end":294354,"line_start":156,"line_end":156,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":294359,"byte_end":294433,"line_start":157,"line_end":157,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":294438,"byte_end":294509,"line_start":158,"line_end":158,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":294514,"byte_end":294517,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":294522,"byte_end":294573,"line_start":160,"line_end":160,"column_start":5,"column_end":56}},{"value":"/ See also [`choose_weighted`], [`distributions::weighted`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":294578,"byte_end":294640,"line_start":161,"line_end":161,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":294645,"byte_end":294648,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ [`choose_mut`]: SliceRandom::choose_mut","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":294653,"byte_end":294696,"line_start":163,"line_end":163,"column_start":5,"column_end":48}},{"value":"/ [`choose_weighted`]: SliceRandom::choose_weighted","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":294701,"byte_end":294754,"line_start":164,"line_end":164,"column_start":5,"column_end":58}},{"value":"/ [`distributions::weighted`]: crate::distributions::weighted","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":294759,"byte_end":294822,"line_start":165,"line_end":165,"column_start":5,"column_end":68}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":294827,"byte_end":294852,"line_start":166,"line_end":166,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295671,"byte_end":295678,"line_start":196,"line_end":196,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::seq::SliceRandom::shuffle","value":"fn <R> (&mut self, rng: &mut R) -> ()","parent":{"krate":0,"index":823},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.","sig":null,"attributes":[{"value":"/ Shuffle a mutable slice in place.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295246,"byte_end":295283,"line_start":180,"line_end":180,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295288,"byte_end":295291,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295296,"byte_end":295347,"line_start":182,"line_end":182,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295352,"byte_end":295355,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295360,"byte_end":295373,"line_start":184,"line_end":184,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295378,"byte_end":295381,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295386,"byte_end":295393,"line_start":186,"line_end":186,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295398,"byte_end":295429,"line_start":187,"line_end":187,"column_start":5,"column_end":36}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295434,"byte_end":295459,"line_start":188,"line_end":188,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295464,"byte_end":295467,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295472,"byte_end":295503,"line_start":190,"line_end":190,"column_start":5,"column_end":36}},{"value":"/ let mut y = [1, 2, 3, 4, 5];","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295508,"byte_end":295540,"line_start":191,"line_end":191,"column_start":5,"column_end":37}},{"value":"/ println!(\"Unshuffled: {:?}\", y);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295545,"byte_end":295581,"line_start":192,"line_end":192,"column_start":5,"column_end":41}},{"value":"/ y.shuffle(&mut rng);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295586,"byte_end":295610,"line_start":193,"line_end":193,"column_start":5,"column_end":29}},{"value":"/ println!(\"Shuffled:   {:?}\", y);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295615,"byte_end":295651,"line_start":194,"line_end":194,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295656,"byte_end":295663,"line_start":195,"line_end":195,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296543,"byte_end":296558,"line_start":216,"line_end":216,"column_start":8,"column_end":23},"name":"partial_shuffle","qualname":"::seq::SliceRandom::partial_shuffle","value":"fn <R> (&mut self, rng: &mut R, amount: usize) -> (&mut [Self::Item], &mut [Self::Item])","parent":{"krate":0,"index":823},"children":[],"decl_id":null,"docs":" Shuffle a slice in place, but exit early.","sig":null,"attributes":[{"value":"/ Shuffle a slice in place, but exit early.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295738,"byte_end":295783,"line_start":199,"line_end":199,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295788,"byte_end":295791,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Returns two mutable slices from the source slice. The first contains","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295796,"byte_end":295868,"line_start":201,"line_end":201,"column_start":5,"column_end":77}},{"value":"/ `amount` elements randomly permuted. The second has the remaining","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295873,"byte_end":295942,"line_start":202,"line_end":202,"column_start":5,"column_end":74}},{"value":"/ elements that are not fully shuffled.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295947,"byte_end":295988,"line_start":203,"line_end":203,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":295993,"byte_end":295996,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ This is an efficient method to select `amount` elements at random from","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296001,"byte_end":296075,"line_start":205,"line_end":205,"column_start":5,"column_end":79}},{"value":"/ the slice, provided the slice may be mutated.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296080,"byte_end":296129,"line_start":206,"line_end":206,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296134,"byte_end":296137,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ If you only need to choose elements randomly and `amount > self.len()/2`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296142,"byte_end":296218,"line_start":208,"line_end":208,"column_start":5,"column_end":81}},{"value":"/ then you may improve performance by taking","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296223,"byte_end":296269,"line_start":209,"line_end":209,"column_start":5,"column_end":51}},{"value":"/ `amount = values.len() - amount` and using only the second slice.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296274,"byte_end":296343,"line_start":210,"line_end":210,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296348,"byte_end":296351,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ If `amount` is greater than the number of elements in the slice, this","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296356,"byte_end":296429,"line_start":212,"line_end":212,"column_start":5,"column_end":78}},{"value":"/ will perform a full shuffle.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296434,"byte_end":296466,"line_start":213,"line_end":213,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296471,"byte_end":296474,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(m)` where `m = amount`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296479,"byte_end":296535,"line_start":215,"line_end":215,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":847},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297238,"byte_end":297252,"line_start":241,"line_end":241,"column_start":11,"column_end":25},"name":"IteratorRandom","qualname":"::seq::IteratorRandom","value":"IteratorRandom: Iterator + Sized","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":852}],"decl_id":null,"docs":" Extension trait on iterators, providing random sampling methods.\n \n This trait is implemented on all sized iterators, providing methods for\n choosing one or more elements. You must `use` this trait:\n \n ```\n use rand::seq::IteratorRandom;\n \n fn main() {\n     let mut rng = rand::thread_rng();\n     \n     let faces = \"😀😎😐😕😠😢\";\n     println!(\"I am {}!\", faces.chars().choose(&mut rng).unwrap());\n }\n ```\n Example output (non-deterministic):\n ```none\n I am 😀!\n ```\n","sig":null,"attributes":[{"value":"/ Extension trait on iterators, providing random sampling methods.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296688,"byte_end":296756,"line_start":222,"line_end":222,"column_start":1,"column_end":69}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296757,"byte_end":296761,"line_start":223,"line_end":223,"column_start":1,"column_end":5}},{"value":"/ This trait is implemented on all sized iterators, providing methods for","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296762,"byte_end":296837,"line_start":224,"line_end":224,"column_start":1,"column_end":76}},{"value":"/ choosing one or more elements. You must `use` this trait:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296838,"byte_end":296899,"line_start":225,"line_end":225,"column_start":1,"column_end":62}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296900,"byte_end":296904,"line_start":226,"line_end":226,"column_start":1,"column_end":5}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296905,"byte_end":296912,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::IteratorRandom;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296913,"byte_end":296947,"line_start":228,"line_end":228,"column_start":1,"column_end":35}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296948,"byte_end":296952,"line_start":229,"line_end":229,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296953,"byte_end":296968,"line_start":230,"line_end":230,"column_start":1,"column_end":16}},{"value":"/     let mut rng = rand::thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":296969,"byte_end":297010,"line_start":231,"line_end":231,"column_start":1,"column_end":42}},{"value":"/     ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297011,"byte_end":297019,"line_start":232,"line_end":232,"column_start":1,"column_end":9}},{"value":"/     let faces = \"😀😎😐😕😠😢\";","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297020,"byte_end":297067,"line_start":233,"line_end":233,"column_start":1,"column_end":30}},{"value":"/     println!(\"I am {}!\", faces.chars().choose(&mut rng).unwrap());","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297068,"byte_end":297138,"line_start":234,"line_end":234,"column_start":1,"column_end":71}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297139,"byte_end":297144,"line_start":235,"line_end":235,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297145,"byte_end":297152,"line_start":236,"line_end":236,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297153,"byte_end":297192,"line_start":237,"line_end":237,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297193,"byte_end":297204,"line_start":238,"line_end":238,"column_start":1,"column_end":12}},{"value":"/ I am 😀!","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297205,"byte_end":297219,"line_start":239,"line_end":239,"column_start":1,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297220,"byte_end":297227,"line_start":240,"line_end":240,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297887,"byte_end":297893,"line_start":254,"line_end":254,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::IteratorRandom::choose","value":"fn <R> (mut self, rng: &mut R) -> Option<Self::Item>","parent":{"krate":0,"index":847},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.\n \n Returns `None` if and only if the iterator is empty.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297277,"byte_end":297328,"line_start":242,"line_end":242,"column_start":5,"column_end":56}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297333,"byte_end":297337,"line_start":243,"line_end":243,"column_start":5,"column_end":9}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297342,"byte_end":297398,"line_start":244,"line_end":244,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297403,"byte_end":297406,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ This method uses [`Iterator::size_hint`] for optimisation. With an","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297411,"byte_end":297481,"line_start":246,"line_end":246,"column_start":5,"column_end":75}},{"value":"/ accurate hint and where [`Iterator::nth`] is a constant-time operation","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297486,"byte_end":297560,"line_start":247,"line_end":247,"column_start":5,"column_end":79}},{"value":"/ this method can offer `O(1)` performance. Where no size hint is","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297565,"byte_end":297632,"line_start":248,"line_end":248,"column_start":5,"column_end":72}},{"value":"/ available, complexity is `O(n)` where `n` is the iterator length.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297637,"byte_end":297706,"line_start":249,"line_end":249,"column_start":5,"column_end":74}},{"value":"/ Partial hints (where `lower > 0`) also improve performance.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297711,"byte_end":297774,"line_start":250,"line_end":250,"column_start":5,"column_end":68}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297779,"byte_end":297783,"line_start":251,"line_end":251,"column_start":5,"column_end":9}},{"value":"/ For slices, prefer [`SliceRandom::choose`] which guarantees `O(1)`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297788,"byte_end":297858,"line_start":252,"line_end":252,"column_start":5,"column_end":75}},{"value":"/ performance.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297863,"byte_end":297879,"line_start":253,"line_end":253,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":299955,"byte_end":299975,"line_start":312,"line_end":312,"column_start":8,"column_end":28},"name":"choose_multiple_fill","qualname":"::seq::IteratorRandom::choose_multiple_fill","value":"fn <R> (mut self, rng: &mut R, buf: &mut [Self::Item]) -> usize","parent":{"krate":0,"index":847},"children":[],"decl_id":null,"docs":" Collects values at random from the iterator into a supplied buffer\n until that buffer is filled.","sig":null,"attributes":[{"value":"/ Collects values at random from the iterator into a supplied buffer","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":299268,"byte_end":299338,"line_start":299,"line_end":299,"column_start":5,"column_end":75}},{"value":"/ until that buffer is filled.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":299343,"byte_end":299375,"line_start":300,"line_end":300,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":299380,"byte_end":299383,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":299388,"byte_end":299461,"line_start":302,"line_end":302,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":299466,"byte_end":299538,"line_start":303,"line_end":303,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":299543,"byte_end":299575,"line_start":304,"line_end":304,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":299580,"byte_end":299583,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ Returns the number of elements added to the buffer. This equals the length","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":299588,"byte_end":299666,"line_start":306,"line_end":306,"column_start":5,"column_end":83}},{"value":"/ of the buffer unless the iterator contains insufficient elements, in which","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":299671,"byte_end":299749,"line_start":307,"line_end":307,"column_start":5,"column_end":83}},{"value":"/ case this equals the number of elements available.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":299754,"byte_end":299808,"line_start":308,"line_end":308,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":299813,"byte_end":299816,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":299821,"byte_end":299886,"line_start":310,"line_end":310,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":299891,"byte_end":299947,"line_start":311,"line_end":311,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":301387,"byte_end":301402,"line_start":351,"line_end":351,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::IteratorRandom::choose_multiple","value":"fn <R> (mut self, rng: &mut R, amount: usize) -> Vec<Self::Item>","parent":{"krate":0,"index":847},"children":[],"decl_id":null,"docs":" Collects `amount` values at random from the iterator into a vector.","sig":null,"attributes":[{"value":"/ Collects `amount` values at random from the iterator into a vector.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":300658,"byte_end":300729,"line_start":336,"line_end":336,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":300734,"byte_end":300737,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `choose_multiple_fill` except for the result type.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":300742,"byte_end":300818,"line_start":338,"line_end":338,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":300823,"byte_end":300826,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":300831,"byte_end":300904,"line_start":340,"line_end":340,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":300909,"byte_end":300981,"line_start":341,"line_end":341,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":300986,"byte_end":301018,"line_start":342,"line_end":342,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":301023,"byte_end":301026,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ The length of the returned vector equals `amount` unless the iterator","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":301031,"byte_end":301104,"line_start":344,"line_end":344,"column_start":5,"column_end":78}},{"value":"/ contains insufficient elements, in which case it equals the number of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":301109,"byte_end":301182,"line_start":345,"line_end":345,"column_start":5,"column_end":78}},{"value":"/ elements available.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":301187,"byte_end":301210,"line_start":346,"line_end":346,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":301215,"byte_end":301218,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":301223,"byte_end":301288,"line_start":348,"line_end":348,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":301293,"byte_end":301349,"line_start":349,"line_end":349,"column_start":5,"column_end":61}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":301354,"byte_end":301379,"line_start":350,"line_end":350,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2085},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":305710,"byte_end":305725,"line_start":486,"line_end":486,"column_start":12,"column_end":27},"name":"SliceChooseIter","qualname":"::seq::SliceChooseIter","value":"SliceChooseIter {  }","parent":null,"children":[{"krate":0,"index":2089},{"krate":0,"index":2090},{"krate":0,"index":2091}],"decl_id":null,"docs":" An iterator over multiple slice elements.\n \n This struct is created by\n [`SliceRandom::choose_multiple`](trait.SliceRandom.html#tymethod.choose_multiple).\n","sig":null,"attributes":[{"value":"/ An iterator over multiple slice elements.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":305488,"byte_end":305533,"line_start":480,"line_end":480,"column_start":1,"column_end":46}},{"value":"/ ","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":305534,"byte_end":305538,"line_start":481,"line_end":481,"column_start":1,"column_end":5}},{"value":"/ This struct is created by","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":305539,"byte_end":305568,"line_start":482,"line_end":482,"column_start":1,"column_end":30}},{"value":"/ [`SliceRandom::choose_multiple`](trait.SliceRandom.html#tymethod.choose_multiple).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":305569,"byte_end":305655,"line_start":483,"line_end":483,"column_start":1,"column_end":87}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":305656,"byte_end":305681,"line_start":484,"line_end":484,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":913},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4721,"byte_end":4724,"line_start":146,"line_end":146,"column_start":11,"column_end":14},"name":"Rng","qualname":"::Rng","value":"Rng: RngCore","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":920},{"krate":0,"index":923},{"krate":0,"index":926},{"krate":0,"index":928},{"krate":0,"index":930},{"krate":0,"index":931}],"decl_id":null,"docs":" An automatically-implemented extension trait on [`RngCore`] providing high-level\n generic methods for sampling values and other convenience methods.","sig":null,"attributes":[{"value":"/ An automatically-implemented extension trait on [`RngCore`] providing high-level","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3193,"byte_end":3277,"line_start":109,"line_end":109,"column_start":1,"column_end":85}},{"value":"/ generic methods for sampling values and other convenience methods.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3278,"byte_end":3348,"line_start":110,"line_end":110,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3349,"byte_end":3352,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ This is the primary trait to use when generating random values.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3353,"byte_end":3420,"line_start":112,"line_end":112,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3421,"byte_end":3424,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ # Generic usage","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3425,"byte_end":3444,"line_start":114,"line_end":114,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3445,"byte_end":3448,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ The basic pattern is `fn foo<R: Rng + ?Sized>(rng: &mut R)`. Some","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3449,"byte_end":3519,"line_start":116,"line_end":116,"column_start":1,"column_end":70}},{"value":"/ things are worth noting here:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3520,"byte_end":3553,"line_start":117,"line_end":117,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3554,"byte_end":3557,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ - Since `Rng: RngCore` and every `RngCore` implements `Rng`, it makes no","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3558,"byte_end":3634,"line_start":119,"line_end":119,"column_start":1,"column_end":77}},{"value":"/   difference whether we use `R: Rng` or `R: RngCore`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3635,"byte_end":3692,"line_start":120,"line_end":120,"column_start":1,"column_end":58}},{"value":"/ - The `+ ?Sized` un-bounding allows functions to be called directly on","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3693,"byte_end":3767,"line_start":121,"line_end":121,"column_start":1,"column_end":75}},{"value":"/   type-erased references; i.e. `foo(r)` where `r: &mut RngCore`. Without","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3768,"byte_end":3844,"line_start":122,"line_end":122,"column_start":1,"column_end":77}},{"value":"/   this it would be necessary to write `foo(&mut r)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3845,"byte_end":3901,"line_start":123,"line_end":123,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3902,"byte_end":3905,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ An alternative pattern is possible: `fn foo<R: Rng>(rng: R)`. This has some","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3906,"byte_end":3985,"line_start":125,"line_end":125,"column_start":1,"column_end":80}},{"value":"/ trade-offs. It allows the argument to be consumed directly without a `&mut`","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3986,"byte_end":4065,"line_start":126,"line_end":126,"column_start":1,"column_end":80}},{"value":"/ (which is how `from_rng(thread_rng())` works); also it still works directly","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4066,"byte_end":4145,"line_start":127,"line_end":127,"column_start":1,"column_end":80}},{"value":"/ on references (including type-erased references). Unfortunately within the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4146,"byte_end":4224,"line_start":128,"line_end":128,"column_start":1,"column_end":79}},{"value":"/ function `foo` it is not known whether `rng` is a reference type or not,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4225,"byte_end":4301,"line_start":129,"line_end":129,"column_start":1,"column_end":77}},{"value":"/ hence many uses of `rng` require an extra reference, either explicitly","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4302,"byte_end":4376,"line_start":130,"line_end":130,"column_start":1,"column_end":75}},{"value":"/ (`distr.sample(&mut rng)`) or implicitly (`rng.gen()`); one may hope the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4377,"byte_end":4453,"line_start":131,"line_end":131,"column_start":1,"column_end":77}},{"value":"/ optimiser can remove redundant references later.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4454,"byte_end":4506,"line_start":132,"line_end":132,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4507,"byte_end":4510,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4511,"byte_end":4523,"line_start":134,"line_end":134,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4524,"byte_end":4527,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4528,"byte_end":4535,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ # use rand::thread_rng;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4536,"byte_end":4563,"line_start":137,"line_end":137,"column_start":1,"column_end":28}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4564,"byte_end":4582,"line_start":138,"line_end":138,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4583,"byte_end":4586,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ fn foo<R: Rng + ?Sized>(rng: &mut R) -> f32 {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4587,"byte_end":4636,"line_start":140,"line_end":140,"column_start":1,"column_end":50}},{"value":"/     rng.gen()","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4637,"byte_end":4654,"line_start":141,"line_end":141,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4655,"byte_end":4660,"line_start":142,"line_end":142,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4661,"byte_end":4664,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ # let v = foo(&mut thread_rng());","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4665,"byte_end":4702,"line_start":144,"line_end":144,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4703,"byte_end":4710,"line_start":145,"line_end":145,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5874,"byte_end":5877,"line_start":182,"line_end":182,"column_start":8,"column_end":11},"name":"gen","qualname":"::Rng::gen","value":"fn <T> (&mut self) -> T","parent":{"krate":0,"index":913},"children":[],"decl_id":null,"docs":" Return a random value supporting the [`Standard`] distribution.","sig":null,"attributes":[{"value":"/ Return a random value supporting the [`Standard`] distribution.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4740,"byte_end":4807,"line_start":147,"line_end":147,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4812,"byte_end":4815,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4820,"byte_end":4833,"line_start":149,"line_end":149,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4838,"byte_end":4841,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4846,"byte_end":4853,"line_start":151,"line_end":151,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4858,"byte_end":4890,"line_start":152,"line_end":152,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4895,"byte_end":4898,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4903,"byte_end":4934,"line_start":154,"line_end":154,"column_start":5,"column_end":36}},{"value":"/ let x: u32 = rng.gen();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4939,"byte_end":4966,"line_start":155,"line_end":155,"column_start":5,"column_end":32}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4971,"byte_end":4993,"line_start":156,"line_end":156,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", rng.gen::<(f64, bool)>());","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4998,"byte_end":5045,"line_start":157,"line_end":157,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5050,"byte_end":5057,"line_start":158,"line_end":158,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5062,"byte_end":5065,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ # Arrays and tuples","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5070,"byte_end":5093,"line_start":160,"line_end":160,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5098,"byte_end":5101,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ The `rng.gen()` method is able to generate arrays (up to 32 elements)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5106,"byte_end":5179,"line_start":162,"line_end":162,"column_start":5,"column_end":78}},{"value":"/ and tuples (up to 12 elements), so long as all element types can be","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5184,"byte_end":5255,"line_start":163,"line_end":163,"column_start":5,"column_end":76}},{"value":"/ generated.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5260,"byte_end":5274,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5279,"byte_end":5282,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ For arrays of integers, especially for those with small element types","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5287,"byte_end":5360,"line_start":166,"line_end":166,"column_start":5,"column_end":78}},{"value":"/ (< 64 bit), it will likely be faster to instead use [`Rng::fill`].","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5365,"byte_end":5435,"line_start":167,"line_end":167,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5440,"byte_end":5443,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5448,"byte_end":5455,"line_start":169,"line_end":169,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5460,"byte_end":5492,"line_start":170,"line_end":170,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5497,"byte_end":5500,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5505,"byte_end":5536,"line_start":172,"line_end":172,"column_start":5,"column_end":36}},{"value":"/ let tuple: (u8, i32, char) = rng.gen(); // arbitrary tuple support","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5541,"byte_end":5611,"line_start":173,"line_end":173,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5616,"byte_end":5619,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ let arr1: [f32; 32] = rng.gen();        // array construction","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5624,"byte_end":5689,"line_start":175,"line_end":175,"column_start":5,"column_end":70}},{"value":"/ let mut arr2 = [0u8; 128];","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5694,"byte_end":5724,"line_start":176,"line_end":176,"column_start":5,"column_end":35}},{"value":"/ rng.fill(&mut arr2);                    // array fill","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5729,"byte_end":5786,"line_start":177,"line_end":177,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5791,"byte_end":5798,"line_start":178,"line_end":178,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5803,"byte_end":5806,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5811,"byte_end":5852,"line_start":180,"line_end":180,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5857,"byte_end":5866,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6752,"byte_end":6761,"line_start":211,"line_end":211,"column_start":8,"column_end":17},"name":"gen_range","qualname":"::Rng::gen_range","value":"fn <T, B1, B2> (&mut self, low: B1, high: B2) -> T","parent":{"krate":0,"index":913},"children":[],"decl_id":null,"docs":" Generate a random value in the range [`low`, `high`), i.e. inclusive of\n `low` and exclusive of `high`.","sig":null,"attributes":[{"value":"/ Generate a random value in the range [`low`, `high`), i.e. inclusive of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":5976,"byte_end":6051,"line_start":187,"line_end":187,"column_start":5,"column_end":80}},{"value":"/ `low` and exclusive of `high`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6056,"byte_end":6090,"line_start":188,"line_end":188,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6095,"byte_end":6098,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ This function is optimised for the case that only a single sample is","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6103,"byte_end":6175,"line_start":190,"line_end":190,"column_start":5,"column_end":77}},{"value":"/ made from the given range. See also the [`Uniform`] distribution","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6180,"byte_end":6248,"line_start":191,"line_end":191,"column_start":5,"column_end":73}},{"value":"/ type which may be faster if sampling from the same range repeatedly.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6253,"byte_end":6325,"line_start":192,"line_end":192,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6330,"byte_end":6333,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6338,"byte_end":6350,"line_start":194,"line_end":194,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6355,"byte_end":6358,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Panics if `low >= high`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6363,"byte_end":6391,"line_start":196,"line_end":196,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6396,"byte_end":6399,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6404,"byte_end":6417,"line_start":198,"line_end":198,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6422,"byte_end":6425,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6430,"byte_end":6437,"line_start":200,"line_end":200,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6442,"byte_end":6474,"line_start":201,"line_end":201,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6479,"byte_end":6482,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6487,"byte_end":6518,"line_start":203,"line_end":203,"column_start":5,"column_end":36}},{"value":"/ let n: u32 = rng.gen_range(0, 10);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6523,"byte_end":6561,"line_start":204,"line_end":204,"column_start":5,"column_end":43}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6566,"byte_end":6588,"line_start":205,"line_end":205,"column_start":5,"column_end":27}},{"value":"/ let m: f64 = rng.gen_range(-40.0f64, 1.3e5f64);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6593,"byte_end":6644,"line_start":206,"line_end":206,"column_start":5,"column_end":56}},{"value":"/ println!(\"{}\", m);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6649,"byte_end":6671,"line_start":207,"line_end":207,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6676,"byte_end":6683,"line_start":208,"line_end":208,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6688,"byte_end":6691,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ [`Uniform`]: distributions::uniform::Uniform","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6696,"byte_end":6744,"line_start":210,"line_end":210,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7451,"byte_end":7457,"line_start":233,"line_end":233,"column_start":8,"column_end":14},"name":"sample","qualname":"::Rng::sample","value":"fn <T, D> (&mut self, distr: D) -> T","parent":{"krate":0,"index":913},"children":[],"decl_id":null,"docs":" Sample a new value, using the given distribution.","sig":null,"attributes":[{"value":"/ Sample a new value, using the given distribution.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":6975,"byte_end":7028,"line_start":219,"line_end":219,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7033,"byte_end":7036,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ ### Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7041,"byte_end":7056,"line_start":221,"line_end":221,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7061,"byte_end":7064,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7069,"byte_end":7076,"line_start":223,"line_end":223,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7081,"byte_end":7113,"line_start":224,"line_end":224,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7118,"byte_end":7155,"line_start":225,"line_end":225,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7160,"byte_end":7163,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7168,"byte_end":7199,"line_start":227,"line_end":227,"column_start":5,"column_end":36}},{"value":"/ let x = rng.sample(Uniform::new(10u32, 15));","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7204,"byte_end":7252,"line_start":228,"line_end":228,"column_start":5,"column_end":53}},{"value":"/ // Type annotation requires two types, the type and distribution; the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7257,"byte_end":7330,"line_start":229,"line_end":229,"column_start":5,"column_end":78}},{"value":"/ // distribution can be inferred.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7335,"byte_end":7371,"line_start":230,"line_end":230,"column_start":5,"column_end":41}},{"value":"/ let y = rng.sample::<u16, _>(Uniform::new(10, 15));","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7376,"byte_end":7431,"line_start":231,"line_end":231,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7436,"byte_end":7443,"line_start":232,"line_end":232,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8771,"byte_end":8782,"line_start":270,"line_end":270,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::Rng::sample_iter","value":"fn <T, D> (self, distr: D) -> distributions::DistIter<D, Self, T>","parent":{"krate":0,"index":913},"children":[],"decl_id":null,"docs":" Create an iterator that generates values using the given distribution.","sig":null,"attributes":[{"value":"/ Create an iterator that generates values using the given distribution.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7547,"byte_end":7621,"line_start":237,"line_end":237,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7626,"byte_end":7629,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes its arguments by value. This works since","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7634,"byte_end":7708,"line_start":239,"line_end":239,"column_start":5,"column_end":79}},{"value":"/ `(&mut R): Rng where R: Rng` and","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7713,"byte_end":7749,"line_start":240,"line_end":240,"column_start":5,"column_end":41}},{"value":"/ `(&D): Distribution where D: Distribution`,","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7754,"byte_end":7801,"line_start":241,"line_end":241,"column_start":5,"column_end":52}},{"value":"/ however borrowing is not automatic hence `rng.sample_iter(...)` may","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7806,"byte_end":7877,"line_start":242,"line_end":242,"column_start":5,"column_end":76}},{"value":"/ need to be replaced with `(&mut rng).sample_iter(...)`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7882,"byte_end":7941,"line_start":243,"line_end":243,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7946,"byte_end":7949,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7954,"byte_end":7967,"line_start":245,"line_end":245,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7972,"byte_end":7975,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7980,"byte_end":7987,"line_start":247,"line_end":247,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":7992,"byte_end":8024,"line_start":248,"line_end":248,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::{Alphanumeric, Uniform, Standard};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8029,"byte_end":8092,"line_start":249,"line_end":249,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8097,"byte_end":8100,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ let rng = thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8105,"byte_end":8132,"line_start":251,"line_end":251,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8137,"byte_end":8140,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8145,"byte_end":8168,"line_start":253,"line_end":253,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = rng.sample_iter(Standard).take(16).collect();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8173,"byte_end":8240,"line_start":254,"line_end":254,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8245,"byte_end":8248,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8253,"byte_end":8267,"line_start":256,"line_end":256,"column_start":5,"column_end":19}},{"value":"/ let s: String = rng.sample_iter(Alphanumeric).take(7).collect();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8272,"byte_end":8340,"line_start":257,"line_end":257,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8345,"byte_end":8348,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ // Combined values","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8353,"byte_end":8375,"line_start":259,"line_end":259,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", rng.sample_iter(Standard).take(5)","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8380,"byte_end":8434,"line_start":260,"line_end":260,"column_start":5,"column_end":59}},{"value":"/                              .collect::<Vec<(f64, bool)>>());","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8439,"byte_end":8504,"line_start":261,"line_end":261,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8509,"byte_end":8512,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8517,"byte_end":8537,"line_start":263,"line_end":263,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8542,"byte_end":8591,"line_start":264,"line_end":264,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = rng.sample_iter(die_range);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8596,"byte_end":8646,"line_start":265,"line_end":265,"column_start":5,"column_end":55}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8651,"byte_end":8692,"line_start":266,"line_end":266,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8697,"byte_end":8741,"line_start":267,"line_end":267,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8746,"byte_end":8751,"line_start":268,"line_end":268,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8756,"byte_end":8763,"line_start":269,"line_end":269,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9802,"byte_end":9806,"line_start":297,"line_end":297,"column_start":8,"column_end":12},"name":"fill","qualname":"::Rng::fill","value":"fn <T> (&mut self, dest: &mut T) -> ()","parent":{"krate":0,"index":913},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random bytes (uniform value distribution),\n where `dest` is any type supporting [`AsByteSliceMut`], namely slices\n and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).","sig":null,"attributes":[{"value":"/ Fill `dest` entirely with random bytes (uniform value distribution),","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":8931,"byte_end":9003,"line_start":275,"line_end":275,"column_start":5,"column_end":77}},{"value":"/ where `dest` is any type supporting [`AsByteSliceMut`], namely slices","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9008,"byte_end":9081,"line_start":276,"line_end":276,"column_start":5,"column_end":78}},{"value":"/ and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9086,"byte_end":9157,"line_start":277,"line_end":277,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9162,"byte_end":9165,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ On big-endian platforms this performs byte-swapping to ensure","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9170,"byte_end":9235,"line_start":279,"line_end":279,"column_start":5,"column_end":70}},{"value":"/ portability of results from reproducible generators.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9240,"byte_end":9296,"line_start":280,"line_end":280,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9301,"byte_end":9304,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ This uses [`fill_bytes`] internally which may handle some RNG errors","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9309,"byte_end":9381,"line_start":282,"line_end":282,"column_start":5,"column_end":77}},{"value":"/ implicitly (e.g. waiting if the OS generator is not ready), but panics","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9386,"byte_end":9460,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ on other errors. See also [`try_fill`] which returns errors.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9465,"byte_end":9529,"line_start":284,"line_end":284,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9534,"byte_end":9537,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9542,"byte_end":9555,"line_start":286,"line_end":286,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9560,"byte_end":9563,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9568,"byte_end":9575,"line_start":288,"line_end":288,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9580,"byte_end":9612,"line_start":289,"line_end":289,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9617,"byte_end":9620,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ let mut arr = [0i8; 20];","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9625,"byte_end":9653,"line_start":291,"line_end":291,"column_start":5,"column_end":33}},{"value":"/ thread_rng().fill(&mut arr[..]);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9658,"byte_end":9694,"line_start":292,"line_end":292,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9699,"byte_end":9706,"line_start":293,"line_end":293,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9711,"byte_end":9714,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9719,"byte_end":9758,"line_start":295,"line_end":295,"column_start":5,"column_end":44}},{"value":"/ [`try_fill`]: Rng::try_fill","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9763,"byte_end":9794,"line_start":296,"line_end":296,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10861,"byte_end":10869,"line_start":329,"line_end":329,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::Rng::try_fill","value":"fn <T> (&mut self, dest: &mut T) -> Result<(), Error>","parent":{"krate":0,"index":913},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random bytes (uniform value distribution),\n where `dest` is any type supporting [`AsByteSliceMut`], namely slices\n and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).","sig":null,"attributes":[{"value":"/ Fill `dest` entirely with random bytes (uniform value distribution),","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":9946,"byte_end":10018,"line_start":302,"line_end":302,"column_start":5,"column_end":77}},{"value":"/ where `dest` is any type supporting [`AsByteSliceMut`], namely slices","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10023,"byte_end":10096,"line_start":303,"line_end":303,"column_start":5,"column_end":78}},{"value":"/ and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10101,"byte_end":10172,"line_start":304,"line_end":304,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10177,"byte_end":10180,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ On big-endian platforms this performs byte-swapping to ensure","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10185,"byte_end":10250,"line_start":306,"line_end":306,"column_start":5,"column_end":70}},{"value":"/ portability of results from reproducible generators.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10255,"byte_end":10311,"line_start":307,"line_end":307,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10316,"byte_end":10319,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`fill`] except that it uses [`try_fill_bytes`]","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10324,"byte_end":10396,"line_start":309,"line_end":309,"column_start":5,"column_end":77}},{"value":"/ internally and forwards RNG errors.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10401,"byte_end":10440,"line_start":310,"line_end":310,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10445,"byte_end":10448,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10453,"byte_end":10466,"line_start":312,"line_end":312,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10471,"byte_end":10474,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10479,"byte_end":10486,"line_start":314,"line_end":314,"column_start":5,"column_end":12}},{"value":"/ # use rand::Error;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10491,"byte_end":10513,"line_start":315,"line_end":315,"column_start":5,"column_end":27}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10518,"byte_end":10550,"line_start":316,"line_end":316,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10555,"byte_end":10558,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ # fn try_inner() -> Result<(), Error> {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10563,"byte_end":10606,"line_start":318,"line_end":318,"column_start":5,"column_end":48}},{"value":"/ let mut arr = [0u64; 4];","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10611,"byte_end":10639,"line_start":319,"line_end":319,"column_start":5,"column_end":33}},{"value":"/ thread_rng().try_fill(&mut arr[..])?;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10644,"byte_end":10685,"line_start":320,"line_end":320,"column_start":5,"column_end":46}},{"value":"/ # Ok(())","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10690,"byte_end":10702,"line_start":321,"line_end":321,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10707,"byte_end":10714,"line_start":322,"line_end":322,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10719,"byte_end":10722,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ # try_inner().unwrap()","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10727,"byte_end":10753,"line_start":324,"line_end":324,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10758,"byte_end":10765,"line_start":325,"line_end":325,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10770,"byte_end":10773,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10778,"byte_end":10825,"line_start":327,"line_end":327,"column_start":5,"column_end":52}},{"value":"/ [`fill`]: Rng::fill","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":10830,"byte_end":10853,"line_start":328,"line_end":328,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11581,"byte_end":11589,"line_start":355,"line_end":355,"column_start":8,"column_end":16},"name":"gen_bool","qualname":"::Rng::gen_bool","value":"fn (&mut self, p: f64) -> bool","parent":{"krate":0,"index":913},"children":[],"decl_id":null,"docs":" Return a bool with a probability `p` of being true.","sig":null,"attributes":[{"value":"/ Return a bool with a probability `p` of being true.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11050,"byte_end":11105,"line_start":335,"line_end":335,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11110,"byte_end":11113,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11118,"byte_end":11185,"line_start":337,"line_end":337,"column_start":5,"column_end":72}},{"value":"/ sampling from the same probability repeatedly.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11190,"byte_end":11240,"line_start":338,"line_end":338,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11245,"byte_end":11248,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11253,"byte_end":11266,"line_start":340,"line_end":340,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11271,"byte_end":11274,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11279,"byte_end":11286,"line_start":342,"line_end":342,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11291,"byte_end":11323,"line_start":343,"line_end":343,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11328,"byte_end":11331,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11336,"byte_end":11367,"line_start":345,"line_end":345,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_bool(1.0 / 3.0));","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11372,"byte_end":11416,"line_start":346,"line_end":346,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11421,"byte_end":11428,"line_start":347,"line_end":347,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11433,"byte_end":11436,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11441,"byte_end":11453,"line_start":349,"line_end":349,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11458,"byte_end":11461,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ If `p < 0` or `p > 1`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11466,"byte_end":11492,"line_start":351,"line_end":351,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11497,"byte_end":11500,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::bernoulli::Bernoulli","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11505,"byte_end":11559,"line_start":353,"line_end":353,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11564,"byte_end":11573,"line_start":354,"line_end":354,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12576,"byte_end":12585,"line_start":384,"line_end":384,"column_start":8,"column_end":17},"name":"gen_ratio","qualname":"::Rng::gen_ratio","value":"fn (&mut self, numerator: u32, denominator: u32) -> bool","parent":{"krate":0,"index":913},"children":[],"decl_id":null,"docs":" Return a bool with a probability of `numerator/denominator` of being\n true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n returning true. If `numerator == denominator`, then the returned value\n is guaranteed to be `true`. If `numerator == 0`, then the returned\n value is guaranteed to be `false`.","sig":null,"attributes":[{"value":"/ Return a bool with a probability of `numerator/denominator` of being","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11712,"byte_end":11784,"line_start":360,"line_end":360,"column_start":5,"column_end":77}},{"value":"/ true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11789,"byte_end":11860,"line_start":361,"line_end":361,"column_start":5,"column_end":76}},{"value":"/ returning true. If `numerator == denominator`, then the returned value","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11865,"byte_end":11939,"line_start":362,"line_end":362,"column_start":5,"column_end":79}},{"value":"/ is guaranteed to be `true`. If `numerator == 0`, then the returned","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":11944,"byte_end":12014,"line_start":363,"line_end":363,"column_start":5,"column_end":75}},{"value":"/ value is guaranteed to be `false`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12019,"byte_end":12057,"line_start":364,"line_end":364,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12062,"byte_end":12065,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12070,"byte_end":12137,"line_start":366,"line_end":366,"column_start":5,"column_end":72}},{"value":"/ sampling from the same `numerator` and `denominator` repeatedly.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12142,"byte_end":12210,"line_start":367,"line_end":367,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12215,"byte_end":12218,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12223,"byte_end":12235,"line_start":369,"line_end":369,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12240,"byte_end":12243,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ If `denominator == 0` or `numerator > denominator`.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12248,"byte_end":12303,"line_start":371,"line_end":371,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12308,"byte_end":12311,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12316,"byte_end":12329,"line_start":373,"line_end":373,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12334,"byte_end":12337,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12342,"byte_end":12349,"line_start":375,"line_end":375,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12354,"byte_end":12386,"line_start":376,"line_end":376,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12391,"byte_end":12394,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12399,"byte_end":12430,"line_start":378,"line_end":378,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_ratio(2, 3));","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12435,"byte_end":12475,"line_start":379,"line_end":379,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12480,"byte_end":12487,"line_start":380,"line_end":380,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12492,"byte_end":12495,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::bernoulli::Bernoulli","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12500,"byte_end":12554,"line_start":382,"line_end":382,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12559,"byte_end":12568,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":934},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12926,"byte_end":12940,"line_start":395,"line_end":395,"column_start":11,"column_end":25},"name":"AsByteSliceMut","qualname":"::AsByteSliceMut","value":"AsByteSliceMut","parent":null,"children":[{"krate":0,"index":935},{"krate":0,"index":936}],"decl_id":null,"docs":" Trait for casting types to byte slices","sig":null,"attributes":[{"value":"/ Trait for casting types to byte slices","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12800,"byte_end":12842,"line_start":392,"line_end":392,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12843,"byte_end":12846,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ This is used by the [`Rng::fill`] and [`Rng::try_fill`] methods.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12847,"byte_end":12915,"line_start":394,"line_end":394,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":13009,"byte_end":13026,"line_start":397,"line_end":397,"column_start":8,"column_end":25},"name":"as_byte_slice_mut","qualname":"::AsByteSliceMut::as_byte_slice_mut","value":"fn (&mut self) -> &mut [u8]","parent":{"krate":0,"index":934},"children":[],"decl_id":null,"docs":" Return a mutable reference to self as a byte slice\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to self as a byte slice","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12947,"byte_end":13001,"line_start":396,"line_end":396,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":13139,"byte_end":13144,"line_start":400,"line_end":400,"column_start":8,"column_end":13},"name":"to_le","qualname":"::AsByteSliceMut::to_le","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":934},"children":[],"decl_id":null,"docs":" Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).\n","sig":null,"attributes":[{"value":"/ Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":13057,"byte_end":13131,"line_start":399,"line_end":399,"column_start":5,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":942},"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":17284,"byte_end":17290,"line_start":545,"line_end":545,"column_start":8,"column_end":14},"name":"random","qualname":"::random","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Generates a random value using the thread-local random number generator.","sig":null,"attributes":[{"value":"/ Generates a random value using the thread-local random number generator.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16229,"byte_end":16305,"line_start":501,"line_end":501,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16306,"byte_end":16309,"line_start":502,"line_end":502,"column_start":1,"column_end":4}},{"value":"/ This is simply a shortcut for `thread_rng().gen()`. See [`thread_rng`] for","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16310,"byte_end":16388,"line_start":503,"line_end":503,"column_start":1,"column_end":79}},{"value":"/ documentation of the entropy source and [`Standard`] for documentation of","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16389,"byte_end":16466,"line_start":504,"line_end":504,"column_start":1,"column_end":78}},{"value":"/ distributions and type-specific generation.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16467,"byte_end":16514,"line_start":505,"line_end":505,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16515,"byte_end":16518,"line_start":506,"line_end":506,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16519,"byte_end":16533,"line_start":507,"line_end":507,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16534,"byte_end":16537,"line_start":508,"line_end":508,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16538,"byte_end":16545,"line_start":509,"line_end":509,"column_start":1,"column_end":8}},{"value":"/ let x = rand::random::<u8>();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16546,"byte_end":16579,"line_start":510,"line_end":510,"column_start":1,"column_end":34}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16580,"byte_end":16602,"line_start":511,"line_end":511,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16603,"byte_end":16606,"line_start":512,"line_end":512,"column_start":1,"column_end":4}},{"value":"/ let y = rand::random::<f64>();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16607,"byte_end":16641,"line_start":513,"line_end":513,"column_start":1,"column_end":35}},{"value":"/ println!(\"{}\", y);","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16642,"byte_end":16664,"line_start":514,"line_end":514,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16665,"byte_end":16668,"line_start":515,"line_end":515,"column_start":1,"column_end":4}},{"value":"/ if rand::random() { // generates a boolean","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16669,"byte_end":16715,"line_start":516,"line_end":516,"column_start":1,"column_end":47}},{"value":"/     println!(\"Better lucky than good!\");","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16716,"byte_end":16760,"line_start":517,"line_end":517,"column_start":1,"column_end":45}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16761,"byte_end":16766,"line_start":518,"line_end":518,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16767,"byte_end":16774,"line_start":519,"line_end":519,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16775,"byte_end":16778,"line_start":520,"line_end":520,"column_start":1,"column_end":4}},{"value":"/ If you're calling `random()` in a loop, caching the generator as in the","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16779,"byte_end":16854,"line_start":521,"line_end":521,"column_start":1,"column_end":76}},{"value":"/ following example can increase performance.","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16855,"byte_end":16902,"line_start":522,"line_end":522,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16903,"byte_end":16906,"line_start":523,"line_end":523,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16907,"byte_end":16914,"line_start":524,"line_end":524,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16915,"byte_end":16933,"line_start":525,"line_end":525,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16934,"byte_end":16937,"line_start":526,"line_end":526,"column_start":1,"column_end":4}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16938,"byte_end":16968,"line_start":527,"line_end":527,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16969,"byte_end":16972,"line_start":528,"line_end":528,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":16973,"byte_end":17000,"line_start":529,"line_end":529,"column_start":1,"column_end":28}},{"value":"/     *x = rand::random()","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":17001,"byte_end":17028,"line_start":530,"line_end":530,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":17029,"byte_end":17034,"line_start":531,"line_end":531,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":17035,"byte_end":17038,"line_start":532,"line_end":532,"column_start":1,"column_end":4}},{"value":"/ // can be made faster by caching thread_rng","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":17039,"byte_end":17086,"line_start":533,"line_end":533,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":17087,"byte_end":17090,"line_start":534,"line_end":534,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":17091,"byte_end":17128,"line_start":535,"line_end":535,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":17129,"byte_end":17132,"line_start":536,"line_end":536,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":17133,"byte_end":17160,"line_start":537,"line_end":537,"column_start":1,"column_end":28}},{"value":"/     *x = rng.gen();","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":17161,"byte_end":17184,"line_start":538,"line_end":538,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":17185,"byte_end":17190,"line_start":539,"line_end":539,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":17191,"byte_end":17198,"line_start":540,"line_end":540,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":17199,"byte_end":17202,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":17203,"byte_end":17244,"line_start":542,"line_end":542,"column_start":1,"column_end":42}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":17245,"byte_end":17266,"line_start":543,"line_end":543,"column_start":1,"column_end":22}},{"value":"inline","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":17267,"byte_end":17276,"line_start":544,"line_end":544,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":44054,"byte_end":44061,"line_start":167,"line_end":167,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":44829,"byte_end":44836,"line_start":187,"line_end":187,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":48045,"byte_end":48052,"line_start":269,"line_end":269,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":48222,"byte_end":48229,"line_start":275,"line_end":275,"column_start":65,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":48802,"byte_end":48810,"line_start":292,"line_end":292,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":71426,"byte_end":71434,"line_start":840,"line_end":840,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":71500,"byte_end":71515,"line_start":844,"line_end":844,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92041,"byte_end":92050,"line_start":71,"line_end":71,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":93721,"byte_end":93730,"line_start":110,"line_end":110,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":113003,"byte_end":113016,"line_start":71,"line_end":71,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":115299,"byte_end":115306,"line_start":133,"line_end":133,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":118485,"byte_end":118498,"line_start":229,"line_end":229,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":118872,"byte_end":118885,"line_start":240,"line_end":240,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":119340,"byte_end":119353,"line_start":255,"line_end":255,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99337,"byte_end":99350,"line_start":91,"line_end":91,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":104219,"byte_end":104232,"line_start":224,"line_end":224,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":109574,"byte_end":109587,"line_start":367,"line_end":367,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":109982,"byte_end":109995,"line_start":379,"line_end":379,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":110163,"byte_end":110176,"line_start":388,"line_end":388,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_sphere.rs","byte_start":128352,"byte_end":128369,"line_start":26,"line_end":26,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_sphere.rs","byte_start":128551,"byte_end":128568,"line_start":34,"line_end":34,"column_start":33,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131566,"byte_end":131576,"line_start":27,"line_end":27,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131737,"byte_end":131747,"line_start":35,"line_end":35,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":136345,"byte_end":136350,"line_start":84,"line_end":84,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":136986,"byte_end":137001,"line_start":105,"line_end":105,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":137219,"byte_end":137234,"line_start":114,"line_end":114,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":137472,"byte_end":137477,"line_start":125,"line_end":125,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":137738,"byte_end":137753,"line_start":134,"line_end":134,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":137955,"byte_end":137970,"line_start":141,"line_end":141,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":139318,"byte_end":139328,"line_start":184,"line_end":184,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":139745,"byte_end":139755,"line_start":197,"line_end":197,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":140575,"byte_end":140582,"line_start":225,"line_end":225,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":141049,"byte_end":141056,"line_start":239,"line_end":239,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":141441,"byte_end":141449,"line_start":254,"line_end":254,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":141774,"byte_end":141782,"line_start":265,"line_end":265,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":142184,"byte_end":142188,"line_start":280,"line_end":280,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":142575,"byte_end":142579,"line_start":294,"line_end":294,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":145567,"byte_end":145581,"line_start":33,"line_end":33,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147196,"byte_end":147202,"line_start":84,"line_end":84,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147609,"byte_end":147615,"line_start":100,"line_end":100,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":148065,"byte_end":148074,"line_start":118,"line_end":118,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":148480,"byte_end":148489,"line_start":131,"line_end":131,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":150801,"byte_end":150805,"line_start":36,"line_end":36,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":151755,"byte_end":151758,"line_start":68,"line_end":68,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":152066,"byte_end":152069,"line_start":78,"line_end":78,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/pareto.rs","byte_start":153425,"byte_end":153431,"line_start":23,"line_end":23,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/pareto.rs","byte_start":153921,"byte_end":153927,"line_start":38,"line_end":38,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/poisson.rs","byte_start":155537,"byte_end":155544,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/poisson.rs","byte_start":156073,"byte_end":156080,"line_start":48,"line_end":48,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/binomial.rs","byte_start":160606,"byte_end":160614,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/binomial.rs","byte_start":161240,"byte_end":161248,"line_start":49,"line_end":49,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/cauchy.rs","byte_start":171769,"byte_end":171775,"line_start":29,"line_end":29,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/cauchy.rs","byte_start":172168,"byte_end":172174,"line_start":42,"line_end":42,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175148,"byte_end":175157,"line_start":30,"line_end":30,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175963,"byte_end":175972,"line_start":63,"line_end":63,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/triangular.rs","byte_start":178240,"byte_end":178250,"line_start":24,"line_end":24,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/triangular.rs","byte_start":178684,"byte_end":178694,"line_start":41,"line_end":41,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weibull.rs","byte_start":180501,"byte_end":180508,"line_start":23,"line_end":23,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weibull.rs","byte_start":180866,"byte_end":180873,"line_start":35,"line_end":35,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/integer.rs","byte_start":194755,"byte_end":194763,"line_start":22,"line_end":22,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/integer.rs","byte_start":194904,"byte_end":194912,"line_start":29,"line_end":29,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/integer.rs","byte_start":195055,"byte_end":195063,"line_start":36,"line_end":36,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/integer.rs","byte_start":195199,"byte_end":195207,"line_start":43,"line_end":43,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/integer.rs","byte_start":195382,"byte_end":195390,"line_start":51,"line_end":51,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/integer.rs","byte_start":195685,"byte_end":195693,"line_start":61,"line_end":61,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203641,"byte_end":203649,"line_start":42,"line_end":42,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":204398,"byte_end":204410,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":205200,"byte_end":205208,"line_start":83,"line_end":83,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":206389,"byte_end":206397,"line_start":118,"line_end":118,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":207666,"byte_end":207674,"line_start":158,"line_end":158,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":208018,"byte_end":208026,"line_start":170,"line_end":170,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":32481,"byte_end":32489,"line_start":249,"line_end":249,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33052,"byte_end":33060,"line_start":267,"line_end":267,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":262331,"byte_end":262338,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":262512,"byte_end":262519,"line_start":60,"line_end":60,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":263283,"byte_end":263292,"line_start":85,"line_end":85,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":263433,"byte_end":263442,"line_start":91,"line_end":91,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268312,"byte_end":268324,"line_start":83,"line_end":83,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":620},{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":269148,"byte_end":269160,"line_start":105,"line_end":105,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":269694,"byte_end":269706,"line_start":128,"line_end":128,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":270030,"byte_end":270042,"line_start":139,"line_end":139,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":270328,"byte_end":270341,"line_start":152,"line_end":152,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":271192,"byte_end":271205,"line_start":174,"line_end":174,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":645},{"krate":0,"index":647},{"krate":0,"index":649},{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":273810,"byte_end":273823,"line_start":249,"line_end":249,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":274259,"byte_end":274272,"line_start":264,"line_end":264,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278262,"byte_end":278272,"line_start":28,"line_end":28,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278624,"byte_end":278634,"line_start":39,"line_end":39,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278716,"byte_end":278726,"line_start":45,"line_end":45,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":279111,"byte_end":279121,"line_start":63,"line_end":63,"column_start":20,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280333,"byte_end":280340,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":697}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280603,"byte_end":280610,"line_start":41,"line_end":41,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":282757,"byte_end":282763,"line_start":39,"line_end":39,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":283219,"byte_end":283225,"line_start":61,"line_end":61,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":283534,"byte_end":283540,"line_start":75,"line_end":75,"column_start":20,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":288042,"byte_end":288051,"line_start":86,"line_end":86,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":288149,"byte_end":288158,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":288655,"byte_end":288664,"line_start":112,"line_end":112,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":317721,"byte_end":317729,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":765},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":319473,"byte_end":319481,"line_start":90,"line_end":90,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":768}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":320041,"byte_end":320049,"line_start":104,"line_end":104,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":773}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":320161,"byte_end":320169,"line_start":111,"line_end":111,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":320462,"byte_end":320474,"line_start":125,"line_end":125,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":321008,"byte_end":321020,"line_start":145,"line_end":145,"column_start":32,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":321236,"byte_end":321252,"line_start":154,"line_end":154,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":321777,"byte_end":321793,"line_start":176,"line_end":176,"column_start":28,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":305455,"byte_end":305456,"line_start":477,"line_end":477,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":305958,"byte_end":305973,"line_start":493,"line_end":493,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":306425,"byte_end":306440,"line_start":508,"line_end":508,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12794,"byte_end":12795,"line_start":390,"line_end":390,"column_start":35,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":2948,"byte_end":2961,"line_start":98,"line_end":98,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":14}},{"kind":"Mod","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":28636,"byte_end":28643,"line_start":140,"line_end":140,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":50}},{"kind":"Mod","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":28692,"byte_end":28700,"line_start":142,"line_end":142,"column_start":33,"column_end":41},"ref_id":{"krate":0,"index":130}},{"kind":"Mod","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":96502,"byte_end":96514,"line_start":19,"line_end":19,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":131}},{"kind":"Mod","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":2971,"byte_end":2978,"line_start":99,"line_end":99,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":568}},{"kind":"Mod","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":2988,"byte_end":2992,"line_start":100,"line_end":100,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":583}},{"kind":"Mod","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259704,"byte_end":259711,"line_start":101,"line_end":101,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":584}},{"kind":"Mod","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mod.rs","byte_start":259757,"byte_end":259761,"line_start":104,"line_end":104,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":691}},{"kind":"Mod","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":3002,"byte_end":3005,"line_start":101,"line_end":101,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":748}},{"kind":"Mod","span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":289875,"byte_end":289880,"line_start":28,"line_end":28,"column_start":33,"column_end":38},"ref_id":{"krate":0,"index":749}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":44054,"byte_end":44061,"line_start":167,"line_end":167,"column_start":24,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":44829,"byte_end":44836,"line_start":187,"line_end":187,"column_start":44,"column_end":51},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":944},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45252,"byte_end":45257,"line_start":200,"line_end":200,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1885},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":45832,"byte_end":45837,"line_start":215,"line_end":215,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1885},"to":{"krate":0,"index":74}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":48045,"byte_end":48052,"line_start":269,"line_end":269,"column_start":56,"column_end":63},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":944},"to":{"krate":2,"index":1804}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":48222,"byte_end":48229,"line_start":275,"line_end":275,"column_start":65,"column_end":72},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":944},"to":{"krate":2,"index":1804}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":48802,"byte_end":48810,"line_start":292,"line_end":292,"column_start":43,"column_end":51},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":98},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":71426,"byte_end":71434,"line_start":840,"line_end":840,"column_start":24,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":2,"index":31578},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/uniform.rs","byte_start":71500,"byte_end":71515,"line_start":844,"line_end":844,"column_start":25,"column_end":40},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1205},"to":{"krate":0,"index":74}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":92041,"byte_end":92050,"line_start":71,"line_end":71,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/bernoulli.rs","byte_start":93721,"byte_end":93730,"line_start":110,"line_end":110,"column_start":29,"column_end":38},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1228},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":113003,"byte_end":113016,"line_start":71,"line_end":71,"column_start":17,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":148},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":115299,"byte_end":115306,"line_start":133,"line_end":133,"column_start":14,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":159},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":118485,"byte_end":118498,"line_start":229,"line_end":229,"column_start":41,"column_end":54},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":148},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":118872,"byte_end":118885,"line_start":240,"line_end":240,"column_start":32,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":148},"to":{"krate":2,"index":5973}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":119340,"byte_end":119353,"line_start":255,"line_end":255,"column_start":27,"column_end":40},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":148},"to":{"krate":2,"index":1590}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":119916,"byte_end":119921,"line_start":273,"line_end":273,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1885},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":119928,"byte_end":119932,"line_start":274,"line_end":274,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1890},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":119939,"byte_end":119952,"line_start":275,"line_end":275,"column_start":7,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":72},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":119959,"byte_end":119969,"line_start":276,"line_end":276,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1653},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":119976,"byte_end":119979,"line_start":277,"line_end":277,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1943},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120001,"byte_end":120010,"line_start":278,"line_end":278,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":1976},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120017,"byte_end":120020,"line_start":279,"line_end":279,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1948},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120042,"byte_end":120051,"line_start":280,"line_end":280,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":1980},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120058,"byte_end":120061,"line_start":281,"line_end":281,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1953},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120083,"byte_end":120092,"line_start":282,"line_end":282,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":1984},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120099,"byte_end":120102,"line_start":283,"line_end":283,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1958},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120124,"byte_end":120133,"line_start":284,"line_end":284,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":1988},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/alias_method.rs","byte_start":120140,"byte_end":120143,"line_start":285,"line_end":285,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":4634},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":99337,"byte_end":99350,"line_start":91,"line_end":91,"column_start":37,"column_end":50},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1307},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":104219,"byte_end":104232,"line_start":224,"line_end":224,"column_start":33,"column_end":46},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1307},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":109574,"byte_end":109587,"line_start":367,"line_end":367,"column_start":6,"column_end":19},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":109982,"byte_end":109995,"line_start":379,"line_end":379,"column_start":30,"column_end":43},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1318},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weighted/mod.rs","byte_start":110163,"byte_end":110176,"line_start":388,"line_end":388,"column_start":23,"column_end":36},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1318},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_sphere.rs","byte_start":128352,"byte_end":128369,"line_start":26,"line_end":26,"column_start":6,"column_end":23},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1338},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_sphere.rs","byte_start":128551,"byte_end":128568,"line_start":34,"line_end":34,"column_start":33,"column_end":50},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1338},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131566,"byte_end":131576,"line_start":27,"line_end":27,"column_start":6,"column_end":16},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/unit_circle.rs","byte_start":131737,"byte_end":131747,"line_start":35,"line_end":35,"column_start":33,"column_end":43},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1345},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":136345,"byte_end":136350,"line_start":84,"line_end":84,"column_start":6,"column_end":11},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":136986,"byte_end":137001,"line_start":105,"line_end":105,"column_start":6,"column_end":21},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":137219,"byte_end":137234,"line_start":114,"line_end":114,"column_start":6,"column_end":21},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":137472,"byte_end":137477,"line_start":125,"line_end":125,"column_start":28,"column_end":33},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1352},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":137738,"byte_end":137753,"line_start":134,"line_end":134,"column_start":28,"column_end":43},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1374},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":137955,"byte_end":137970,"line_start":141,"line_end":141,"column_start":28,"column_end":43},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1382},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":139318,"byte_end":139328,"line_start":184,"line_end":184,"column_start":6,"column_end":16},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":139745,"byte_end":139755,"line_start":197,"line_end":197,"column_start":28,"column_end":38},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1391},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":140575,"byte_end":140582,"line_start":225,"line_end":225,"column_start":6,"column_end":13},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1409},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":141049,"byte_end":141056,"line_start":239,"line_end":239,"column_start":28,"column_end":35},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1409},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":141441,"byte_end":141449,"line_start":254,"line_end":254,"column_start":6,"column_end":14},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":141774,"byte_end":141782,"line_start":265,"line_end":265,"column_start":28,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1418},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":142184,"byte_end":142188,"line_start":280,"line_end":280,"column_start":6,"column_end":10},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1426},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/gamma.rs","byte_start":142575,"byte_end":142579,"line_start":294,"line_end":294,"column_start":28,"column_end":32},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1426},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":145567,"byte_end":145581,"line_start":33,"line_end":33,"column_start":28,"column_end":42},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1434},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147196,"byte_end":147202,"line_start":84,"line_end":84,"column_start":6,"column_end":12},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1441},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":147609,"byte_end":147615,"line_start":100,"line_end":100,"column_start":28,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1441},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":148065,"byte_end":148074,"line_start":118,"line_end":118,"column_start":6,"column_end":15},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/normal.rs","byte_start":148480,"byte_end":148489,"line_start":131,"line_end":131,"column_start":28,"column_end":37},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1449},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":150801,"byte_end":150805,"line_start":36,"line_end":36,"column_start":28,"column_end":32},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1456},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":151755,"byte_end":151758,"line_start":68,"line_end":68,"column_start":6,"column_end":9},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/exponential.rs","byte_start":152066,"byte_end":152069,"line_start":78,"line_end":78,"column_start":28,"column_end":31},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1463},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/pareto.rs","byte_start":153425,"byte_end":153431,"line_start":23,"line_end":23,"column_start":6,"column_end":12},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1470},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/pareto.rs","byte_start":153921,"byte_end":153927,"line_start":38,"line_end":38,"column_start":28,"column_end":34},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1470},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/poisson.rs","byte_start":155537,"byte_end":155544,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1478},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/poisson.rs","byte_start":156073,"byte_end":156080,"line_start":48,"line_end":48,"column_start":28,"column_end":35},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1478},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/binomial.rs","byte_start":160606,"byte_end":160614,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1489},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/binomial.rs","byte_start":161240,"byte_end":161248,"line_start":49,"line_end":49,"column_start":28,"column_end":36},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1489},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/cauchy.rs","byte_start":171769,"byte_end":171775,"line_start":29,"line_end":29,"column_start":6,"column_end":12},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1497},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/cauchy.rs","byte_start":172168,"byte_end":172174,"line_start":42,"line_end":42,"column_start":28,"column_end":34},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1497},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175148,"byte_end":175157,"line_start":30,"line_end":30,"column_start":6,"column_end":15},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/dirichlet.rs","byte_start":175963,"byte_end":175972,"line_start":63,"line_end":63,"column_start":33,"column_end":42},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1505},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/triangular.rs","byte_start":178240,"byte_end":178250,"line_start":24,"line_end":24,"column_start":6,"column_end":16},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/triangular.rs","byte_start":178684,"byte_end":178694,"line_start":41,"line_end":41,"column_start":28,"column_end":38},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1511},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weibull.rs","byte_start":180501,"byte_end":180508,"line_start":23,"line_end":23,"column_start":6,"column_end":13},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/weibull.rs","byte_start":180866,"byte_end":180873,"line_start":35,"line_end":35,"column_start":28,"column_end":35},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1520},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/integer.rs","byte_start":194755,"byte_end":194763,"line_start":22,"line_end":22,"column_start":27,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1983},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/integer.rs","byte_start":194904,"byte_end":194912,"line_start":29,"line_end":29,"column_start":28,"column_end":36},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1983},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/integer.rs","byte_start":195055,"byte_end":195063,"line_start":36,"line_end":36,"column_start":28,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1983},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/integer.rs","byte_start":195199,"byte_end":195207,"line_start":43,"line_end":43,"column_start":28,"column_end":36},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1983},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/integer.rs","byte_start":195382,"byte_end":195390,"line_start":51,"line_end":51,"column_start":29,"column_end":37},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1983},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/integer.rs","byte_start":195685,"byte_end":195693,"line_start":61,"line_end":61,"column_start":30,"column_end":38},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1983},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":203641,"byte_end":203649,"line_start":42,"line_end":42,"column_start":29,"column_end":37},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1983},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":204398,"byte_end":204410,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1604},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":205200,"byte_end":205208,"line_start":83,"line_end":83,"column_start":29,"column_end":37},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1983},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":206389,"byte_end":206397,"line_start":118,"line_end":118,"column_start":27,"column_end":35},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1983},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":207666,"byte_end":207674,"line_start":158,"line_end":158,"column_start":37,"column_end":45},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1983},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/other.rs","byte_start":208018,"byte_end":208026,"line_start":170,"line_end":170,"column_start":39,"column_end":47},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1983},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/utils.rs","byte_start":219594,"byte_end":219599,"line_start":251,"line_end":251,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1885},"to":{"krate":0,"index":507}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/utils.rs","byte_start":219806,"byte_end":219811,"line_start":258,"line_end":258,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1885},"to":{"krate":0,"index":511}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/utils.rs","byte_start":220193,"byte_end":220198,"line_start":269,"line_end":269,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1885},"to":{"krate":0,"index":516}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":32481,"byte_end":32489,"line_start":249,"line_end":249,"column_start":28,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1971},"to":{"krate":2,"index":4768}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/distributions/mod.rs","byte_start":33052,"byte_end":33060,"line_start":267,"line_end":267,"column_start":39,"column_end":47},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1971},"to":{"krate":2,"index":5031}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":262331,"byte_end":262338,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1990},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":262512,"byte_end":262519,"line_start":60,"line_end":60,"column_start":27,"column_end":34},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1990},"to":{"krate":15,"index":141}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":263283,"byte_end":263292,"line_start":85,"line_end":85,"column_start":23,"column_end":32},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1996},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/read.rs","byte_start":263433,"byte_end":263442,"line_start":91,"line_end":91,"column_start":28,"column_end":37},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1996},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":268312,"byte_end":268324,"line_start":83,"line_end":83,"column_start":15,"column_end":27},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2001},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":269148,"byte_end":269160,"line_start":105,"line_end":105,"column_start":36,"column_end":48},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2001},"to":{"krate":15,"index":141}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":269694,"byte_end":269706,"line_start":128,"line_end":128,"column_start":25,"column_end":37},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2001},"to":{"krate":2,"index":1590}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":270030,"byte_end":270042,"line_start":139,"line_end":139,"column_start":29,"column_end":41},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2001},"to":{"krate":15,"index":146}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":270328,"byte_end":270341,"line_start":152,"line_end":152,"column_start":32,"column_end":45},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2010},"to":{"krate":15,"index":51}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":271192,"byte_end":271205,"line_start":174,"line_end":174,"column_start":15,"column_end":28},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2010},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":273810,"byte_end":273823,"line_start":249,"line_end":249,"column_start":25,"column_end":38},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2010},"to":{"krate":2,"index":1590}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/adapter/reseeding.rs","byte_start":274259,"byte_end":274272,"line_start":264,"line_end":264,"column_start":29,"column_end":42},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2010},"to":{"krate":15,"index":146}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278262,"byte_end":278272,"line_start":28,"line_end":28,"column_start":6,"column_end":16},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2022},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278624,"byte_end":278634,"line_start":39,"line_end":39,"column_start":18,"column_end":28},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2022},"to":{"krate":2,"index":1871}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":278716,"byte_end":278726,"line_start":45,"line_end":45,"column_start":18,"column_end":28},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2022},"to":{"krate":15,"index":141}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/entropy.rs","byte_start":279111,"byte_end":279121,"line_start":63,"line_end":63,"column_start":20,"column_end":30},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2022},"to":{"krate":15,"index":146}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280333,"byte_end":280340,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2026},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/mock.rs","byte_start":280603,"byte_end":280610,"line_start":41,"line_end":41,"column_start":18,"column_end":25},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2026},"to":{"krate":15,"index":141}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":282757,"byte_end":282763,"line_start":39,"line_end":39,"column_start":18,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2033},"to":{"krate":15,"index":141}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":283219,"byte_end":283225,"line_start":61,"line_end":61,"column_start":22,"column_end":28},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2033},"to":{"krate":15,"index":147}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/std.rs","byte_start":283534,"byte_end":283540,"line_start":75,"line_end":75,"column_start":20,"column_end":26},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2033},"to":{"krate":15,"index":146}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":288042,"byte_end":288051,"line_start":86,"line_end":86,"column_start":18,"column_end":27},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2040},"to":{"krate":2,"index":1871}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":288149,"byte_end":288158,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2040},"to":{"krate":15,"index":141}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/rngs/thread.rs","byte_start":288655,"byte_end":288664,"line_start":112,"line_end":112,"column_start":20,"column_end":29},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2040},"to":{"krate":15,"index":146}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":317721,"byte_end":317729,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2052},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":319473,"byte_end":319481,"line_start":90,"line_end":90,"column_start":20,"column_end":28},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2052},"to":{"krate":2,"index":1616}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":320041,"byte_end":320049,"line_start":104,"line_end":104,"column_start":25,"column_end":33},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2052},"to":{"krate":2,"index":1804}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":320161,"byte_end":320169,"line_start":111,"line_end":111,"column_start":27,"column_end":35},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2052},"to":{"krate":2,"index":1804}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":320462,"byte_end":320474,"line_start":125,"line_end":125,"column_start":23,"column_end":35},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2063},"to":{"krate":2,"index":4768}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":321008,"byte_end":321020,"line_start":145,"line_end":145,"column_start":32,"column_end":44},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2063},"to":{"krate":2,"index":4723}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":321236,"byte_end":321252,"line_start":154,"line_end":154,"column_start":19,"column_end":35},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2074},"to":{"krate":2,"index":4768}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":321777,"byte_end":321793,"line_start":176,"line_end":176,"column_start":28,"column_end":44},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2074},"to":{"krate":2,"index":4723}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":326855,"byte_end":326859,"line_start":304,"line_end":304,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1890},"to":{"krate":0,"index":805}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":326862,"byte_end":326872,"line_start":304,"line_end":304,"column_start":20,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1653},"to":{"krate":0,"index":805}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":326875,"byte_end":326878,"line_start":304,"line_end":304,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1642},"to":{"krate":0,"index":805}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":326881,"byte_end":326890,"line_start":304,"line_end":304,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":1616},"to":{"krate":0,"index":805}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":326893,"byte_end":326895,"line_start":304,"line_end":304,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":1621},"to":{"krate":0,"index":805}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":326898,"byte_end":326911,"line_start":304,"line_end":304,"column_start":56,"column_end":69},"kind":"SuperTrait","from":{"krate":0,"index":72},"to":{"krate":0,"index":805}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/index.rs","byte_start":326926,"byte_end":326930,"line_start":304,"line_end":304,"column_start":84,"column_end":88},"kind":"SuperTrait","from":{"krate":2,"index":6164},"to":{"krate":0,"index":805}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297254,"byte_end":297262,"line_start":241,"line_end":241,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":4768},"to":{"krate":0,"index":847}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":297265,"byte_end":297270,"line_start":241,"line_end":241,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":1885},"to":{"krate":0,"index":847}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":305455,"byte_end":305456,"line_start":477,"line_end":477,"column_start":28,"column_end":29},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":886},"to":{"krate":0,"index":847}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":305958,"byte_end":305973,"line_start":493,"line_end":493,"column_start":73,"column_end":88},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2085},"to":{"krate":2,"index":4768}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/seq/mod.rs","byte_start":306425,"byte_end":306440,"line_start":508,"line_end":508,"column_start":9,"column_end":24},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2085},"to":{"krate":2,"index":4723}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":4726,"byte_end":4733,"line_start":146,"line_end":146,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":15,"index":141},"to":{"krate":0,"index":913}},{"span":{"file_name":"/home/mstott/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.2/src/lib.rs","byte_start":12794,"byte_end":12795,"line_start":390,"line_end":390,"column_start":35,"column_end":36},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":933},"to":{"krate":0,"index":913}}]}